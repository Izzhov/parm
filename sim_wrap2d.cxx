/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      register int i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_print(SwigPyObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char *str;
#ifdef METH_NOARGS
  PyObject *repr = SwigPyObject_repr(v);
#else
  PyObject *repr = SwigPyObject_repr(v, NULL);
#endif
  if (repr) {
    str = SWIG_Python_str_AsChar(repr); 
    fputs(str, fp);
    SWIG_Python_str_DelForPy3(str);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
SwigPyObject_str(SwigPyObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    SWIG_Python_str_FromChar(result) : 0;
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyObject_print,        /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyObject_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (flags & SWIG_POINTER_IMPLICIT_CONV) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  res = -1;
  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Box swig_types[0]
#define SWIGTYPE_p_COMSpring swig_types[1]
#define SWIGTYPE_p_ChargePair swig_types[2]
#define SWIGTYPE_p_Charged swig_types[3]
#define SWIGTYPE_p_Charges swig_types[4]
#define SWIGTYPE_p_EisMclachlanAtom swig_types[5]
#define SWIGTYPE_p_EisMclachlanPair swig_types[6]
#define SWIGTYPE_p_HertzianAtom swig_types[7]
#define SWIGTYPE_p_HertzianPair swig_types[8]
#define SWIGTYPE_p_HydroAtom swig_types[9]
#define SWIGTYPE_p_HydroPair swig_types[10]
#define SWIGTYPE_p_InfiniteBox swig_types[11]
#define SWIGTYPE_p_LJAtomIndexed swig_types[12]
#define SWIGTYPE_p_LJAttractFixedRepulseAtom swig_types[13]
#define SWIGTYPE_p_LJAttractFixedRepulsePair swig_types[14]
#define SWIGTYPE_p_LJAttractPair swig_types[15]
#define SWIGTYPE_p_LJAttractRepulseAtom swig_types[16]
#define SWIGTYPE_p_LJAttractRepulsePair swig_types[17]
#define SWIGTYPE_p_LJDoubleAtom swig_types[18]
#define SWIGTYPE_p_LJDoublePair swig_types[19]
#define SWIGTYPE_p_LJFullCut swig_types[20]
#define SWIGTYPE_p_LJFullPair swig_types[21]
#define SWIGTYPE_p_LJatom swig_types[22]
#define SWIGTYPE_p_LJatomcut swig_types[23]
#define SWIGTYPE_p_LJattract swig_types[24]
#define SWIGTYPE_p_LJattractCut swig_types[25]
#define SWIGTYPE_p_LJishAtom swig_types[26]
#define SWIGTYPE_p_LJishPair swig_types[27]
#define SWIGTYPE_p_LJpair swig_types[28]
#define SWIGTYPE_p_LJrepulsive swig_types[29]
#define SWIGTYPE_p_LJsimple swig_types[30]
#define SWIGTYPE_p_NListedT_EisMclachlanAtom_EisMclachlanPair_t swig_types[31]
#define SWIGTYPE_p_NListedT_HertzianAtom_HertzianPair_t swig_types[32]
#define SWIGTYPE_p_NListedT_HydroAtom_HydroPair_t swig_types[33]
#define SWIGTYPE_p_NListedT_LJAtomIndexed_LJFullPair_t swig_types[34]
#define SWIGTYPE_p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t swig_types[35]
#define SWIGTYPE_p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t swig_types[36]
#define SWIGTYPE_p_NListedT_LJDoubleAtom_LJDoublePair_t swig_types[37]
#define SWIGTYPE_p_NListedT_LJatom_LJpair_t swig_types[38]
#define SWIGTYPE_p_NListedT_LJatomcut_LJAttractPair_t swig_types[39]
#define SWIGTYPE_p_NListedT_LJishAtom_LJishPair_t swig_types[40]
#define SWIGTYPE_p_NListedVirialT_HertzianAtom_HertzianPair_t swig_types[41]
#define SWIGTYPE_p_NPHGaussianConstraint swig_types[42]
#define SWIGTYPE_p_NumvectorT_double_2_t swig_types[43]
#define SWIGTYPE_p_NumvectorT_double_3_t swig_types[44]
#define SWIGTYPE_p_NvectorT_Vec_2_t swig_types[45]
#define SWIGTYPE_p_NvectorT_Vector2T_double_t_3_t swig_types[46]
#define SWIGTYPE_p_NvectorT_double_2_t swig_types[47]
#define SWIGTYPE_p_NvectorT_double_3_t swig_types[48]
#define SWIGTYPE_p_OriginBox swig_types[49]
#define SWIGTYPE_p_SimpleListedT_HertzianAtom_HertzianPair_t swig_types[50]
#define SWIGTYPE_p_StaticCollec swig_types[51]
#define SWIGTYPE_p_Vector2T_double_t swig_types[52]
#define SWIGTYPE_p_allocator_type swig_types[53]
#define SWIGTYPE_p_anglegrouping swig_types[54]
#define SWIGTYPE_p_angletriples swig_types[55]
#define SWIGTYPE_p_arrayT_atom_p_2_t swig_types[56]
#define SWIGTYPE_p_arrayT_atom_p_3_t swig_types[57]
#define SWIGTYPE_p_arrayT_atom_p_4_t swig_types[58]
#define SWIGTYPE_p_arrayT_atomid_2_t swig_types[59]
#define SWIGTYPE_p_atom swig_types[60]
#define SWIGTYPE_p_atomRK4 swig_types[61]
#define SWIGTYPE_p_atomgroup swig_types[62]
#define SWIGTYPE_p_atomid swig_types[63]
#define SWIGTYPE_p_atompair swig_types[64]
#define SWIGTYPE_p_atompaircomp swig_types[65]
#define SWIGTYPE_p_atomref swig_types[66]
#define SWIGTYPE_p_atomvec swig_types[67]
#define SWIGTYPE_p_atomvecRK4 swig_types[68]
#define SWIGTYPE_p_bivariateGauss swig_types[69]
#define SWIGTYPE_p_bondangle swig_types[70]
#define SWIGTYPE_p_bondgrouping swig_types[71]
#define SWIGTYPE_p_bondpairs swig_types[72]
#define SWIGTYPE_p_bool swig_types[73]
#define SWIGTYPE_p_boost__mt19937 swig_types[74]
#define SWIGTYPE_p_boost__normal_distributionT_t swig_types[75]
#define SWIGTYPE_p_boost__uniform_01T_t swig_types[76]
#define SWIGTYPE_p_boost__variate_generatorT_engine_R_lindistribution_t swig_types[77]
#define SWIGTYPE_p_boost__variate_generatorT_engine_R_normdistribution_t swig_types[78]
#define SWIGTYPE_p_char swig_types[79]
#define SWIGTYPE_p_collection swig_types[80]
#define SWIGTYPE_p_collectionConjGradient swig_types[81]
#define SWIGTYPE_p_collectionConjGradientBox swig_types[82]
#define SWIGTYPE_p_collectionGaussianT swig_types[83]
#define SWIGTYPE_p_collectionGear3A swig_types[84]
#define SWIGTYPE_p_collectionGear4A swig_types[85]
#define SWIGTYPE_p_collectionGear4NPH swig_types[86]
#define SWIGTYPE_p_collectionGear4NPT swig_types[87]
#define SWIGTYPE_p_collectionGear5A swig_types[88]
#define SWIGTYPE_p_collectionGear6A swig_types[89]
#define SWIGTYPE_p_collectionNoseHoover swig_types[90]
#define SWIGTYPE_p_collectionOverdamped swig_types[91]
#define SWIGTYPE_p_collectionRK4 swig_types[92]
#define SWIGTYPE_p_collectionSol swig_types[93]
#define SWIGTYPE_p_collectionSolHT swig_types[94]
#define SWIGTYPE_p_collectionVerlet swig_types[95]
#define SWIGTYPE_p_collectionVerletNPT swig_types[96]
#define SWIGTYPE_p_const_reference swig_types[97]
#define SWIGTYPE_p_constraint swig_types[98]
#define SWIGTYPE_p_coordCOMConstraint swig_types[99]
#define SWIGTYPE_p_coordConstraint swig_types[100]
#define SWIGTYPE_p_difference_type swig_types[101]
#define SWIGTYPE_p_double swig_types[102]
#define SWIGTYPE_p_electricScreened swig_types[103]
#define SWIGTYPE_p_fixedForce swig_types[104]
#define SWIGTYPE_p_fixedForceAtom swig_types[105]
#define SWIGTYPE_p_fixedSpring swig_types[106]
#define SWIGTYPE_p_fixedSpringAtom swig_types[107]
#define SWIGTYPE_p_forcepair swig_types[108]
#define SWIGTYPE_p_forcepairx swig_types[109]
#define SWIGTYPE_p_fpairxFunct swig_types[110]
#define SWIGTYPE_p_gaussVec swig_types[111]
#define SWIGTYPE_p_idpair swig_types[112]
#define SWIGTYPE_p_interaction swig_types[113]
#define SWIGTYPE_p_interactionpairsx swig_types[114]
#define SWIGTYPE_p_interactpair swig_types[115]
#define SWIGTYPE_p_jamminglist swig_types[116]
#define SWIGTYPE_p_jamminglistrot swig_types[117]
#define SWIGTYPE_p_jammingtree swig_types[118]
#define SWIGTYPE_p_jammingtree2 swig_types[119]
#define SWIGTYPE_p_jammingtreeBD swig_types[120]
#define SWIGTYPE_p_metagroup swig_types[121]
#define SWIGTYPE_p_neighborlist swig_types[122]
#define SWIGTYPE_p_p_PyObject swig_types[123]
#define SWIGTYPE_p_p_atom swig_types[124]
#define SWIGTYPE_p_p_atomRK4 swig_types[125]
#define SWIGTYPE_p_pairlist swig_types[126]
#define SWIGTYPE_p_reference swig_types[127]
#define SWIGTYPE_p_relativeConstraint swig_types[128]
#define SWIGTYPE_p_setT_atomid_t swig_types[129]
#define SWIGTYPE_p_setT_atomid_t__iterator swig_types[130]
#define SWIGTYPE_p_size_type swig_types[131]
#define SWIGTYPE_p_spring swig_types[132]
#define SWIGTYPE_p_statetracker swig_types[133]
#define SWIGTYPE_p_std__allocatorT_Vector2T_double_t_p_t swig_types[134]
#define SWIGTYPE_p_std__allocatorT_Vector2T_double_t_t swig_types[135]
#define SWIGTYPE_p_std__allocatorT_atomgroup_p_t swig_types[136]
#define SWIGTYPE_p_std__allocatorT_atomvecRK4_p_t swig_types[137]
#define SWIGTYPE_p_std__allocatorT_constraint_p_t swig_types[138]
#define SWIGTYPE_p_std__allocatorT_double_t swig_types[139]
#define SWIGTYPE_p_std__allocatorT_interaction_p_t swig_types[140]
#define SWIGTYPE_p_std__allocatorT_interactionpairsx_p_t swig_types[141]
#define SWIGTYPE_p_std__allocatorT_jamminglist_t swig_types[142]
#define SWIGTYPE_p_std__allocatorT_jamminglistrot_t swig_types[143]
#define SWIGTYPE_p_std__allocatorT_statetracker_p_t swig_types[144]
#define SWIGTYPE_p_std__allocatorT_unsigned_int_t swig_types[145]
#define SWIGTYPE_p_std__invalid_argument swig_types[146]
#define SWIGTYPE_p_std__listT__Tp__Alloc_t swig_types[147]
#define SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t swig_types[148]
#define SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t swig_types[149]
#define SWIGTYPE_p_std__vectorT_Charged_std__allocatorT_Charged_t_t swig_types[150]
#define SWIGTYPE_p_std__vectorT_EisMclachlanAtom_std__allocatorT_EisMclachlanAtom_t_t swig_types[151]
#define SWIGTYPE_p_std__vectorT_HertzianAtom_std__allocatorT_HertzianAtom_t_t swig_types[152]
#define SWIGTYPE_p_std__vectorT_HydroAtom_std__allocatorT_HydroAtom_t_t swig_types[153]
#define SWIGTYPE_p_std__vectorT_LJAtomIndexed_std__allocatorT_LJAtomIndexed_t_t swig_types[154]
#define SWIGTYPE_p_std__vectorT_LJAttractFixedRepulseAtom_std__allocatorT_LJAttractFixedRepulseAtom_t_t swig_types[155]
#define SWIGTYPE_p_std__vectorT_LJAttractRepulseAtom_std__allocatorT_LJAttractRepulseAtom_t_t swig_types[156]
#define SWIGTYPE_p_std__vectorT_LJDoubleAtom_std__allocatorT_LJDoubleAtom_t_t swig_types[157]
#define SWIGTYPE_p_std__vectorT_LJatom_std__allocatorT_LJatom_t_t swig_types[158]
#define SWIGTYPE_p_std__vectorT_LJatomcut_std__allocatorT_LJatomcut_t_t swig_types[159]
#define SWIGTYPE_p_std__vectorT_LJishAtom_std__allocatorT_LJishAtom_t_t swig_types[160]
#define SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t swig_types[161]
#define SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t swig_types[162]
#define SWIGTYPE_p_std__vectorT__Tp__Alloc_t swig_types[163]
#define SWIGTYPE_p_std__vectorT__Tp_p__Alloc_t swig_types[164]
#define SWIGTYPE_p_std__vectorT_anglegrouping_std__allocatorT_anglegrouping_t_t swig_types[165]
#define SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t swig_types[166]
#define SWIGTYPE_p_std__vectorT_atomid_std__allocatorT_atomid_t_t swig_types[167]
#define SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t swig_types[168]
#define SWIGTYPE_p_std__vectorT_bondgrouping_std__allocatorT_bondgrouping_t_t swig_types[169]
#define SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t swig_types[170]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[171]
#define SWIGTYPE_p_std__vectorT_fixedForceAtom_std__allocatorT_fixedForceAtom_t_t swig_types[172]
#define SWIGTYPE_p_std__vectorT_fixedSpringAtom_std__allocatorT_fixedSpringAtom_t_t swig_types[173]
#define SWIGTYPE_p_std__vectorT_idpair_std__allocatorT_idpair_t_t__iterator swig_types[174]
#define SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t swig_types[175]
#define SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t swig_types[176]
#define SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t swig_types[177]
#define SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t swig_types[178]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[179]
#define SWIGTYPE_p_unsigned_int swig_types[180]
#define SWIGTYPE_p_value_type swig_types[181]
#define SWIGTYPE_p_xrpsummer swig_types[182]
static swig_type_info *swig_types[184];
static swig_module_info swig_module = {swig_types, 183, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _sim2d.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__sim2d

#else
#  define SWIG_init    init_sim2d

#endif
#define SWIG_name    "_sim2d"

#define SWIGVERSION 0x020010 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>
#include <stddef.h>


  #include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
#if PY_VERSION_HEX >= 0x03000000
      {
        long v = PyLong_AsLong(obj);
        if (!PyErr_Occurred()) {
          if (v < 0) {
            return SWIG_OverflowError;
          }
        } else {
          PyErr_Clear();
        }
      }
#endif
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyLong_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <stdexcept>


#include <algorithm>


#include <vector>


#include <list>


#include "vec.hpp"
#include "vecrand.hpp"
#include "vecrand.cpp"
#include "interaction.hpp"
#include "interaction.cpp"
#include "constraints.hpp"
#include "collection.hpp"
#include "collection.cpp"
static int myErr = 0;


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}

SWIGINTERN Nvector< double,3 > Nvector_Sl_double_Sc_3_Sg____truediv__(Nvector< double,3 > const *self,double const n){
        return self->operator/(n);
    }
SWIGINTERN double Nvector_Sl_double_Sc_3_Sg____getitem__(Nvector< double,3 > const *self,unsigned int const n){
        return self->get(n);
    }
SWIGINTERN void Nvector_Sl_double_Sc_3_Sg____setitem__(Nvector< double,3 > *self,unsigned int const n,double const val){
        self->set(n, val);
    }
SWIGINTERN unsigned int Nvector_Sl_double_Sc_3_Sg____len__(Nvector< double,3 > *self){ return 3;}
SWIGINTERN Nvector< double,2 > Nvector_Sl_double_Sc_2_Sg____truediv__(Nvector< double,2 > const *self,double const n){
        return self->operator/(n);
    }
SWIGINTERN double Nvector_Sl_double_Sc_2_Sg____getitem__(Nvector< double,2 > const *self,unsigned int const n){
        return self->get(n);
    }
SWIGINTERN void Nvector_Sl_double_Sc_2_Sg____setitem__(Nvector< double,2 > *self,unsigned int const n,double const val){
        self->set(n, val);
    }
SWIGINTERN unsigned int Nvector_Sl_double_Sc_2_Sg____len__(Nvector< double,2 > *self){ return 2;}
SWIGINTERN char *Vector2_Sl_double_Sg____str__(Vector2< double > *self){
        static char temp[256];
        sprintf(temp,"(%g, %g)", self->getx(),self->gety());
        return &temp[0];
    }

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}

SWIGINTERN char *Vector2_Sl_double_Sg____repr__(Vector2< double > *self){
        static char temp[256];
        sprintf(temp,"Vec(%g, %g)", self->getx(),self->gety());
        return &temp[0];
    }
SWIGINTERN Vector2< double > Vector2_Sl_double_Sg____truediv__(Vector2< double > const *self,double const n){
        return Vector2<double>(self->operator/(n));
    }
SWIGINTERN Vector2< double > Vector2_Sl_double_Sg____mul____SWIG_2(Vector2< double > const *self,double const n){
        return Vector2<double>(self->operator*(n));
    }

namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if ( j < 0 ) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      if (ii > jj) {
        typename Sequence::const_reverse_iterator sb = self->rbegin();
        typename Sequence::const_reverse_iterator se = self->rbegin();
        std::advance(sb,size-ii-1);
        std::advance(se,size-jj-1);
        typename Sequence::const_reverse_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<-step && it!=se; ++c)
            it++;
        }
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj < ii)
        jj = ii;
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount; ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      if (jj > ii)
        jj = ii;
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount; ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj > ii) {
        typename Sequence::iterator sb = self->begin();
        std::advance(sb,ii);
        if (step == 1) {
          typename Sequence::iterator se = self->begin();
          std::advance(se,jj);
          self->erase(sb,se);
        } else {
          typename Sequence::iterator it = sb;
          size_t delcount = (jj - ii + step - 1) / step;
          while (delcount) {
            it = self->erase(it);
            for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
              it++;
            delcount--;
          }
        }
      }
    } else {
      if (ii > jj) {
        typename Sequence::reverse_iterator sb = self->rbegin();
        std::advance(sb,size-ii-1);
        typename Sequence::reverse_iterator it = sb;
        size_t delcount = (ii - jj - step - 1) / -step;
        while (delcount) {
          it = typename Sequence::reverse_iterator(self->erase((++it).base()));
          for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
            it++;
          delcount--;
        }
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}

SWIGINTERN swig::SwigPyIterator *vector_Sl_Vector2_Sl_double_Sg__Sm__Sg__iterator(vector< Vector2< double > * > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____nonzero__(vector< Vector2< double > * > const *self){
      return !(self->empty());
    }
SWIGINTERN bool vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____bool__(vector< Vector2< double > * > const *self){
      return !(self->empty());
    }
SWIGINTERN vector< Vector2< double > * >::size_type vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____len__(vector< Vector2< double > * > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}

SWIGINTERN vector< Vector2< double > * >::value_type vector_Sl_Vector2_Sl_double_Sg__Sm__Sg__pop(vector< Vector2< double > * > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<Vector2< double >*,std::allocator< Vector2< double > * > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< Vector2< double > *,std::allocator< Vector2< double > * > > *vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____getslice__(vector< Vector2< double > * > *self,vector< Vector2< double > * >::difference_type i,vector< Vector2< double > * >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }

  namespace swig {
    template <>  struct traits<Vector2< double > > {
      typedef pointer_category category;
      static const char* type_name() { return"Vector2< double >"; }
    };
  }


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<Vector2< double >*, std::allocator< Vector2< double > * > > > {
	  typedef value_category category;
	  static const char* type_name() {
	    return "std::vector<" "Vector2< double >" " *," "std::allocator< Vector2< double > * >" " >";
	  }
	};
      }
    
SWIGINTERN void vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____setslice____SWIG_0(vector< Vector2< double > * > *self,vector< Vector2< double > * >::difference_type i,vector< Vector2< double > * >::difference_type j,std::vector< Vector2< double > *,std::allocator< Vector2< double > * > > const &v=std::vector< Vector2< double > *,std::allocator< Vector2< double > * > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____delslice__(vector< Vector2< double > * > *self,vector< Vector2< double > * >::difference_type i,vector< Vector2< double > * >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____delitem____SWIG_0(vector< Vector2< double > * > *self,vector< Vector2< double > * >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< Vector2< double > *,std::allocator< Vector2< double > * > > *vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____getitem____SWIG_0(vector< Vector2< double > * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<Vector2< double >*,std::allocator< Vector2< double > * > >::difference_type id = i;
      std::vector<Vector2< double >*,std::allocator< Vector2< double > * > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____setitem____SWIG_0(vector< Vector2< double > * > *self,PySliceObject *slice,std::vector< Vector2< double > *,std::allocator< Vector2< double > * > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<Vector2< double >*,std::allocator< Vector2< double > * > >::difference_type id = i;
      std::vector<Vector2< double >*,std::allocator< Vector2< double > * > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____setitem____SWIG_1(vector< Vector2< double > * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<Vector2< double >*,std::allocator< Vector2< double > * > >::difference_type id = i;
      std::vector<Vector2< double >*,std::allocator< Vector2< double > * > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____delitem____SWIG_1(vector< Vector2< double > * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<Vector2< double >*,std::allocator< Vector2< double > * > >::difference_type id = i;
      std::vector<Vector2< double >*,std::allocator< Vector2< double > * > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN vector< Vector2< double > * >::value_type vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____getitem____SWIG_1(vector< Vector2< double > * > *self,vector< Vector2< double > * >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____setitem____SWIG_2(vector< Vector2< double > * > *self,vector< Vector2< double > * >::difference_type i,vector< Vector2< double > * >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void vector_Sl_Vector2_Sl_double_Sg__Sm__Sg__append(vector< Vector2< double > * > *self,vector< Vector2< double > * >::value_type x){
      self->push_back(x);
    }
SWIGINTERN swig::SwigPyIterator *vector_Sl_Vector2_Sl_double_Sg__Sg__iterator(vector< Vector2< double > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool vector_Sl_Vector2_Sl_double_Sg__Sg____nonzero__(vector< Vector2< double > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool vector_Sl_Vector2_Sl_double_Sg__Sg____bool__(vector< Vector2< double > > const *self){
      return !(self->empty());
    }
SWIGINTERN vector< Vector2< double > >::size_type vector_Sl_Vector2_Sl_double_Sg__Sg____len__(vector< Vector2< double > > const *self){
      return self->size();
    }
SWIGINTERN vector< Vector2< double > >::value_type vector_Sl_Vector2_Sl_double_Sg__Sg__pop(vector< Vector2< double > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<Vector2< double >,std::allocator< Vector2< double > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< Vector2< double >,std::allocator< Vector2< double > > > *vector_Sl_Vector2_Sl_double_Sg__Sg____getslice__(vector< Vector2< double > > *self,vector< Vector2< double > >::difference_type i,vector< Vector2< double > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }

      namespace swig {
	template <>  struct traits<std::vector<Vector2< double >, std::allocator< Vector2< double > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Vector2< double >" "," "std::allocator< Vector2< double > >" " >";
	  }
	};
      }
    
SWIGINTERN void vector_Sl_Vector2_Sl_double_Sg__Sg____setslice____SWIG_0(vector< Vector2< double > > *self,vector< Vector2< double > >::difference_type i,vector< Vector2< double > >::difference_type j,std::vector< Vector2< double >,std::allocator< Vector2< double > > > const &v=std::vector< Vector2< double >,std::allocator< Vector2< double > > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void vector_Sl_Vector2_Sl_double_Sg__Sg____delslice__(vector< Vector2< double > > *self,vector< Vector2< double > >::difference_type i,vector< Vector2< double > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void vector_Sl_Vector2_Sl_double_Sg__Sg____delitem____SWIG_0(vector< Vector2< double > > *self,vector< Vector2< double > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< Vector2< double >,std::allocator< Vector2< double > > > *vector_Sl_Vector2_Sl_double_Sg__Sg____getitem____SWIG_0(vector< Vector2< double > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<Vector2< double >,std::allocator< Vector2< double > > >::difference_type id = i;
      std::vector<Vector2< double >,std::allocator< Vector2< double > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_Vector2_Sl_double_Sg__Sg____setitem____SWIG_0(vector< Vector2< double > > *self,PySliceObject *slice,std::vector< Vector2< double >,std::allocator< Vector2< double > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<Vector2< double >,std::allocator< Vector2< double > > >::difference_type id = i;
      std::vector<Vector2< double >,std::allocator< Vector2< double > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void vector_Sl_Vector2_Sl_double_Sg__Sg____setitem____SWIG_1(vector< Vector2< double > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<Vector2< double >,std::allocator< Vector2< double > > >::difference_type id = i;
      std::vector<Vector2< double >,std::allocator< Vector2< double > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_Vector2_Sl_double_Sg__Sg____delitem____SWIG_1(vector< Vector2< double > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<Vector2< double >,std::allocator< Vector2< double > > >::difference_type id = i;
      std::vector<Vector2< double >,std::allocator< Vector2< double > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN vector< Vector2< double > >::value_type const &vector_Sl_Vector2_Sl_double_Sg__Sg____getitem____SWIG_1(vector< Vector2< double > > const *self,vector< Vector2< double > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void vector_Sl_Vector2_Sl_double_Sg__Sg____setitem____SWIG_2(vector< Vector2< double > > *self,vector< Vector2< double > >::difference_type i,vector< Vector2< double > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void vector_Sl_Vector2_Sl_double_Sg__Sg__append(vector< Vector2< double > > *self,vector< Vector2< double > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN swig::SwigPyIterator *list_Sl_jamminglist_Sg__iterator(list< jamminglist > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool list_Sl_jamminglist_Sg____nonzero__(list< jamminglist > const *self){
      return !(self->empty());
    }
SWIGINTERN bool list_Sl_jamminglist_Sg____bool__(list< jamminglist > const *self){
      return !(self->empty());
    }
SWIGINTERN list< jamminglist >::size_type list_Sl_jamminglist_Sg____len__(list< jamminglist > const *self){
      return self->size();
    }
SWIGINTERN list< jamminglist >::value_type list_Sl_jamminglist_Sg__pop(list< jamminglist > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::list<jamminglist,std::allocator< jamminglist > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::list< jamminglist,std::allocator< jamminglist > > *list_Sl_jamminglist_Sg____getslice__(list< jamminglist > *self,list< jamminglist >::difference_type i,list< jamminglist >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }

  namespace swig {
    template <>  struct traits<jamminglist > {
      typedef pointer_category category;
      static const char* type_name() { return"jamminglist"; }
    };
  }


  namespace swig {
    template <class T >
    struct traits_asptr<std::list<T> >  {
      static int asptr(PyObject *obj, std::list<T> **lis) {
	return traits_asptr_stdseq<std::list<T> >::asptr(obj, lis);
      }
    };

    template <class T>
    struct traits_from<std::list<T> > {
      static PyObject *from(const std::list<T> & vec) {
	return traits_from_stdseq<std::list<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::list<jamminglist, std::allocator< jamminglist > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::list<" "jamminglist" ", " "std::allocator< jamminglist >" " >";
	  }
	};
      }
    
SWIGINTERN void list_Sl_jamminglist_Sg____setslice____SWIG_0(list< jamminglist > *self,list< jamminglist >::difference_type i,list< jamminglist >::difference_type j,std::list< jamminglist,std::allocator< jamminglist > > const &v=std::list< jamminglist,std::allocator< jamminglist > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void list_Sl_jamminglist_Sg____delslice__(list< jamminglist > *self,list< jamminglist >::difference_type i,list< jamminglist >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void list_Sl_jamminglist_Sg____delitem____SWIG_0(list< jamminglist > *self,list< jamminglist >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::list< jamminglist,std::allocator< jamminglist > > *list_Sl_jamminglist_Sg____getitem____SWIG_0(list< jamminglist > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list<jamminglist,std::allocator< jamminglist > >::difference_type id = i;
      std::list<jamminglist,std::allocator< jamminglist > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void list_Sl_jamminglist_Sg____setitem____SWIG_0(list< jamminglist > *self,PySliceObject *slice,std::list< jamminglist,std::allocator< jamminglist > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list<jamminglist,std::allocator< jamminglist > >::difference_type id = i;
      std::list<jamminglist,std::allocator< jamminglist > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void list_Sl_jamminglist_Sg____setitem____SWIG_1(list< jamminglist > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list<jamminglist,std::allocator< jamminglist > >::difference_type id = i;
      std::list<jamminglist,std::allocator< jamminglist > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void list_Sl_jamminglist_Sg____delitem____SWIG_1(list< jamminglist > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list<jamminglist,std::allocator< jamminglist > >::difference_type id = i;
      std::list<jamminglist,std::allocator< jamminglist > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN list< jamminglist >::value_type const &list_Sl_jamminglist_Sg____getitem____SWIG_1(list< jamminglist > const *self,list< jamminglist >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void list_Sl_jamminglist_Sg____setitem____SWIG_2(list< jamminglist > *self,list< jamminglist >::difference_type i,list< jamminglist >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void list_Sl_jamminglist_Sg__append(list< jamminglist > *self,list< jamminglist >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN swig::SwigPyIterator *list_Sl_jamminglistrot_Sg__iterator(list< jamminglistrot > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool list_Sl_jamminglistrot_Sg____nonzero__(list< jamminglistrot > const *self){
      return !(self->empty());
    }
SWIGINTERN bool list_Sl_jamminglistrot_Sg____bool__(list< jamminglistrot > const *self){
      return !(self->empty());
    }
SWIGINTERN list< jamminglistrot >::size_type list_Sl_jamminglistrot_Sg____len__(list< jamminglistrot > const *self){
      return self->size();
    }
SWIGINTERN list< jamminglistrot >::value_type list_Sl_jamminglistrot_Sg__pop(list< jamminglistrot > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::list<jamminglistrot,std::allocator< jamminglistrot > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::list< jamminglistrot,std::allocator< jamminglistrot > > *list_Sl_jamminglistrot_Sg____getslice__(list< jamminglistrot > *self,list< jamminglistrot >::difference_type i,list< jamminglistrot >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }

  namespace swig {
    template <>  struct traits<jamminglistrot > {
      typedef pointer_category category;
      static const char* type_name() { return"jamminglistrot"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::list<jamminglistrot, std::allocator< jamminglistrot > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::list<" "jamminglistrot" ", " "std::allocator< jamminglistrot >" " >";
	  }
	};
      }
    
SWIGINTERN void list_Sl_jamminglistrot_Sg____setslice____SWIG_0(list< jamminglistrot > *self,list< jamminglistrot >::difference_type i,list< jamminglistrot >::difference_type j,std::list< jamminglistrot,std::allocator< jamminglistrot > > const &v=std::list< jamminglistrot,std::allocator< jamminglistrot > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void list_Sl_jamminglistrot_Sg____delslice__(list< jamminglistrot > *self,list< jamminglistrot >::difference_type i,list< jamminglistrot >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void list_Sl_jamminglistrot_Sg____delitem____SWIG_0(list< jamminglistrot > *self,list< jamminglistrot >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::list< jamminglistrot,std::allocator< jamminglistrot > > *list_Sl_jamminglistrot_Sg____getitem____SWIG_0(list< jamminglistrot > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list<jamminglistrot,std::allocator< jamminglistrot > >::difference_type id = i;
      std::list<jamminglistrot,std::allocator< jamminglistrot > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void list_Sl_jamminglistrot_Sg____setitem____SWIG_0(list< jamminglistrot > *self,PySliceObject *slice,std::list< jamminglistrot,std::allocator< jamminglistrot > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list<jamminglistrot,std::allocator< jamminglistrot > >::difference_type id = i;
      std::list<jamminglistrot,std::allocator< jamminglistrot > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void list_Sl_jamminglistrot_Sg____setitem____SWIG_1(list< jamminglistrot > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list<jamminglistrot,std::allocator< jamminglistrot > >::difference_type id = i;
      std::list<jamminglistrot,std::allocator< jamminglistrot > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void list_Sl_jamminglistrot_Sg____delitem____SWIG_1(list< jamminglistrot > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list<jamminglistrot,std::allocator< jamminglistrot > >::difference_type id = i;
      std::list<jamminglistrot,std::allocator< jamminglistrot > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN list< jamminglistrot >::value_type const &list_Sl_jamminglistrot_Sg____getitem____SWIG_1(list< jamminglistrot > const *self,list< jamminglistrot >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void list_Sl_jamminglistrot_Sg____setitem____SWIG_2(list< jamminglistrot > *self,list< jamminglistrot >::difference_type i,list< jamminglistrot >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void list_Sl_jamminglistrot_Sg__append(list< jamminglistrot > *self,list< jamminglistrot >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN Nvector< Vec,2 > Nvector_Sl_Vec_Sc_2_Sg____truediv__(Nvector< Vec,2 > const *self,double const n){
        return self->operator/(n);
    }
SWIGINTERN Vec Nvector_Sl_Vec_Sc_2_Sg____getitem__(Nvector< Vec,2 > const *self,unsigned int const n){
        return self->get(n);
    }
SWIGINTERN void Nvector_Sl_Vec_Sc_2_Sg____setitem__(Nvector< Vec,2 > *self,unsigned int const n,Vec const val){
        self->set(n, val);
    }
SWIGINTERN unsigned int Nvector_Sl_Vec_Sc_2_Sg____len__(Nvector< Vec,2 > *self){ return 2;}
SWIGINTERN swig::SwigPyIterator *vector_Sl_double_Sg__iterator(vector< double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool vector_Sl_double_Sg____nonzero__(vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN bool vector_Sl_double_Sg____bool__(vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN vector< double >::size_type vector_Sl_double_Sg____len__(vector< double > const *self){
      return self->size();
    }
SWIGINTERN vector< double >::value_type vector_Sl_double_Sg__pop(vector< double > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<double,std::allocator< double > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< double,std::allocator< double > > *vector_Sl_double_Sg____getslice__(vector< double > *self,vector< double >::difference_type i,vector< double >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }

namespace swig {
  template <> struct traits<double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };  
  template <>  struct traits_asval<double > {   
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from<double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    
SWIGINTERN void vector_Sl_double_Sg____setslice____SWIG_0(vector< double > *self,vector< double >::difference_type i,vector< double >::difference_type j,std::vector< double,std::allocator< double > > const &v=std::vector< double,std::allocator< double > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void vector_Sl_double_Sg____delslice__(vector< double > *self,vector< double >::difference_type i,vector< double >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void vector_Sl_double_Sg____delitem____SWIG_0(vector< double > *self,vector< double >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< double,std::allocator< double > > *vector_Sl_double_Sg____getitem____SWIG_0(vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<double,std::allocator< double > >::difference_type id = i;
      std::vector<double,std::allocator< double > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_double_Sg____setitem____SWIG_0(vector< double > *self,PySliceObject *slice,std::vector< double,std::allocator< double > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<double,std::allocator< double > >::difference_type id = i;
      std::vector<double,std::allocator< double > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void vector_Sl_double_Sg____setitem____SWIG_1(vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<double,std::allocator< double > >::difference_type id = i;
      std::vector<double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_double_Sg____delitem____SWIG_1(vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<double,std::allocator< double > >::difference_type id = i;
      std::vector<double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN vector< double >::value_type const &vector_Sl_double_Sg____getitem____SWIG_1(vector< double > const *self,vector< double >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void vector_Sl_double_Sg____setitem____SWIG_2(vector< double > *self,vector< double >::difference_type i,vector< double >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void vector_Sl_double_Sg__append(vector< double > *self,vector< double >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN swig::SwigPyIterator *vector_Sl_atomgroup_Sm__Sg__iterator(vector< atomgroup * > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool vector_Sl_atomgroup_Sm__Sg____nonzero__(vector< atomgroup * > const *self){
      return !(self->empty());
    }
SWIGINTERN bool vector_Sl_atomgroup_Sm__Sg____bool__(vector< atomgroup * > const *self){
      return !(self->empty());
    }
SWIGINTERN vector< atomgroup * >::size_type vector_Sl_atomgroup_Sm__Sg____len__(vector< atomgroup * > const *self){
      return self->size();
    }
SWIGINTERN vector< atomgroup * >::value_type vector_Sl_atomgroup_Sm__Sg__pop(vector< atomgroup * > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<atomgroup*,std::allocator< atomgroup * > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< atomgroup *,std::allocator< atomgroup * > > *vector_Sl_atomgroup_Sm__Sg____getslice__(vector< atomgroup * > *self,vector< atomgroup * >::difference_type i,vector< atomgroup * >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }

  namespace swig {
    template <>  struct traits<atomgroup > {
      typedef pointer_category category;
      static const char* type_name() { return"atomgroup"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<atomgroup*, std::allocator< atomgroup * > > > {
	  typedef value_category category;
	  static const char* type_name() {
	    return "std::vector<" "atomgroup" " *," "std::allocator< atomgroup * >" " >";
	  }
	};
      }
    
SWIGINTERN void vector_Sl_atomgroup_Sm__Sg____setslice____SWIG_0(vector< atomgroup * > *self,vector< atomgroup * >::difference_type i,vector< atomgroup * >::difference_type j,std::vector< atomgroup *,std::allocator< atomgroup * > > const &v=std::vector< atomgroup *,std::allocator< atomgroup * > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void vector_Sl_atomgroup_Sm__Sg____delslice__(vector< atomgroup * > *self,vector< atomgroup * >::difference_type i,vector< atomgroup * >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void vector_Sl_atomgroup_Sm__Sg____delitem____SWIG_0(vector< atomgroup * > *self,vector< atomgroup * >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< atomgroup *,std::allocator< atomgroup * > > *vector_Sl_atomgroup_Sm__Sg____getitem____SWIG_0(vector< atomgroup * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<atomgroup*,std::allocator< atomgroup * > >::difference_type id = i;
      std::vector<atomgroup*,std::allocator< atomgroup * > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_atomgroup_Sm__Sg____setitem____SWIG_0(vector< atomgroup * > *self,PySliceObject *slice,std::vector< atomgroup *,std::allocator< atomgroup * > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<atomgroup*,std::allocator< atomgroup * > >::difference_type id = i;
      std::vector<atomgroup*,std::allocator< atomgroup * > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void vector_Sl_atomgroup_Sm__Sg____setitem____SWIG_1(vector< atomgroup * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<atomgroup*,std::allocator< atomgroup * > >::difference_type id = i;
      std::vector<atomgroup*,std::allocator< atomgroup * > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_atomgroup_Sm__Sg____delitem____SWIG_1(vector< atomgroup * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<atomgroup*,std::allocator< atomgroup * > >::difference_type id = i;
      std::vector<atomgroup*,std::allocator< atomgroup * > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN vector< atomgroup * >::value_type vector_Sl_atomgroup_Sm__Sg____getitem____SWIG_1(vector< atomgroup * > *self,vector< atomgroup * >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void vector_Sl_atomgroup_Sm__Sg____setitem____SWIG_2(vector< atomgroup * > *self,vector< atomgroup * >::difference_type i,vector< atomgroup * >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void vector_Sl_atomgroup_Sm__Sg__append(vector< atomgroup * > *self,vector< atomgroup * >::value_type x){
      self->push_back(x);
    }
SWIGINTERN swig::SwigPyIterator *vector_Sl_interaction_Sm__Sg__iterator(vector< interaction * > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool vector_Sl_interaction_Sm__Sg____nonzero__(vector< interaction * > const *self){
      return !(self->empty());
    }
SWIGINTERN bool vector_Sl_interaction_Sm__Sg____bool__(vector< interaction * > const *self){
      return !(self->empty());
    }
SWIGINTERN vector< interaction * >::size_type vector_Sl_interaction_Sm__Sg____len__(vector< interaction * > const *self){
      return self->size();
    }
SWIGINTERN vector< interaction * >::value_type vector_Sl_interaction_Sm__Sg__pop(vector< interaction * > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<interaction*,std::allocator< interaction * > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< interaction *,std::allocator< interaction * > > *vector_Sl_interaction_Sm__Sg____getslice__(vector< interaction * > *self,vector< interaction * >::difference_type i,vector< interaction * >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }

  namespace swig {
    template <>  struct traits<interaction > {
      typedef pointer_category category;
      static const char* type_name() { return"interaction"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<interaction*, std::allocator< interaction * > > > {
	  typedef value_category category;
	  static const char* type_name() {
	    return "std::vector<" "interaction" " *," "std::allocator< interaction * >" " >";
	  }
	};
      }
    
SWIGINTERN void vector_Sl_interaction_Sm__Sg____setslice____SWIG_0(vector< interaction * > *self,vector< interaction * >::difference_type i,vector< interaction * >::difference_type j,std::vector< interaction *,std::allocator< interaction * > > const &v=std::vector< interaction *,std::allocator< interaction * > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void vector_Sl_interaction_Sm__Sg____delslice__(vector< interaction * > *self,vector< interaction * >::difference_type i,vector< interaction * >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void vector_Sl_interaction_Sm__Sg____delitem____SWIG_0(vector< interaction * > *self,vector< interaction * >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< interaction *,std::allocator< interaction * > > *vector_Sl_interaction_Sm__Sg____getitem____SWIG_0(vector< interaction * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<interaction*,std::allocator< interaction * > >::difference_type id = i;
      std::vector<interaction*,std::allocator< interaction * > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_interaction_Sm__Sg____setitem____SWIG_0(vector< interaction * > *self,PySliceObject *slice,std::vector< interaction *,std::allocator< interaction * > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<interaction*,std::allocator< interaction * > >::difference_type id = i;
      std::vector<interaction*,std::allocator< interaction * > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void vector_Sl_interaction_Sm__Sg____setitem____SWIG_1(vector< interaction * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<interaction*,std::allocator< interaction * > >::difference_type id = i;
      std::vector<interaction*,std::allocator< interaction * > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_interaction_Sm__Sg____delitem____SWIG_1(vector< interaction * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<interaction*,std::allocator< interaction * > >::difference_type id = i;
      std::vector<interaction*,std::allocator< interaction * > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN vector< interaction * >::value_type vector_Sl_interaction_Sm__Sg____getitem____SWIG_1(vector< interaction * > *self,vector< interaction * >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void vector_Sl_interaction_Sm__Sg____setitem____SWIG_2(vector< interaction * > *self,vector< interaction * >::difference_type i,vector< interaction * >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void vector_Sl_interaction_Sm__Sg__append(vector< interaction * > *self,vector< interaction * >::value_type x){
      self->push_back(x);
    }
SWIGINTERN swig::SwigPyIterator *vector_Sl_interactionpairsx_Sm__Sg__iterator(vector< interactionpairsx * > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool vector_Sl_interactionpairsx_Sm__Sg____nonzero__(vector< interactionpairsx * > const *self){
      return !(self->empty());
    }
SWIGINTERN bool vector_Sl_interactionpairsx_Sm__Sg____bool__(vector< interactionpairsx * > const *self){
      return !(self->empty());
    }
SWIGINTERN vector< interactionpairsx * >::size_type vector_Sl_interactionpairsx_Sm__Sg____len__(vector< interactionpairsx * > const *self){
      return self->size();
    }
SWIGINTERN vector< interactionpairsx * >::value_type vector_Sl_interactionpairsx_Sm__Sg__pop(vector< interactionpairsx * > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<interactionpairsx*,std::allocator< interactionpairsx * > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< interactionpairsx *,std::allocator< interactionpairsx * > > *vector_Sl_interactionpairsx_Sm__Sg____getslice__(vector< interactionpairsx * > *self,vector< interactionpairsx * >::difference_type i,vector< interactionpairsx * >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }

  namespace swig {
    template <>  struct traits<interactionpairsx > {
      typedef pointer_category category;
      static const char* type_name() { return"interactionpairsx"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<interactionpairsx*, std::allocator< interactionpairsx * > > > {
	  typedef value_category category;
	  static const char* type_name() {
	    return "std::vector<" "interactionpairsx" " *," "std::allocator< interactionpairsx * >" " >";
	  }
	};
      }
    
SWIGINTERN void vector_Sl_interactionpairsx_Sm__Sg____setslice____SWIG_0(vector< interactionpairsx * > *self,vector< interactionpairsx * >::difference_type i,vector< interactionpairsx * >::difference_type j,std::vector< interactionpairsx *,std::allocator< interactionpairsx * > > const &v=std::vector< interactionpairsx *,std::allocator< interactionpairsx * > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void vector_Sl_interactionpairsx_Sm__Sg____delslice__(vector< interactionpairsx * > *self,vector< interactionpairsx * >::difference_type i,vector< interactionpairsx * >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void vector_Sl_interactionpairsx_Sm__Sg____delitem____SWIG_0(vector< interactionpairsx * > *self,vector< interactionpairsx * >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< interactionpairsx *,std::allocator< interactionpairsx * > > *vector_Sl_interactionpairsx_Sm__Sg____getitem____SWIG_0(vector< interactionpairsx * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<interactionpairsx*,std::allocator< interactionpairsx * > >::difference_type id = i;
      std::vector<interactionpairsx*,std::allocator< interactionpairsx * > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_interactionpairsx_Sm__Sg____setitem____SWIG_0(vector< interactionpairsx * > *self,PySliceObject *slice,std::vector< interactionpairsx *,std::allocator< interactionpairsx * > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<interactionpairsx*,std::allocator< interactionpairsx * > >::difference_type id = i;
      std::vector<interactionpairsx*,std::allocator< interactionpairsx * > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void vector_Sl_interactionpairsx_Sm__Sg____setitem____SWIG_1(vector< interactionpairsx * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<interactionpairsx*,std::allocator< interactionpairsx * > >::difference_type id = i;
      std::vector<interactionpairsx*,std::allocator< interactionpairsx * > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_interactionpairsx_Sm__Sg____delitem____SWIG_1(vector< interactionpairsx * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<interactionpairsx*,std::allocator< interactionpairsx * > >::difference_type id = i;
      std::vector<interactionpairsx*,std::allocator< interactionpairsx * > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN vector< interactionpairsx * >::value_type vector_Sl_interactionpairsx_Sm__Sg____getitem____SWIG_1(vector< interactionpairsx * > *self,vector< interactionpairsx * >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void vector_Sl_interactionpairsx_Sm__Sg____setitem____SWIG_2(vector< interactionpairsx * > *self,vector< interactionpairsx * >::difference_type i,vector< interactionpairsx * >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void vector_Sl_interactionpairsx_Sm__Sg__append(vector< interactionpairsx * > *self,vector< interactionpairsx * >::value_type x){
      self->push_back(x);
    }
SWIGINTERN swig::SwigPyIterator *vector_Sl_statetracker_Sm__Sg__iterator(vector< statetracker * > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool vector_Sl_statetracker_Sm__Sg____nonzero__(vector< statetracker * > const *self){
      return !(self->empty());
    }
SWIGINTERN bool vector_Sl_statetracker_Sm__Sg____bool__(vector< statetracker * > const *self){
      return !(self->empty());
    }
SWIGINTERN vector< statetracker * >::size_type vector_Sl_statetracker_Sm__Sg____len__(vector< statetracker * > const *self){
      return self->size();
    }
SWIGINTERN vector< statetracker * >::value_type vector_Sl_statetracker_Sm__Sg__pop(vector< statetracker * > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<statetracker*,std::allocator< statetracker * > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< statetracker *,std::allocator< statetracker * > > *vector_Sl_statetracker_Sm__Sg____getslice__(vector< statetracker * > *self,vector< statetracker * >::difference_type i,vector< statetracker * >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }

  namespace swig {
    template <>  struct traits<statetracker > {
      typedef pointer_category category;
      static const char* type_name() { return"statetracker"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<statetracker*, std::allocator< statetracker * > > > {
	  typedef value_category category;
	  static const char* type_name() {
	    return "std::vector<" "statetracker" " *," "std::allocator< statetracker * >" " >";
	  }
	};
      }
    
SWIGINTERN void vector_Sl_statetracker_Sm__Sg____setslice____SWIG_0(vector< statetracker * > *self,vector< statetracker * >::difference_type i,vector< statetracker * >::difference_type j,std::vector< statetracker *,std::allocator< statetracker * > > const &v=std::vector< statetracker *,std::allocator< statetracker * > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void vector_Sl_statetracker_Sm__Sg____delslice__(vector< statetracker * > *self,vector< statetracker * >::difference_type i,vector< statetracker * >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void vector_Sl_statetracker_Sm__Sg____delitem____SWIG_0(vector< statetracker * > *self,vector< statetracker * >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< statetracker *,std::allocator< statetracker * > > *vector_Sl_statetracker_Sm__Sg____getitem____SWIG_0(vector< statetracker * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<statetracker*,std::allocator< statetracker * > >::difference_type id = i;
      std::vector<statetracker*,std::allocator< statetracker * > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_statetracker_Sm__Sg____setitem____SWIG_0(vector< statetracker * > *self,PySliceObject *slice,std::vector< statetracker *,std::allocator< statetracker * > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<statetracker*,std::allocator< statetracker * > >::difference_type id = i;
      std::vector<statetracker*,std::allocator< statetracker * > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void vector_Sl_statetracker_Sm__Sg____setitem____SWIG_1(vector< statetracker * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<statetracker*,std::allocator< statetracker * > >::difference_type id = i;
      std::vector<statetracker*,std::allocator< statetracker * > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_statetracker_Sm__Sg____delitem____SWIG_1(vector< statetracker * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<statetracker*,std::allocator< statetracker * > >::difference_type id = i;
      std::vector<statetracker*,std::allocator< statetracker * > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN vector< statetracker * >::value_type vector_Sl_statetracker_Sm__Sg____getitem____SWIG_1(vector< statetracker * > *self,vector< statetracker * >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void vector_Sl_statetracker_Sm__Sg____setitem____SWIG_2(vector< statetracker * > *self,vector< statetracker * >::difference_type i,vector< statetracker * >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void vector_Sl_statetracker_Sm__Sg__append(vector< statetracker * > *self,vector< statetracker * >::value_type x){
      self->push_back(x);
    }
SWIGINTERN swig::SwigPyIterator *vector_Sl_constraint_Sm__Sg__iterator(vector< constraint * > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool vector_Sl_constraint_Sm__Sg____nonzero__(vector< constraint * > const *self){
      return !(self->empty());
    }
SWIGINTERN bool vector_Sl_constraint_Sm__Sg____bool__(vector< constraint * > const *self){
      return !(self->empty());
    }
SWIGINTERN vector< constraint * >::size_type vector_Sl_constraint_Sm__Sg____len__(vector< constraint * > const *self){
      return self->size();
    }
SWIGINTERN vector< constraint * >::value_type vector_Sl_constraint_Sm__Sg__pop(vector< constraint * > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<constraint*,std::allocator< constraint * > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< constraint *,std::allocator< constraint * > > *vector_Sl_constraint_Sm__Sg____getslice__(vector< constraint * > *self,vector< constraint * >::difference_type i,vector< constraint * >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }

  namespace swig {
    template <>  struct traits<constraint > {
      typedef pointer_category category;
      static const char* type_name() { return"constraint"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<constraint*, std::allocator< constraint * > > > {
	  typedef value_category category;
	  static const char* type_name() {
	    return "std::vector<" "constraint" " *," "std::allocator< constraint * >" " >";
	  }
	};
      }
    
SWIGINTERN void vector_Sl_constraint_Sm__Sg____setslice____SWIG_0(vector< constraint * > *self,vector< constraint * >::difference_type i,vector< constraint * >::difference_type j,std::vector< constraint *,std::allocator< constraint * > > const &v=std::vector< constraint *,std::allocator< constraint * > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void vector_Sl_constraint_Sm__Sg____delslice__(vector< constraint * > *self,vector< constraint * >::difference_type i,vector< constraint * >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void vector_Sl_constraint_Sm__Sg____delitem____SWIG_0(vector< constraint * > *self,vector< constraint * >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< constraint *,std::allocator< constraint * > > *vector_Sl_constraint_Sm__Sg____getitem____SWIG_0(vector< constraint * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<constraint*,std::allocator< constraint * > >::difference_type id = i;
      std::vector<constraint*,std::allocator< constraint * > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_constraint_Sm__Sg____setitem____SWIG_0(vector< constraint * > *self,PySliceObject *slice,std::vector< constraint *,std::allocator< constraint * > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<constraint*,std::allocator< constraint * > >::difference_type id = i;
      std::vector<constraint*,std::allocator< constraint * > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void vector_Sl_constraint_Sm__Sg____setitem____SWIG_1(vector< constraint * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<constraint*,std::allocator< constraint * > >::difference_type id = i;
      std::vector<constraint*,std::allocator< constraint * > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_constraint_Sm__Sg____delitem____SWIG_1(vector< constraint * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<constraint*,std::allocator< constraint * > >::difference_type id = i;
      std::vector<constraint*,std::allocator< constraint * > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN vector< constraint * >::value_type vector_Sl_constraint_Sm__Sg____getitem____SWIG_1(vector< constraint * > *self,vector< constraint * >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void vector_Sl_constraint_Sm__Sg____setitem____SWIG_2(vector< constraint * > *self,vector< constraint * >::difference_type i,vector< constraint * >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void vector_Sl_constraint_Sm__Sg__append(vector< constraint * > *self,vector< constraint * >::value_type x){
      self->push_back(x);
    }
SWIGINTERN swig::SwigPyIterator *vector_Sl_atomvecRK4_Sm__Sg__iterator(vector< atomvecRK4 * > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool vector_Sl_atomvecRK4_Sm__Sg____nonzero__(vector< atomvecRK4 * > const *self){
      return !(self->empty());
    }
SWIGINTERN bool vector_Sl_atomvecRK4_Sm__Sg____bool__(vector< atomvecRK4 * > const *self){
      return !(self->empty());
    }
SWIGINTERN vector< atomvecRK4 * >::size_type vector_Sl_atomvecRK4_Sm__Sg____len__(vector< atomvecRK4 * > const *self){
      return self->size();
    }
SWIGINTERN vector< atomvecRK4 * >::value_type vector_Sl_atomvecRK4_Sm__Sg__pop(vector< atomvecRK4 * > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< atomvecRK4 *,std::allocator< atomvecRK4 * > > *vector_Sl_atomvecRK4_Sm__Sg____getslice__(vector< atomvecRK4 * > *self,vector< atomvecRK4 * >::difference_type i,vector< atomvecRK4 * >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }

  namespace swig {
    template <>  struct traits<atomvecRK4 > {
      typedef pointer_category category;
      static const char* type_name() { return"atomvecRK4"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<atomvecRK4*, std::allocator< atomvecRK4 * > > > {
	  typedef value_category category;
	  static const char* type_name() {
	    return "std::vector<" "atomvecRK4" " *," "std::allocator< atomvecRK4 * >" " >";
	  }
	};
      }
    
SWIGINTERN void vector_Sl_atomvecRK4_Sm__Sg____setslice____SWIG_0(vector< atomvecRK4 * > *self,vector< atomvecRK4 * >::difference_type i,vector< atomvecRK4 * >::difference_type j,std::vector< atomvecRK4 *,std::allocator< atomvecRK4 * > > const &v=std::vector< atomvecRK4 *,std::allocator< atomvecRK4 * > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void vector_Sl_atomvecRK4_Sm__Sg____delslice__(vector< atomvecRK4 * > *self,vector< atomvecRK4 * >::difference_type i,vector< atomvecRK4 * >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void vector_Sl_atomvecRK4_Sm__Sg____delitem____SWIG_0(vector< atomvecRK4 * > *self,vector< atomvecRK4 * >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< atomvecRK4 *,std::allocator< atomvecRK4 * > > *vector_Sl_atomvecRK4_Sm__Sg____getitem____SWIG_0(vector< atomvecRK4 * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > >::difference_type id = i;
      std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_atomvecRK4_Sm__Sg____setitem____SWIG_0(vector< atomvecRK4 * > *self,PySliceObject *slice,std::vector< atomvecRK4 *,std::allocator< atomvecRK4 * > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > >::difference_type id = i;
      std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void vector_Sl_atomvecRK4_Sm__Sg____setitem____SWIG_1(vector< atomvecRK4 * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > >::difference_type id = i;
      std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_atomvecRK4_Sm__Sg____delitem____SWIG_1(vector< atomvecRK4 * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > >::difference_type id = i;
      std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN vector< atomvecRK4 * >::value_type vector_Sl_atomvecRK4_Sm__Sg____getitem____SWIG_1(vector< atomvecRK4 * > *self,vector< atomvecRK4 * >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void vector_Sl_atomvecRK4_Sm__Sg____setitem____SWIG_2(vector< atomvecRK4 * > *self,vector< atomvecRK4 * >::difference_type i,vector< atomvecRK4 * >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void vector_Sl_atomvecRK4_Sm__Sg__append(vector< atomvecRK4 * > *self,vector< atomvecRK4 * >::value_type x){
      self->push_back(x);
    }
SWIGINTERN swig::SwigPyIterator *vector_Sl_unsigned_SS_int_Sg__iterator(vector< unsigned int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool vector_Sl_unsigned_SS_int_Sg____nonzero__(vector< unsigned int > const *self){
      return !(self->empty());
    }
SWIGINTERN bool vector_Sl_unsigned_SS_int_Sg____bool__(vector< unsigned int > const *self){
      return !(self->empty());
    }
SWIGINTERN vector< unsigned int >::size_type vector_Sl_unsigned_SS_int_Sg____len__(vector< unsigned int > const *self){
      return self->size();
    }
SWIGINTERN vector< unsigned int >::value_type vector_Sl_unsigned_SS_int_Sg__pop(vector< unsigned int > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<unsigned int,std::allocator< unsigned int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< unsigned int,std::allocator< unsigned int > > *vector_Sl_unsigned_SS_int_Sg____getslice__(vector< unsigned int > *self,vector< unsigned int >::difference_type i,vector< unsigned int >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }

namespace swig {
  template <> struct traits<unsigned int > {
    typedef value_category category;
    static const char* type_name() { return"unsigned int"; }
  };  
  template <>  struct traits_asval<unsigned int > {   
    typedef unsigned int value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_unsigned_SS_int (obj, val);
    }
  };
  template <>  struct traits_from<unsigned int > {
    typedef unsigned int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_unsigned_SS_int  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<unsigned int, std::allocator< unsigned int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "unsigned int" "," "std::allocator< unsigned int >" " >";
	  }
	};
      }
    
SWIGINTERN void vector_Sl_unsigned_SS_int_Sg____setslice____SWIG_0(vector< unsigned int > *self,vector< unsigned int >::difference_type i,vector< unsigned int >::difference_type j,std::vector< unsigned int,std::allocator< unsigned int > > const &v=std::vector< unsigned int,std::allocator< unsigned int > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void vector_Sl_unsigned_SS_int_Sg____delslice__(vector< unsigned int > *self,vector< unsigned int >::difference_type i,vector< unsigned int >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void vector_Sl_unsigned_SS_int_Sg____delitem____SWIG_0(vector< unsigned int > *self,vector< unsigned int >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< unsigned int,std::allocator< unsigned int > > *vector_Sl_unsigned_SS_int_Sg____getitem____SWIG_0(vector< unsigned int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<unsigned int,std::allocator< unsigned int > >::difference_type id = i;
      std::vector<unsigned int,std::allocator< unsigned int > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_unsigned_SS_int_Sg____setitem____SWIG_0(vector< unsigned int > *self,PySliceObject *slice,std::vector< unsigned int,std::allocator< unsigned int > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<unsigned int,std::allocator< unsigned int > >::difference_type id = i;
      std::vector<unsigned int,std::allocator< unsigned int > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void vector_Sl_unsigned_SS_int_Sg____setitem____SWIG_1(vector< unsigned int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<unsigned int,std::allocator< unsigned int > >::difference_type id = i;
      std::vector<unsigned int,std::allocator< unsigned int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_unsigned_SS_int_Sg____delitem____SWIG_1(vector< unsigned int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<unsigned int,std::allocator< unsigned int > >::difference_type id = i;
      std::vector<unsigned int,std::allocator< unsigned int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN vector< unsigned int >::value_type const &vector_Sl_unsigned_SS_int_Sg____getitem____SWIG_1(vector< unsigned int > const *self,vector< unsigned int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void vector_Sl_unsigned_SS_int_Sg____setitem____SWIG_2(vector< unsigned int > *self,vector< unsigned int >::difference_type i,vector< unsigned int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void vector_Sl_unsigned_SS_int_Sg__append(vector< unsigned int > *self,vector< unsigned int >::value_type const &x){
      self->push_back(x);
    }

SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}

SWIGINTERN idpair neighborlist___getitem__(neighborlist *self,size_t i){
    if (i >= self->numpairs()) {
      myErr = 1;
      return idpair(NULL, NULL);
    }
    return self->get(i);
  }

SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new__Nvector3__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,3 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new__Nvector3")) SWIG_fail;
  result = (Nvector< double,3 > *)new Nvector< double,3 >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NvectorT_double_3_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__Nvector3__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,3 > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Nvector< double,3 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__Nvector3",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_NvectorT_double_3_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__Nvector3" "', argument " "1"" of type '" "Nvector< double,3 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__Nvector3" "', argument " "1"" of type '" "Nvector< double,3 > const &""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,3 > * >(argp1);
  result = (Nvector< double,3 > *)new Nvector< double,3 >((Nvector< double,3 > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NvectorT_double_3_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__Nvector3__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Nvector< double,3 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__Nvector3",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__Nvector3" "', argument " "1"" of type '" "double const [3]""'"); 
  } 
  arg1 = reinterpret_cast< double * >(argp1);
  result = (Nvector< double,3 > *)new Nvector< double,3 >((double const (*))arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NvectorT_double_3_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__Nvector3(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new__Nvector3__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_NvectorT_double_3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new__Nvector3__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new__Nvector3__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new__Nvector3'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Nvector< double,3 >::Nvector()\n"
    "    Nvector< double,3 >::Nvector(Nvector< double,3 > const &)\n"
    "    Nvector< double,3 >::Nvector(double const [3])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Nvector3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,3 > *arg1 = (Nvector< double,3 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Nvector3_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector3_get" "', argument " "1"" of type '" "Nvector< double,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,3 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Nvector3_get" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double *) &((Nvector< double,3 > const *)arg1)->get(arg2);
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,3 > *arg1 = (Nvector< double,3 > *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_Nvector3_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector3_set" "', argument " "1"" of type '" "Nvector< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,3 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Nvector3_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Nvector3_set" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->set(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector3_len(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,3 > *arg1 = (Nvector< double,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Nvector3_len",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector3_len" "', argument " "1"" of type '" "Nvector< double,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,3 > * >(argp1);
  result = (unsigned int)((Nvector< double,3 > const *)arg1)->len();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector3___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,3 > *arg1 = (Nvector< double,3 > *) 0 ;
  Nvector< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Nvector< double,3 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Nvector3___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector3___iadd__" "', argument " "1"" of type '" "Nvector< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,3 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NvectorT_double_3_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Nvector3___iadd__" "', argument " "2"" of type '" "Nvector< double,3 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Nvector3___iadd__" "', argument " "2"" of type '" "Nvector< double,3 > const &""'"); 
  }
  arg2 = reinterpret_cast< Nvector< double,3 > * >(argp2);
  result = (Nvector< double,3 > *) &(arg1)->operator +=((Nvector< double,3 > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NvectorT_double_3_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector3___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,3 > *arg1 = (Nvector< double,3 > *) 0 ;
  Nvector< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Nvector< double,3 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Nvector3___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector3___isub__" "', argument " "1"" of type '" "Nvector< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,3 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NvectorT_double_3_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Nvector3___isub__" "', argument " "2"" of type '" "Nvector< double,3 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Nvector3___isub__" "', argument " "2"" of type '" "Nvector< double,3 > const &""'"); 
  }
  arg2 = reinterpret_cast< Nvector< double,3 > * >(argp2);
  result = (Nvector< double,3 > *) &(arg1)->operator -=((Nvector< double,3 > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NvectorT_double_3_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector3___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,3 > *arg1 = (Nvector< double,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Nvector< double,3 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Nvector3___neg__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector3___neg__" "', argument " "1"" of type '" "Nvector< double,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,3 > * >(argp1);
  result = ((Nvector< double,3 > const *)arg1)->operator -();
  resultobj = SWIG_NewPointerObj((new Nvector< double,3 >(static_cast< const Nvector< double,3 >& >(result))), SWIGTYPE_p_NvectorT_double_3_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector3___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,3 > *arg1 = (Nvector< double,3 > *) 0 ;
  Nvector< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Nvector< double,3 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Nvector3___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector3___add__" "', argument " "1"" of type '" "Nvector< double,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,3 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NvectorT_double_3_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Nvector3___add__" "', argument " "2"" of type '" "Nvector< double,3 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Nvector3___add__" "', argument " "2"" of type '" "Nvector< double,3 > const &""'"); 
  }
  arg2 = reinterpret_cast< Nvector< double,3 > * >(argp2);
  result = ((Nvector< double,3 > const *)arg1)->operator +((Nvector< double,3 > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Nvector< double,3 >(static_cast< const Nvector< double,3 >& >(result))), SWIGTYPE_p_NvectorT_double_3_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector3___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,3 > *arg1 = (Nvector< double,3 > *) 0 ;
  Nvector< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Nvector< double,3 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Nvector3___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector3___sub__" "', argument " "1"" of type '" "Nvector< double,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,3 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NvectorT_double_3_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Nvector3___sub__" "', argument " "2"" of type '" "Nvector< double,3 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Nvector3___sub__" "', argument " "2"" of type '" "Nvector< double,3 > const &""'"); 
  }
  arg2 = reinterpret_cast< Nvector< double,3 > * >(argp2);
  result = ((Nvector< double,3 > const *)arg1)->operator -((Nvector< double,3 > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Nvector< double,3 >(static_cast< const Nvector< double,3 >& >(result))), SWIGTYPE_p_NvectorT_double_3_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector3_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,3 > *arg1 = (Nvector< double,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Nvector3_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector3_begin" "', argument " "1"" of type '" "Nvector< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,3 > * >(argp1);
  result = (double *)(arg1)->begin();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector3_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,3 > *arg1 = (Nvector< double,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Nvector3_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector3_end" "', argument " "1"" of type '" "Nvector< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,3 > * >(argp1);
  result = (double *)(arg1)->end();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete__Nvector3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,3 > *arg1 = (Nvector< double,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete__Nvector3",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete__Nvector3" "', argument " "1"" of type '" "Nvector< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,3 > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector3___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,3 > *arg1 = (Nvector< double,3 > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Nvector< double,3 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Nvector3___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector3___mul__" "', argument " "1"" of type '" "Nvector< double,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,3 > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Nvector3___mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((Nvector< double,3 > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR operator *(arg2);
  resultobj = SWIG_NewPointerObj((new Nvector< double,3 >(static_cast< const Nvector< double,3 >& >(result))), SWIGTYPE_p_NvectorT_double_3_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector3___div__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,3 > *arg1 = (Nvector< double,3 > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Nvector< double,3 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Nvector3___div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector3___div__" "', argument " "1"" of type '" "Nvector< double,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,3 > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Nvector3___div__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((Nvector< double,3 > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR operator /(arg2);
  resultobj = SWIG_NewPointerObj((new Nvector< double,3 >(static_cast< const Nvector< double,3 >& >(result))), SWIGTYPE_p_NvectorT_double_3_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector3___truediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,3 > *arg1 = (Nvector< double,3 > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Nvector< double,3 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Nvector3___truediv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector3___truediv__" "', argument " "1"" of type '" "Nvector< double,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,3 > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Nvector3___truediv__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = Nvector_Sl_double_Sc_3_Sg____truediv__((Nvector< double,3 > const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Nvector< double,3 >(static_cast< const Nvector< double,3 >& >(result))), SWIGTYPE_p_NvectorT_double_3_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector3___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,3 > *arg1 = (Nvector< double,3 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Nvector3___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector3___getitem__" "', argument " "1"" of type '" "Nvector< double,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,3 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Nvector3___getitem__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double)Nvector_Sl_double_Sc_3_Sg____getitem__((Nvector< double,3 > const *)arg1,arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector3___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,3 > *arg1 = (Nvector< double,3 > *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_Nvector3___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector3___setitem__" "', argument " "1"" of type '" "Nvector< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,3 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Nvector3___setitem__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Nvector3___setitem__" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  Nvector_Sl_double_Sc_3_Sg____setitem__(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector3___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,3 > *arg1 = (Nvector< double,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Nvector3___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector3___len__" "', argument " "1"" of type '" "Nvector< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,3 > * >(argp1);
  result = (unsigned int)Nvector_Sl_double_Sc_3_Sg____len__(arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_Nvector3_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NvectorT_double_3_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new__Nvector2__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,2 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new__Nvector2")) SWIG_fail;
  result = (Nvector< double,2 > *)new Nvector< double,2 >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NvectorT_double_2_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__Nvector2__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,2 > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Nvector< double,2 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__Nvector2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_NvectorT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__Nvector2" "', argument " "1"" of type '" "Nvector< double,2 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__Nvector2" "', argument " "1"" of type '" "Nvector< double,2 > const &""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,2 > * >(argp1);
  result = (Nvector< double,2 > *)new Nvector< double,2 >((Nvector< double,2 > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NvectorT_double_2_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__Nvector2__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Nvector< double,2 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__Nvector2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__Nvector2" "', argument " "1"" of type '" "double const [2]""'"); 
  } 
  arg1 = reinterpret_cast< double * >(argp1);
  result = (Nvector< double,2 > *)new Nvector< double,2 >((double const (*))arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NvectorT_double_2_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__Nvector2(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new__Nvector2__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_NvectorT_double_2_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new__Nvector2__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new__Nvector2__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new__Nvector2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Nvector< double,2 >::Nvector()\n"
    "    Nvector< double,2 >::Nvector(Nvector< double,2 > const &)\n"
    "    Nvector< double,2 >::Nvector(double const [2])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Nvector2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,2 > *arg1 = (Nvector< double,2 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Nvector2_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector2_get" "', argument " "1"" of type '" "Nvector< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,2 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Nvector2_get" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double *) &((Nvector< double,2 > const *)arg1)->get(arg2);
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,2 > *arg1 = (Nvector< double,2 > *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_Nvector2_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector2_set" "', argument " "1"" of type '" "Nvector< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,2 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Nvector2_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Nvector2_set" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->set(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector2_len(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,2 > *arg1 = (Nvector< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Nvector2_len",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector2_len" "', argument " "1"" of type '" "Nvector< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,2 > * >(argp1);
  result = (unsigned int)((Nvector< double,2 > const *)arg1)->len();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector2___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,2 > *arg1 = (Nvector< double,2 > *) 0 ;
  Nvector< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Nvector< double,2 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Nvector2___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_2_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector2___iadd__" "', argument " "1"" of type '" "Nvector< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,2 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NvectorT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Nvector2___iadd__" "', argument " "2"" of type '" "Nvector< double,2 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Nvector2___iadd__" "', argument " "2"" of type '" "Nvector< double,2 > const &""'"); 
  }
  arg2 = reinterpret_cast< Nvector< double,2 > * >(argp2);
  result = (Nvector< double,2 > *) &(arg1)->operator +=((Nvector< double,2 > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NvectorT_double_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector2___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,2 > *arg1 = (Nvector< double,2 > *) 0 ;
  Nvector< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Nvector< double,2 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Nvector2___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_2_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector2___isub__" "', argument " "1"" of type '" "Nvector< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,2 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NvectorT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Nvector2___isub__" "', argument " "2"" of type '" "Nvector< double,2 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Nvector2___isub__" "', argument " "2"" of type '" "Nvector< double,2 > const &""'"); 
  }
  arg2 = reinterpret_cast< Nvector< double,2 > * >(argp2);
  result = (Nvector< double,2 > *) &(arg1)->operator -=((Nvector< double,2 > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NvectorT_double_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector2___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,2 > *arg1 = (Nvector< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Nvector< double,2 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Nvector2___neg__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector2___neg__" "', argument " "1"" of type '" "Nvector< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,2 > * >(argp1);
  result = ((Nvector< double,2 > const *)arg1)->operator -();
  resultobj = SWIG_NewPointerObj((new Nvector< double,2 >(static_cast< const Nvector< double,2 >& >(result))), SWIGTYPE_p_NvectorT_double_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector2___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,2 > *arg1 = (Nvector< double,2 > *) 0 ;
  Nvector< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Nvector< double,2 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Nvector2___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector2___add__" "', argument " "1"" of type '" "Nvector< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,2 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NvectorT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Nvector2___add__" "', argument " "2"" of type '" "Nvector< double,2 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Nvector2___add__" "', argument " "2"" of type '" "Nvector< double,2 > const &""'"); 
  }
  arg2 = reinterpret_cast< Nvector< double,2 > * >(argp2);
  result = ((Nvector< double,2 > const *)arg1)->operator +((Nvector< double,2 > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Nvector< double,2 >(static_cast< const Nvector< double,2 >& >(result))), SWIGTYPE_p_NvectorT_double_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector2___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,2 > *arg1 = (Nvector< double,2 > *) 0 ;
  Nvector< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Nvector< double,2 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Nvector2___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector2___sub__" "', argument " "1"" of type '" "Nvector< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,2 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NvectorT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Nvector2___sub__" "', argument " "2"" of type '" "Nvector< double,2 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Nvector2___sub__" "', argument " "2"" of type '" "Nvector< double,2 > const &""'"); 
  }
  arg2 = reinterpret_cast< Nvector< double,2 > * >(argp2);
  result = ((Nvector< double,2 > const *)arg1)->operator -((Nvector< double,2 > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Nvector< double,2 >(static_cast< const Nvector< double,2 >& >(result))), SWIGTYPE_p_NvectorT_double_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector2_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,2 > *arg1 = (Nvector< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Nvector2_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector2_begin" "', argument " "1"" of type '" "Nvector< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,2 > * >(argp1);
  result = (double *)(arg1)->begin();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector2_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,2 > *arg1 = (Nvector< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Nvector2_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector2_end" "', argument " "1"" of type '" "Nvector< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,2 > * >(argp1);
  result = (double *)(arg1)->end();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete__Nvector2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,2 > *arg1 = (Nvector< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete__Nvector2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_2_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete__Nvector2" "', argument " "1"" of type '" "Nvector< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,2 > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector2___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,2 > *arg1 = (Nvector< double,2 > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Nvector< double,2 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Nvector2___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector2___mul__" "', argument " "1"" of type '" "Nvector< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,2 > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Nvector2___mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((Nvector< double,2 > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR operator *(arg2);
  resultobj = SWIG_NewPointerObj((new Nvector< double,2 >(static_cast< const Nvector< double,2 >& >(result))), SWIGTYPE_p_NvectorT_double_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector2___div__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,2 > *arg1 = (Nvector< double,2 > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Nvector< double,2 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Nvector2___div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector2___div__" "', argument " "1"" of type '" "Nvector< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,2 > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Nvector2___div__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((Nvector< double,2 > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR operator /(arg2);
  resultobj = SWIG_NewPointerObj((new Nvector< double,2 >(static_cast< const Nvector< double,2 >& >(result))), SWIGTYPE_p_NvectorT_double_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector2___truediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,2 > *arg1 = (Nvector< double,2 > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Nvector< double,2 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Nvector2___truediv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector2___truediv__" "', argument " "1"" of type '" "Nvector< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,2 > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Nvector2___truediv__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = Nvector_Sl_double_Sc_2_Sg____truediv__((Nvector< double,2 > const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Nvector< double,2 >(static_cast< const Nvector< double,2 >& >(result))), SWIGTYPE_p_NvectorT_double_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector2___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,2 > *arg1 = (Nvector< double,2 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Nvector2___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector2___getitem__" "', argument " "1"" of type '" "Nvector< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,2 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Nvector2___getitem__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double)Nvector_Sl_double_Sc_2_Sg____getitem__((Nvector< double,2 > const *)arg1,arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector2___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,2 > *arg1 = (Nvector< double,2 > *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_Nvector2___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector2___setitem__" "', argument " "1"" of type '" "Nvector< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,2 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Nvector2___setitem__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Nvector2___setitem__" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  Nvector_Sl_double_Sc_2_Sg____setitem__(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Nvector2___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,2 > *arg1 = (Nvector< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Nvector2___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Nvector2___len__" "', argument " "1"" of type '" "Nvector< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,2 > * >(argp1);
  result = (unsigned int)Nvector_Sl_double_Sc_2_Sg____len__(arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_Nvector2_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NvectorT_double_2_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new__Numvector3__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,3 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new__Numvector3")) SWIG_fail;
  result = (Numvector< double,3 > *)new Numvector< double,3 >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NumvectorT_double_3_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__Numvector3__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,3 > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Numvector< double,3 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__Numvector3",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_NvectorT_double_3_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__Numvector3" "', argument " "1"" of type '" "Nvector< double,3 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__Numvector3" "', argument " "1"" of type '" "Nvector< double,3 > const &""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,3 > * >(argp1);
  result = (Numvector< double,3 > *)new Numvector< double,3 >((Nvector< double,3 > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NumvectorT_double_3_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__Numvector3__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Numvector< double,3 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__Numvector3",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__Numvector3" "', argument " "1"" of type '" "double const [3]""'"); 
  } 
  arg1 = reinterpret_cast< double * >(argp1);
  result = (Numvector< double,3 > *)new Numvector< double,3 >((double const (*))arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NumvectorT_double_3_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__Numvector3(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new__Numvector3__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_NvectorT_double_3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new__Numvector3__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new__Numvector3__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new__Numvector3'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Numvector< double,3 >::Numvector()\n"
    "    Numvector< double,3 >::Numvector(Nvector< double,3 > const &)\n"
    "    Numvector< double,3 >::Numvector(double const [3])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Numvector3_dot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,3 > *arg1 = (Numvector< double,3 > *) 0 ;
  Numvector< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Numvector3_dot",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumvectorT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Numvector3_dot" "', argument " "1"" of type '" "Numvector< double,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< Numvector< double,3 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NumvectorT_double_3_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Numvector3_dot" "', argument " "2"" of type '" "Numvector< double,3 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Numvector3_dot" "', argument " "2"" of type '" "Numvector< double,3 > const &""'"); 
  }
  arg2 = reinterpret_cast< Numvector< double,3 > * >(argp2);
  result = (double)((Numvector< double,3 > const *)arg1)->dot((Numvector< double,3 > const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Numvector3_sq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,3 > *arg1 = (Numvector< double,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Numvector3_sq",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumvectorT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Numvector3_sq" "', argument " "1"" of type '" "Numvector< double,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< Numvector< double,3 > * >(argp1);
  result = (double)((Numvector< double,3 > const *)arg1)->sq();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Numvector3_mag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,3 > *arg1 = (Numvector< double,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Numvector3_mag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumvectorT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Numvector3_mag" "', argument " "1"" of type '" "Numvector< double,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< Numvector< double,3 > * >(argp1);
  result = (double)((Numvector< double,3 > const *)arg1)->mag();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Numvector3_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,3 > *arg1 = (Numvector< double,3 > *) 0 ;
  Numvector< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Numvector3_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumvectorT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Numvector3_distance" "', argument " "1"" of type '" "Numvector< double,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< Numvector< double,3 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NumvectorT_double_3_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Numvector3_distance" "', argument " "2"" of type '" "Numvector< double,3 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Numvector3_distance" "', argument " "2"" of type '" "Numvector< double,3 > const &""'"); 
  }
  arg2 = reinterpret_cast< Numvector< double,3 > * >(argp2);
  result = (double)((Numvector< double,3 > const *)arg1)->distance((Numvector< double,3 > const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Numvector3_perpto(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,3 > *arg1 = (Numvector< double,3 > *) 0 ;
  Numvector< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Numvector< double,3 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Numvector3_perpto",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumvectorT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Numvector3_perpto" "', argument " "1"" of type '" "Numvector< double,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< Numvector< double,3 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NumvectorT_double_3_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Numvector3_perpto" "', argument " "2"" of type '" "Numvector< double,3 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Numvector3_perpto" "', argument " "2"" of type '" "Numvector< double,3 > const &""'"); 
  }
  arg2 = reinterpret_cast< Numvector< double,3 > * >(argp2);
  result = ((Numvector< double,3 > const *)arg1)->perpto((Numvector< double,3 > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Numvector< double,3 >(static_cast< const Numvector< double,3 >& >(result))), SWIGTYPE_p_NumvectorT_double_3_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Numvector3_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,3 > *arg1 = (Numvector< double,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Numvector3_normalize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumvectorT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Numvector3_normalize" "', argument " "1"" of type '" "Numvector< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< Numvector< double,3 > * >(argp1);
  (arg1)->normalize();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Numvector3_norm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,3 > *arg1 = (Numvector< double,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Numvector< double,3 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Numvector3_norm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumvectorT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Numvector3_norm" "', argument " "1"" of type '" "Numvector< double,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< Numvector< double,3 > * >(argp1);
  result = ((Numvector< double,3 > const *)arg1)->norm();
  resultobj = SWIG_NewPointerObj((new Numvector< double,3 >(static_cast< const Numvector< double,3 >& >(result))), SWIGTYPE_p_NumvectorT_double_3_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete__Numvector3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,3 > *arg1 = (Numvector< double,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete__Numvector3",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumvectorT_double_3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete__Numvector3" "', argument " "1"" of type '" "Numvector< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< Numvector< double,3 > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_Numvector3_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NumvectorT_double_3_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new__Numvector2__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,2 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new__Numvector2")) SWIG_fail;
  result = (Numvector< double,2 > *)new Numvector< double,2 >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NumvectorT_double_2_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__Numvector2__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,2 > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Numvector< double,2 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__Numvector2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_NvectorT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__Numvector2" "', argument " "1"" of type '" "Nvector< double,2 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__Numvector2" "', argument " "1"" of type '" "Nvector< double,2 > const &""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,2 > * >(argp1);
  result = (Numvector< double,2 > *)new Numvector< double,2 >((Nvector< double,2 > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NumvectorT_double_2_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__Numvector2__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Numvector< double,2 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__Numvector2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__Numvector2" "', argument " "1"" of type '" "double const [2]""'"); 
  } 
  arg1 = reinterpret_cast< double * >(argp1);
  result = (Numvector< double,2 > *)new Numvector< double,2 >((double const (*))arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NumvectorT_double_2_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__Numvector2(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new__Numvector2__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_NvectorT_double_2_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new__Numvector2__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new__Numvector2__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new__Numvector2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Numvector< double,2 >::Numvector()\n"
    "    Numvector< double,2 >::Numvector(Nvector< double,2 > const &)\n"
    "    Numvector< double,2 >::Numvector(double const [2])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Numvector2_dot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,2 > *arg1 = (Numvector< double,2 > *) 0 ;
  Numvector< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Numvector2_dot",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Numvector2_dot" "', argument " "1"" of type '" "Numvector< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Numvector< double,2 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NumvectorT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Numvector2_dot" "', argument " "2"" of type '" "Numvector< double,2 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Numvector2_dot" "', argument " "2"" of type '" "Numvector< double,2 > const &""'"); 
  }
  arg2 = reinterpret_cast< Numvector< double,2 > * >(argp2);
  result = (double)((Numvector< double,2 > const *)arg1)->dot((Numvector< double,2 > const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Numvector2_sq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,2 > *arg1 = (Numvector< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Numvector2_sq",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Numvector2_sq" "', argument " "1"" of type '" "Numvector< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Numvector< double,2 > * >(argp1);
  result = (double)((Numvector< double,2 > const *)arg1)->sq();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Numvector2_mag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,2 > *arg1 = (Numvector< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Numvector2_mag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Numvector2_mag" "', argument " "1"" of type '" "Numvector< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Numvector< double,2 > * >(argp1);
  result = (double)((Numvector< double,2 > const *)arg1)->mag();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Numvector2_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,2 > *arg1 = (Numvector< double,2 > *) 0 ;
  Numvector< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Numvector2_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Numvector2_distance" "', argument " "1"" of type '" "Numvector< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Numvector< double,2 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NumvectorT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Numvector2_distance" "', argument " "2"" of type '" "Numvector< double,2 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Numvector2_distance" "', argument " "2"" of type '" "Numvector< double,2 > const &""'"); 
  }
  arg2 = reinterpret_cast< Numvector< double,2 > * >(argp2);
  result = (double)((Numvector< double,2 > const *)arg1)->distance((Numvector< double,2 > const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Numvector2_perpto(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,2 > *arg1 = (Numvector< double,2 > *) 0 ;
  Numvector< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Numvector< double,2 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Numvector2_perpto",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Numvector2_perpto" "', argument " "1"" of type '" "Numvector< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Numvector< double,2 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NumvectorT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Numvector2_perpto" "', argument " "2"" of type '" "Numvector< double,2 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Numvector2_perpto" "', argument " "2"" of type '" "Numvector< double,2 > const &""'"); 
  }
  arg2 = reinterpret_cast< Numvector< double,2 > * >(argp2);
  result = ((Numvector< double,2 > const *)arg1)->perpto((Numvector< double,2 > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Numvector< double,2 >(static_cast< const Numvector< double,2 >& >(result))), SWIGTYPE_p_NumvectorT_double_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Numvector2_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,2 > *arg1 = (Numvector< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Numvector2_normalize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Numvector2_normalize" "', argument " "1"" of type '" "Numvector< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< Numvector< double,2 > * >(argp1);
  (arg1)->normalize();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Numvector2_norm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,2 > *arg1 = (Numvector< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Numvector< double,2 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Numvector2_norm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Numvector2_norm" "', argument " "1"" of type '" "Numvector< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Numvector< double,2 > * >(argp1);
  result = ((Numvector< double,2 > const *)arg1)->norm();
  resultobj = SWIG_NewPointerObj((new Numvector< double,2 >(static_cast< const Numvector< double,2 >& >(result))), SWIGTYPE_p_NumvectorT_double_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete__Numvector2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,2 > *arg1 = (Numvector< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete__Numvector2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumvectorT_double_2_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete__Numvector2" "', argument " "1"" of type '" "Numvector< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< Numvector< double,2 > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_Numvector2_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NumvectorT_double_2_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Vec__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Vec")) SWIG_fail;
  result = (Vector2< double > *)new Vector2< double >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vector2< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Vec",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vec" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vec" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (Vector2< double > *)new Vector2< double >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,2 > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vector2< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vec",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_NumvectorT_double_2_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vec" "', argument " "1"" of type '" "Numvector< double,2 > const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vec" "', argument " "1"" of type '" "Numvector< double,2 > const""'");
    } else {
      Numvector< double,2 > * temp = reinterpret_cast< Numvector< double,2 > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (Vector2< double > *)new Vector2< double >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,2 > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vector2< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vec",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_NvectorT_double_2_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vec" "', argument " "1"" of type '" "Nvector< double,2 > const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vec" "', argument " "1"" of type '" "Nvector< double,2 > const""'");
    } else {
      Nvector< double,2 > * temp = reinterpret_cast< Nvector< double,2 > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (Vector2< double > *)new Vector2< double >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Vec__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_NumvectorT_double_2_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vec__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_NvectorT_double_2_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vec__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Vec__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Vec'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Vector2< double >::Vector2()\n"
    "    Vector2< double >::Vector2(double const,double const)\n"
    "    Vector2< double >::Vector2(Numvector< double,2 > const)\n"
    "    Vector2< double >::Vector2(Nvector< double,2 > const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Vec_getx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *arg1 = (Vector2< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec_getx",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec_getx" "', argument " "1"" of type '" "Vector2< double > const *""'"); 
  }
  arg1 = reinterpret_cast< Vector2< double > * >(argp1);
  result = (double)((Vector2< double > const *)arg1)->getx();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec_gety(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *arg1 = (Vector2< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec_gety",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec_gety" "', argument " "1"" of type '" "Vector2< double > const *""'"); 
  }
  arg1 = reinterpret_cast< Vector2< double > * >(argp1);
  result = (double)((Vector2< double > const *)arg1)->gety();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec_setx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *arg1 = (Vector2< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec_setx",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec_setx" "', argument " "1"" of type '" "Vector2< double > *""'"); 
  }
  arg1 = reinterpret_cast< Vector2< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec_setx" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->setx(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec_sety(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *arg1 = (Vector2< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec_sety",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec_sety" "', argument " "1"" of type '" "Vector2< double > *""'"); 
  }
  arg1 = reinterpret_cast< Vector2< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec_sety" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->sety(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *arg1 = (Vector2< double > *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vec_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec_set" "', argument " "1"" of type '" "Vector2< double > *""'"); 
  }
  arg1 = reinterpret_cast< Vector2< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vec_set" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->set(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *arg1 = (Vector2< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vector2< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec___neg__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec___neg__" "', argument " "1"" of type '" "Vector2< double > const *""'"); 
  }
  arg1 = reinterpret_cast< Vector2< double > * >(argp1);
  result = ((Vector2< double > const *)arg1)->operator -();
  resultobj = SWIG_NewPointerObj((new Vector2< double >(static_cast< const Vector2< double >& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *arg1 = (Vector2< double > *) 0 ;
  Vector2< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vector2< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec___add__" "', argument " "1"" of type '" "Vector2< double > const *""'"); 
  }
  arg1 = reinterpret_cast< Vector2< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec___add__" "', argument " "2"" of type '" "Vector2< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec___add__" "', argument " "2"" of type '" "Vector2< double > const &""'"); 
  }
  arg2 = reinterpret_cast< Vector2< double > * >(argp2);
  result = ((Vector2< double > const *)arg1)->operator +((Vector2< double > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vector2< double >(static_cast< const Vector2< double >& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *arg1 = (Vector2< double > *) 0 ;
  Vector2< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vector2< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec___sub__" "', argument " "1"" of type '" "Vector2< double > const *""'"); 
  }
  arg1 = reinterpret_cast< Vector2< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec___sub__" "', argument " "2"" of type '" "Vector2< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec___sub__" "', argument " "2"" of type '" "Vector2< double > const &""'"); 
  }
  arg2 = reinterpret_cast< Vector2< double > * >(argp2);
  result = ((Vector2< double > const *)arg1)->operator -((Vector2< double > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vector2< double >(static_cast< const Vector2< double >& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *arg1 = (Vector2< double > *) 0 ;
  Vector2< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec___mul__" "', argument " "1"" of type '" "Vector2< double > const *""'"); 
  }
  arg1 = reinterpret_cast< Vector2< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec___mul__" "', argument " "2"" of type '" "Vector2< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec___mul__" "', argument " "2"" of type '" "Vector2< double > const &""'"); 
  }
  arg2 = reinterpret_cast< Vector2< double > * >(argp2);
  result = (double)((Vector2< double > const *)arg1)->operator *((Vector2< double > const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec_cross(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *arg1 = (Vector2< double > *) 0 ;
  Vector2< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec_cross",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec_cross" "', argument " "1"" of type '" "Vector2< double > const *""'"); 
  }
  arg1 = reinterpret_cast< Vector2< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec_cross" "', argument " "2"" of type '" "Vector2< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec_cross" "', argument " "2"" of type '" "Vector2< double > const &""'"); 
  }
  arg2 = reinterpret_cast< Vector2< double > * >(argp2);
  result = (double)((Vector2< double > const *)arg1)->cross((Vector2< double > const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec_perp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *arg1 = (Vector2< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vector2< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec_perp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec_perp" "', argument " "1"" of type '" "Vector2< double > const *""'"); 
  }
  arg1 = reinterpret_cast< Vector2< double > * >(argp1);
  result = ((Vector2< double > const *)arg1)->perp();
  resultobj = SWIG_NewPointerObj((new Vector2< double >(static_cast< const Vector2< double >& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec_norm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *arg1 = (Vector2< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vector2< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec_norm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec_norm" "', argument " "1"" of type '" "Vector2< double > const *""'"); 
  }
  arg1 = reinterpret_cast< Vector2< double > * >(argp1);
  result = ((Vector2< double > const *)arg1)->norm();
  resultobj = SWIG_NewPointerObj((new Vector2< double >(static_cast< const Vector2< double >& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *arg1 = (Vector2< double > *) 0 ;
  Vector2< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vector2< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec___isub__" "', argument " "1"" of type '" "Vector2< double > *""'"); 
  }
  arg1 = reinterpret_cast< Vector2< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec___isub__" "', argument " "2"" of type '" "Vector2< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec___isub__" "', argument " "2"" of type '" "Vector2< double > const &""'"); 
  }
  arg2 = reinterpret_cast< Vector2< double > * >(argp2);
  result = (Vector2< double > *) &(arg1)->operator -=((Vector2< double > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *arg1 = (Vector2< double > *) 0 ;
  Vector2< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vector2< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec___iadd__" "', argument " "1"" of type '" "Vector2< double > *""'"); 
  }
  arg1 = reinterpret_cast< Vector2< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec___iadd__" "', argument " "2"" of type '" "Vector2< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec___iadd__" "', argument " "2"" of type '" "Vector2< double > const &""'"); 
  }
  arg2 = reinterpret_cast< Vector2< double > * >(argp2);
  result = (Vector2< double > *) &(arg1)->operator +=((Vector2< double > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec_rotate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *arg1 = (Vector2< double > *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vector2< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec_rotate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec_rotate" "', argument " "1"" of type '" "Vector2< double > *""'"); 
  }
  arg1 = reinterpret_cast< Vector2< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec_rotate" "', argument " "2"" of type '" "uint""'");
  } 
  arg2 = static_cast< uint >(val2);
  result = (arg1)->rotate(arg2);
  resultobj = SWIG_NewPointerObj((new Vector2< double >(static_cast< const Vector2< double >& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec_flip(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *arg1 = (Vector2< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vector2< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec_flip",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec_flip" "', argument " "1"" of type '" "Vector2< double > *""'"); 
  }
  arg1 = reinterpret_cast< Vector2< double > * >(argp1);
  result = (arg1)->flip();
  resultobj = SWIG_NewPointerObj((new Vector2< double >(static_cast< const Vector2< double >& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec_rotate_flip(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *arg1 = (Vector2< double > *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vector2< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec_rotate_flip",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec_rotate_flip" "', argument " "1"" of type '" "Vector2< double > *""'"); 
  }
  arg1 = reinterpret_cast< Vector2< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec_rotate_flip" "', argument " "2"" of type '" "uint""'");
  } 
  arg2 = static_cast< uint >(val2);
  result = (arg1)->rotate_flip(arg2);
  resultobj = SWIG_NewPointerObj((new Vector2< double >(static_cast< const Vector2< double >& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec_rotate_flip_inv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *arg1 = (Vector2< double > *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vector2< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec_rotate_flip_inv",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec_rotate_flip_inv" "', argument " "1"" of type '" "Vector2< double > *""'"); 
  }
  arg1 = reinterpret_cast< Vector2< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec_rotate_flip_inv" "', argument " "2"" of type '" "uint""'");
  } 
  arg2 = static_cast< uint >(val2);
  result = (arg1)->rotate_flip_inv(arg2);
  resultobj = SWIG_NewPointerObj((new Vector2< double >(static_cast< const Vector2< double >& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec_angle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *arg1 = 0 ;
  Vector2< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec_angle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec_angle" "', argument " "1"" of type '" "Vector2< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec_angle" "', argument " "1"" of type '" "Vector2< double > const &""'"); 
  }
  arg1 = reinterpret_cast< Vector2< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec_angle" "', argument " "2"" of type '" "Vector2< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec_angle" "', argument " "2"" of type '" "Vector2< double > const &""'"); 
  }
  arg2 = reinterpret_cast< Vector2< double > * >(argp2);
  result = (double)Vector2< double >::SWIGTEMPLATEDISAMBIGUATOR angle((Vector2< double > const &)*arg1,(Vector2< double > const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec_angle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *arg1 = 0 ;
  Vector2< double > *arg2 = 0 ;
  Vector2< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vec_angle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec_angle" "', argument " "1"" of type '" "Vector2< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec_angle" "', argument " "1"" of type '" "Vector2< double > const &""'"); 
  }
  arg1 = reinterpret_cast< Vector2< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec_angle" "', argument " "2"" of type '" "Vector2< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec_angle" "', argument " "2"" of type '" "Vector2< double > const &""'"); 
  }
  arg2 = reinterpret_cast< Vector2< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Vec_angle" "', argument " "3"" of type '" "Vector2< double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec_angle" "', argument " "3"" of type '" "Vector2< double > const &""'"); 
  }
  arg3 = reinterpret_cast< Vector2< double > * >(argp3);
  result = (double)Vector2< double >::SWIGTEMPLATEDISAMBIGUATOR angle((Vector2< double > const &)*arg1,(Vector2< double > const &)*arg2,(Vector2< double > const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec_angle(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vector2T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vector2T_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vec_angle__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vector2T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vector2T_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Vector2T_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Vec_angle__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vec_angle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Vector2< double >::angle(Vector2< double > const &,Vector2< double > const &)\n"
    "    Vector2< double >::angle(Vector2< double > const &,Vector2< double > const &,Vector2< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Vec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *arg1 = (Vector2< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Vec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vec" "', argument " "1"" of type '" "Vector2< double > *""'"); 
  }
  arg1 = reinterpret_cast< Vector2< double > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *arg1 = (Vector2< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec___str__" "', argument " "1"" of type '" "Vector2< double > *""'"); 
  }
  arg1 = reinterpret_cast< Vector2< double > * >(argp1);
  result = (char *)Vector2_Sl_double_Sg____str__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *arg1 = (Vector2< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vec___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec___repr__" "', argument " "1"" of type '" "Vector2< double > *""'"); 
  }
  arg1 = reinterpret_cast< Vector2< double > * >(argp1);
  result = (char *)Vector2_Sl_double_Sg____repr__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec___truediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *arg1 = (Vector2< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vector2< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec___truediv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec___truediv__" "', argument " "1"" of type '" "Vector2< double > const *""'"); 
  }
  arg1 = reinterpret_cast< Vector2< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec___truediv__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = Vector2_Sl_double_Sg____truediv__((Vector2< double > const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Vector2< double >(static_cast< const Vector2< double >& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec___mul____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector2< double > *arg1 = (Vector2< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vector2< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vec___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec___mul__" "', argument " "1"" of type '" "Vector2< double > const *""'"); 
  }
  arg1 = reinterpret_cast< Vector2< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec___mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = Vector2_Sl_double_Sg____mul____SWIG_2((Vector2< double > const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Vector2< double >(static_cast< const Vector2< double >& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec___mul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vector2T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vector2T_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vec___mul____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vector2T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vec___mul____SWIG_2(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *Vec_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Vector2T_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vecptrvector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:vecptrvector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector_iterator" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  result = (swig::SwigPyIterator *)vector_Sl_Vector2_Sl_double_Sg__Sm__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecptrvector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector___nonzero__" "', argument " "1"" of type '" "vector< Vector2< double > * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  result = (bool)vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____nonzero__((vector< Vector2< double > * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecptrvector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector___bool__" "', argument " "1"" of type '" "vector< Vector2< double > * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  result = (bool)vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____bool__((vector< Vector2< double > * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< Vector2< double > * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecptrvector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector___len__" "', argument " "1"" of type '" "vector< Vector2< double > * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  result = vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____len__((vector< Vector2< double > * > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< Vector2< double > * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecptrvector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector_pop" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  try {
    result = (vector< Vector2< double > * >::value_type)vector_Sl_Vector2_Sl_double_Sg__Sm__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  vector< Vector2< double > * >::difference_type arg2 ;
  vector< Vector2< double > * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Vector2< double > *,std::allocator< Vector2< double > * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vecptrvector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector___getslice__" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecptrvector___getslice__" "', argument " "2"" of type '" "vector< Vector2< double > * >::difference_type""'");
  } 
  arg2 = static_cast< vector< Vector2< double > * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecptrvector___getslice__" "', argument " "3"" of type '" "vector< Vector2< double > * >::difference_type""'");
  } 
  arg3 = static_cast< vector< Vector2< double > * >::difference_type >(val3);
  try {
    result = (std::vector< Vector2< double > *,std::allocator< Vector2< double > * > > *)vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  vector< Vector2< double > * >::difference_type arg2 ;
  vector< Vector2< double > * >::difference_type arg3 ;
  std::vector< Vector2< double > *,std::allocator< Vector2< double > * > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vecptrvector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector___setslice__" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecptrvector___setslice__" "', argument " "2"" of type '" "vector< Vector2< double > * >::difference_type""'");
  } 
  arg2 = static_cast< vector< Vector2< double > * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecptrvector___setslice__" "', argument " "3"" of type '" "vector< Vector2< double > * >::difference_type""'");
  } 
  arg3 = static_cast< vector< Vector2< double > * >::difference_type >(val3);
  {
    std::vector<Vector2< double >*,std::allocator< Vector2< double > * > > *ptr = (std::vector<Vector2< double >*,std::allocator< Vector2< double > * > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vecptrvector___setslice__" "', argument " "4"" of type '" "std::vector< Vector2< double > *,std::allocator< Vector2< double > * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecptrvector___setslice__" "', argument " "4"" of type '" "std::vector< Vector2< double > *,std::allocator< Vector2< double > * > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< Vector2< double > *,std::allocator< Vector2< double > * > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  vector< Vector2< double > * >::difference_type arg2 ;
  vector< Vector2< double > * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vecptrvector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector___setslice__" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecptrvector___setslice__" "', argument " "2"" of type '" "vector< Vector2< double > * >::difference_type""'");
  } 
  arg2 = static_cast< vector< Vector2< double > * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecptrvector___setslice__" "', argument " "3"" of type '" "vector< Vector2< double > * >::difference_type""'");
  } 
  arg3 = static_cast< vector< Vector2< double > * >::difference_type >(val3);
  try {
    vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vecptrvector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<Vector2< double >*,std::allocator< Vector2< double > * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vecptrvector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vecptrvector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Vector2< double > * >::__setslice__(vector< Vector2< double > * >::difference_type,vector< Vector2< double > * >::difference_type,std::vector< Vector2< double > *,std::allocator< Vector2< double > * > > const &)\n"
    "    vector< Vector2< double > * >::__setslice__(vector< Vector2< double > * >::difference_type,vector< Vector2< double > * >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecptrvector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  vector< Vector2< double > * >::difference_type arg2 ;
  vector< Vector2< double > * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vecptrvector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector___delslice__" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecptrvector___delslice__" "', argument " "2"" of type '" "vector< Vector2< double > * >::difference_type""'");
  } 
  arg2 = static_cast< vector< Vector2< double > * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecptrvector___delslice__" "', argument " "3"" of type '" "vector< Vector2< double > * >::difference_type""'");
  } 
  arg3 = static_cast< vector< Vector2< double > * >::difference_type >(val3);
  try {
    vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  vector< Vector2< double > * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vecptrvector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector___delitem__" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecptrvector___delitem__" "', argument " "2"" of type '" "vector< Vector2< double > * >::difference_type""'");
  } 
  arg2 = static_cast< vector< Vector2< double > * >::difference_type >(val2);
  try {
    vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Vector2< double > *,std::allocator< Vector2< double > * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vecptrvector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector___getitem__" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecptrvector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< Vector2< double > *,std::allocator< Vector2< double > * > > *)vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< Vector2< double > *,std::allocator< Vector2< double > * > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vecptrvector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector___setitem__" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecptrvector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<Vector2< double >*,std::allocator< Vector2< double > * > > *ptr = (std::vector<Vector2< double >*,std::allocator< Vector2< double > * > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecptrvector___setitem__" "', argument " "3"" of type '" "std::vector< Vector2< double > *,std::allocator< Vector2< double > * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecptrvector___setitem__" "', argument " "3"" of type '" "std::vector< Vector2< double > *,std::allocator< Vector2< double > * > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< Vector2< double > *,std::allocator< Vector2< double > * > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vecptrvector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector___setitem__" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecptrvector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vecptrvector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector___delitem__" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecptrvector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecptrvector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecptrvector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vecptrvector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Vector2< double > * >::__delitem__(vector< Vector2< double > * >::difference_type)\n"
    "    vector< Vector2< double > * >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecptrvector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  vector< Vector2< double > * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< Vector2< double > * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vecptrvector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector___getitem__" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecptrvector___getitem__" "', argument " "2"" of type '" "vector< Vector2< double > * >::difference_type""'");
  } 
  arg2 = static_cast< vector< Vector2< double > * >::difference_type >(val2);
  try {
    result = (vector< Vector2< double > * >::value_type)vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____getitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecptrvector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecptrvector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vecptrvector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Vector2< double > * >::__getitem__(PySliceObject *)\n"
    "    vector< Vector2< double > * >::__getitem__(vector< Vector2< double > * >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecptrvector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  vector< Vector2< double > * >::difference_type arg2 ;
  vector< Vector2< double > * >::value_type arg3 = (vector< Vector2< double > * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vecptrvector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector___setitem__" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecptrvector___setitem__" "', argument " "2"" of type '" "vector< Vector2< double > * >::difference_type""'");
  } 
  arg2 = static_cast< vector< Vector2< double > * >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecptrvector___setitem__" "', argument " "3"" of type '" "vector< Vector2< double > * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< Vector2< double > * >::value_type >(argp3);
  try {
    vector_Sl_Vector2_Sl_double_Sg__Sm__Sg____setitem____SWIG_2(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecptrvector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<Vector2< double >*,std::allocator< Vector2< double > * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecptrvector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Vector2T_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecptrvector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vecptrvector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Vector2< double > * >::__setitem__(PySliceObject *,std::vector< Vector2< double > *,std::allocator< Vector2< double > * > > const &)\n"
    "    vector< Vector2< double > * >::__setitem__(PySliceObject *)\n"
    "    vector< Vector2< double > * >::__setitem__(vector< Vector2< double > * >::difference_type,vector< Vector2< double > * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecptrvector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  vector< Vector2< double > * >::value_type arg2 = (vector< Vector2< double > * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vecptrvector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector_append" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecptrvector_append" "', argument " "2"" of type '" "vector< Vector2< double > * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< vector< Vector2< double > * >::value_type >(argp2);
  vector_Sl_Vector2_Sl_double_Sg__Sm__Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecptrvector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vecptrvector")) SWIG_fail;
  result = (vector< Vector2< double > * > *)new vector< Vector2< double > * >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecptrvector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vector2< double > * > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  vector< Vector2< double > * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vecptrvector",&obj0)) SWIG_fail;
  {
    std::vector<Vector2< double >*,std::allocator< Vector2< double > * > > *ptr = (std::vector<Vector2< double >*,std::allocator< Vector2< double > * > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vecptrvector" "', argument " "1"" of type '" "std::vector< Vector2< double > * > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vecptrvector" "', argument " "1"" of type '" "std::vector< Vector2< double > * > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (vector< Vector2< double > * > *)new vector< Vector2< double > * >((std::vector< Vector2< double > * > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecptrvector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector_empty" "', argument " "1"" of type '" "vector< Vector2< double > * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  result = (bool)((vector< Vector2< double > * > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< Vector2< double > * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecptrvector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector_size" "', argument " "1"" of type '" "vector< Vector2< double > * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  result = ((vector< Vector2< double > * > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecptrvector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector_clear" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  std::vector< Vector2< double > * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vecptrvector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector_swap" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecptrvector_swap" "', argument " "2"" of type '" "std::vector< Vector2< double > * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecptrvector_swap" "', argument " "2"" of type '" "std::vector< Vector2< double > * > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Vector2< double > * > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< Vector2< double > * > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecptrvector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector_get_allocator" "', argument " "1"" of type '" "vector< Vector2< double > * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  result = ((vector< Vector2< double > * > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new vector< Vector2< double > * >::allocator_type(static_cast< const vector< Vector2< double > * >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_Vector2T_double_t_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< Vector2< double > * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecptrvector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector_begin" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< Vector2< double > * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< Vector2< double > * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecptrvector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector_end" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< Vector2< double > * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< Vector2< double > * >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecptrvector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector_rbegin" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< Vector2< double > * >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< Vector2< double > * >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecptrvector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector_rend" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< Vector2< double > * >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecptrvector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< Vector2< double > * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vecptrvector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecptrvector" "', argument " "1"" of type '" "vector< Vector2< double > * >::size_type""'");
  } 
  arg1 = static_cast< vector< Vector2< double > * >::size_type >(val1);
  result = (vector< Vector2< double > * > *)new vector< Vector2< double > * >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecptrvector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector_pop_back" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  vector< Vector2< double > * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vecptrvector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector_resize" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecptrvector_resize" "', argument " "2"" of type '" "vector< Vector2< double > * >::size_type""'");
  } 
  arg2 = static_cast< vector< Vector2< double > * >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  vector< Vector2< double > * >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< Vector2< double > * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vecptrvector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector_erase" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecptrvector_erase" "', argument " "2"" of type '" "vector< Vector2< double > * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< Vector2< double > * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< Vector2< double > * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecptrvector_erase" "', argument " "2"" of type '" "vector< Vector2< double > * >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< Vector2< double > * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  vector< Vector2< double > * >::iterator arg2 ;
  vector< Vector2< double > * >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< Vector2< double > * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vecptrvector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector_erase" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecptrvector_erase" "', argument " "2"" of type '" "vector< Vector2< double > * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< Vector2< double > * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< Vector2< double > * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecptrvector_erase" "', argument " "2"" of type '" "vector< Vector2< double > * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecptrvector_erase" "', argument " "3"" of type '" "vector< Vector2< double > * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< Vector2< double > * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< Vector2< double > * >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecptrvector_erase" "', argument " "3"" of type '" "vector< Vector2< double > * >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< Vector2< double > * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< Vector2< double > * >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vecptrvector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< Vector2< double > * >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< Vector2< double > * >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vecptrvector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vecptrvector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Vector2< double > * >::erase(vector< Vector2< double > * >::iterator)\n"
    "    vector< Vector2< double > * >::erase(vector< Vector2< double > * >::iterator,vector< Vector2< double > * >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vecptrvector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * >::size_type arg1 ;
  vector< Vector2< double > * >::value_type arg2 = (vector< Vector2< double > * >::value_type) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< Vector2< double > * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vecptrvector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecptrvector" "', argument " "1"" of type '" "vector< Vector2< double > * >::size_type""'");
  } 
  arg1 = static_cast< vector< Vector2< double > * >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vecptrvector" "', argument " "2"" of type '" "vector< Vector2< double > * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< vector< Vector2< double > * >::value_type >(argp2);
  result = (vector< Vector2< double > * > *)new vector< Vector2< double > * >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecptrvector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vecptrvector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vecptrvector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Vector2< double >*,std::allocator< Vector2< double > * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vecptrvector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vector2T_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vecptrvector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vecptrvector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Vector2< double > * >::vector()\n"
    "    vector< Vector2< double > * >::vector(std::vector< Vector2< double > * > const &)\n"
    "    vector< Vector2< double > * >::vector(vector< Vector2< double > * >::size_type)\n"
    "    vector< Vector2< double > * >::vector(vector< Vector2< double > * >::size_type,vector< Vector2< double > * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecptrvector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  vector< Vector2< double > * >::value_type arg2 = (vector< Vector2< double > * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vecptrvector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector_push_back" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecptrvector_push_back" "', argument " "2"" of type '" "vector< Vector2< double > * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< vector< Vector2< double > * >::value_type >(argp2);
  (arg1)->push_back(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< Vector2< double > * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecptrvector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector_front" "', argument " "1"" of type '" "vector< Vector2< double > * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  result = (vector< Vector2< double > * >::value_type)((vector< Vector2< double > * > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< Vector2< double > * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecptrvector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector_back" "', argument " "1"" of type '" "vector< Vector2< double > * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  result = (vector< Vector2< double > * >::value_type)((vector< Vector2< double > * > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  vector< Vector2< double > * >::size_type arg2 ;
  vector< Vector2< double > * >::value_type arg3 = (vector< Vector2< double > * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vecptrvector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector_assign" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecptrvector_assign" "', argument " "2"" of type '" "vector< Vector2< double > * >::size_type""'");
  } 
  arg2 = static_cast< vector< Vector2< double > * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecptrvector_assign" "', argument " "3"" of type '" "vector< Vector2< double > * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< Vector2< double > * >::value_type >(argp3);
  (arg1)->assign(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  vector< Vector2< double > * >::size_type arg2 ;
  vector< Vector2< double > * >::value_type arg3 = (vector< Vector2< double > * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vecptrvector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector_resize" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecptrvector_resize" "', argument " "2"" of type '" "vector< Vector2< double > * >::size_type""'");
  } 
  arg2 = static_cast< vector< Vector2< double > * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecptrvector_resize" "', argument " "3"" of type '" "vector< Vector2< double > * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< Vector2< double > * >::value_type >(argp3);
  (arg1)->resize(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecptrvector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Vector2T_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecptrvector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vecptrvector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Vector2< double > * >::resize(vector< Vector2< double > * >::size_type)\n"
    "    vector< Vector2< double > * >::resize(vector< Vector2< double > * >::size_type,vector< Vector2< double > * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecptrvector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  vector< Vector2< double > * >::iterator arg2 ;
  vector< Vector2< double > * >::value_type arg3 = (vector< Vector2< double > * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< Vector2< double > * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vecptrvector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector_insert" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecptrvector_insert" "', argument " "2"" of type '" "vector< Vector2< double > * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< Vector2< double > * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< Vector2< double > * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecptrvector_insert" "', argument " "2"" of type '" "vector< Vector2< double > * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecptrvector_insert" "', argument " "3"" of type '" "vector< Vector2< double > * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< Vector2< double > * >::value_type >(argp3);
  result = (arg1)->insert(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< Vector2< double > * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  vector< Vector2< double > * >::iterator arg2 ;
  vector< Vector2< double > * >::size_type arg3 ;
  vector< Vector2< double > * >::value_type arg4 = (vector< Vector2< double > * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vecptrvector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector_insert" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecptrvector_insert" "', argument " "2"" of type '" "vector< Vector2< double > * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< Vector2< double > * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< Vector2< double > * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecptrvector_insert" "', argument " "2"" of type '" "vector< Vector2< double > * >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecptrvector_insert" "', argument " "3"" of type '" "vector< Vector2< double > * >::size_type""'");
  } 
  arg3 = static_cast< vector< Vector2< double > * >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vecptrvector_insert" "', argument " "4"" of type '" "vector< Vector2< double > * >::value_type""'"); 
  }
  arg4 = reinterpret_cast< vector< Vector2< double > * >::value_type >(argp4);
  (arg1)->insert(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< Vector2< double > * >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Vector2T_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecptrvector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< Vector2< double > * >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Vector2T_double_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vecptrvector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vecptrvector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Vector2< double > * >::insert(vector< Vector2< double > * >::iterator,vector< Vector2< double > * >::value_type)\n"
    "    vector< Vector2< double > * >::insert(vector< Vector2< double > * >::iterator,vector< Vector2< double > * >::size_type,vector< Vector2< double > * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecptrvector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  vector< Vector2< double > * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vecptrvector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector_reserve" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecptrvector_reserve" "', argument " "2"" of type '" "vector< Vector2< double > * >::size_type""'");
  } 
  arg2 = static_cast< vector< Vector2< double > * >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecptrvector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< Vector2< double > * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecptrvector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecptrvector_capacity" "', argument " "1"" of type '" "vector< Vector2< double > * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  result = ((vector< Vector2< double > * > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vecptrvector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > * > *arg1 = (vector< Vector2< double > * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vecptrvector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vecptrvector" "', argument " "1"" of type '" "vector< Vector2< double > * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > * > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vecptrvector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vecvector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:vecvector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector_iterator" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  result = (swig::SwigPyIterator *)vector_Sl_Vector2_Sl_double_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecvector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector___nonzero__" "', argument " "1"" of type '" "vector< Vector2< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  result = (bool)vector_Sl_Vector2_Sl_double_Sg__Sg____nonzero__((vector< Vector2< double > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecvector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector___bool__" "', argument " "1"" of type '" "vector< Vector2< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  result = (bool)vector_Sl_Vector2_Sl_double_Sg__Sg____bool__((vector< Vector2< double > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< Vector2< double > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecvector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector___len__" "', argument " "1"" of type '" "vector< Vector2< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  result = vector_Sl_Vector2_Sl_double_Sg__Sg____len__((vector< Vector2< double > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< Vector2< double > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecvector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector_pop" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  try {
    result = vector_Sl_Vector2_Sl_double_Sg__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new vector< Vector2< double > >::value_type(static_cast< const vector< Vector2< double > >::value_type& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  vector< Vector2< double > >::difference_type arg2 ;
  vector< Vector2< double > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Vector2< double >,std::allocator< Vector2< double > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vecvector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector___getslice__" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecvector___getslice__" "', argument " "2"" of type '" "vector< Vector2< double > >::difference_type""'");
  } 
  arg2 = static_cast< vector< Vector2< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecvector___getslice__" "', argument " "3"" of type '" "vector< Vector2< double > >::difference_type""'");
  } 
  arg3 = static_cast< vector< Vector2< double > >::difference_type >(val3);
  try {
    result = (std::vector< Vector2< double >,std::allocator< Vector2< double > > > *)vector_Sl_Vector2_Sl_double_Sg__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  vector< Vector2< double > >::difference_type arg2 ;
  vector< Vector2< double > >::difference_type arg3 ;
  std::vector< Vector2< double >,std::allocator< Vector2< double > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vecvector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector___setslice__" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecvector___setslice__" "', argument " "2"" of type '" "vector< Vector2< double > >::difference_type""'");
  } 
  arg2 = static_cast< vector< Vector2< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecvector___setslice__" "', argument " "3"" of type '" "vector< Vector2< double > >::difference_type""'");
  } 
  arg3 = static_cast< vector< Vector2< double > >::difference_type >(val3);
  {
    std::vector<Vector2< double >,std::allocator< Vector2< double > > > *ptr = (std::vector<Vector2< double >,std::allocator< Vector2< double > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vecvector___setslice__" "', argument " "4"" of type '" "std::vector< Vector2< double >,std::allocator< Vector2< double > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecvector___setslice__" "', argument " "4"" of type '" "std::vector< Vector2< double >,std::allocator< Vector2< double > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    vector_Sl_Vector2_Sl_double_Sg__Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< Vector2< double >,std::allocator< Vector2< double > > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  vector< Vector2< double > >::difference_type arg2 ;
  vector< Vector2< double > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vecvector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector___setslice__" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecvector___setslice__" "', argument " "2"" of type '" "vector< Vector2< double > >::difference_type""'");
  } 
  arg2 = static_cast< vector< Vector2< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecvector___setslice__" "', argument " "3"" of type '" "vector< Vector2< double > >::difference_type""'");
  } 
  arg3 = static_cast< vector< Vector2< double > >::difference_type >(val3);
  try {
    vector_Sl_Vector2_Sl_double_Sg__Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vecvector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<Vector2< double >,std::allocator< Vector2< double > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vecvector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vecvector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Vector2< double > >::__setslice__(vector< Vector2< double > >::difference_type,vector< Vector2< double > >::difference_type,std::vector< Vector2< double >,std::allocator< Vector2< double > > > const &)\n"
    "    vector< Vector2< double > >::__setslice__(vector< Vector2< double > >::difference_type,vector< Vector2< double > >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecvector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  vector< Vector2< double > >::difference_type arg2 ;
  vector< Vector2< double > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vecvector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector___delslice__" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecvector___delslice__" "', argument " "2"" of type '" "vector< Vector2< double > >::difference_type""'");
  } 
  arg2 = static_cast< vector< Vector2< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecvector___delslice__" "', argument " "3"" of type '" "vector< Vector2< double > >::difference_type""'");
  } 
  arg3 = static_cast< vector< Vector2< double > >::difference_type >(val3);
  try {
    vector_Sl_Vector2_Sl_double_Sg__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  vector< Vector2< double > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vecvector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector___delitem__" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecvector___delitem__" "', argument " "2"" of type '" "vector< Vector2< double > >::difference_type""'");
  } 
  arg2 = static_cast< vector< Vector2< double > >::difference_type >(val2);
  try {
    vector_Sl_Vector2_Sl_double_Sg__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Vector2< double >,std::allocator< Vector2< double > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vecvector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector___getitem__" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecvector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< Vector2< double >,std::allocator< Vector2< double > > > *)vector_Sl_Vector2_Sl_double_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< Vector2< double >,std::allocator< Vector2< double > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vecvector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector___setitem__" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecvector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<Vector2< double >,std::allocator< Vector2< double > > > *ptr = (std::vector<Vector2< double >,std::allocator< Vector2< double > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecvector___setitem__" "', argument " "3"" of type '" "std::vector< Vector2< double >,std::allocator< Vector2< double > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecvector___setitem__" "', argument " "3"" of type '" "std::vector< Vector2< double >,std::allocator< Vector2< double > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    vector_Sl_Vector2_Sl_double_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< Vector2< double >,std::allocator< Vector2< double > > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vecvector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector___setitem__" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecvector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_Vector2_Sl_double_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vecvector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector___delitem__" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecvector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_Vector2_Sl_double_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecvector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecvector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vecvector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Vector2< double > >::__delitem__(vector< Vector2< double > >::difference_type)\n"
    "    vector< Vector2< double > >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecvector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  vector< Vector2< double > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< Vector2< double > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vecvector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector___getitem__" "', argument " "1"" of type '" "vector< Vector2< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecvector___getitem__" "', argument " "2"" of type '" "vector< Vector2< double > >::difference_type""'");
  } 
  arg2 = static_cast< vector< Vector2< double > >::difference_type >(val2);
  try {
    result = (vector< Vector2< double > >::value_type *) &vector_Sl_Vector2_Sl_double_Sg__Sg____getitem____SWIG_1((vector< Vector2< double > > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecvector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecvector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vecvector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Vector2< double > >::__getitem__(PySliceObject *)\n"
    "    vector< Vector2< double > >::__getitem__(vector< Vector2< double > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecvector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  vector< Vector2< double > >::difference_type arg2 ;
  vector< Vector2< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vecvector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector___setitem__" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecvector___setitem__" "', argument " "2"" of type '" "vector< Vector2< double > >::difference_type""'");
  } 
  arg2 = static_cast< vector< Vector2< double > >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecvector___setitem__" "', argument " "3"" of type '" "vector< Vector2< double > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecvector___setitem__" "', argument " "3"" of type '" "vector< Vector2< double > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< vector< Vector2< double > >::value_type * >(argp3);
  try {
    vector_Sl_Vector2_Sl_double_Sg__Sg____setitem____SWIG_2(arg1,arg2,(Vector2< double > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecvector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<Vector2< double >,std::allocator< Vector2< double > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecvector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Vector2T_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecvector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vecvector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Vector2< double > >::__setitem__(PySliceObject *,std::vector< Vector2< double >,std::allocator< Vector2< double > > > const &)\n"
    "    vector< Vector2< double > >::__setitem__(PySliceObject *)\n"
    "    vector< Vector2< double > >::__setitem__(vector< Vector2< double > >::difference_type,vector< Vector2< double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecvector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  vector< Vector2< double > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vecvector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector_append" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecvector_append" "', argument " "2"" of type '" "vector< Vector2< double > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecvector_append" "', argument " "2"" of type '" "vector< Vector2< double > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< vector< Vector2< double > >::value_type * >(argp2);
  vector_Sl_Vector2_Sl_double_Sg__Sg__append(arg1,(Vector2< double > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecvector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vecvector")) SWIG_fail;
  result = (vector< Vector2< double > > *)new vector< Vector2< double > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecvector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Vector2< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  vector< Vector2< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vecvector",&obj0)) SWIG_fail;
  {
    std::vector<Vector2< double >,std::allocator< Vector2< double > > > *ptr = (std::vector<Vector2< double >,std::allocator< Vector2< double > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vecvector" "', argument " "1"" of type '" "std::vector< Vector2< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vecvector" "', argument " "1"" of type '" "std::vector< Vector2< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (vector< Vector2< double > > *)new vector< Vector2< double > >((std::vector< Vector2< double > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecvector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector_empty" "', argument " "1"" of type '" "vector< Vector2< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  result = (bool)((vector< Vector2< double > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< Vector2< double > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecvector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector_size" "', argument " "1"" of type '" "vector< Vector2< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  result = ((vector< Vector2< double > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecvector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector_clear" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  std::vector< Vector2< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vecvector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector_swap" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecvector_swap" "', argument " "2"" of type '" "std::vector< Vector2< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecvector_swap" "', argument " "2"" of type '" "std::vector< Vector2< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Vector2< double > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< Vector2< double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecvector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector_get_allocator" "', argument " "1"" of type '" "vector< Vector2< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  result = ((vector< Vector2< double > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new vector< Vector2< double > >::allocator_type(static_cast< const vector< Vector2< double > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_Vector2T_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< Vector2< double > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecvector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector_begin" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< Vector2< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< Vector2< double > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecvector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector_end" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< Vector2< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< Vector2< double > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecvector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector_rbegin" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< Vector2< double > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< Vector2< double > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecvector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector_rend" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< Vector2< double > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecvector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< Vector2< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vecvector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecvector" "', argument " "1"" of type '" "vector< Vector2< double > >::size_type""'");
  } 
  arg1 = static_cast< vector< Vector2< double > >::size_type >(val1);
  result = (vector< Vector2< double > > *)new vector< Vector2< double > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecvector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector_pop_back" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  vector< Vector2< double > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vecvector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector_resize" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecvector_resize" "', argument " "2"" of type '" "vector< Vector2< double > >::size_type""'");
  } 
  arg2 = static_cast< vector< Vector2< double > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  vector< Vector2< double > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< Vector2< double > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vecvector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector_erase" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecvector_erase" "', argument " "2"" of type '" "vector< Vector2< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< Vector2< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< Vector2< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecvector_erase" "', argument " "2"" of type '" "vector< Vector2< double > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< Vector2< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  vector< Vector2< double > >::iterator arg2 ;
  vector< Vector2< double > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< Vector2< double > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vecvector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector_erase" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecvector_erase" "', argument " "2"" of type '" "vector< Vector2< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< Vector2< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< Vector2< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecvector_erase" "', argument " "2"" of type '" "vector< Vector2< double > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecvector_erase" "', argument " "3"" of type '" "vector< Vector2< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< Vector2< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< Vector2< double > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecvector_erase" "', argument " "3"" of type '" "vector< Vector2< double > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< Vector2< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< Vector2< double > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vecvector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< Vector2< double > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< Vector2< double > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vecvector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vecvector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Vector2< double > >::erase(vector< Vector2< double > >::iterator)\n"
    "    vector< Vector2< double > >::erase(vector< Vector2< double > >::iterator,vector< Vector2< double > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vecvector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > >::size_type arg1 ;
  vector< Vector2< double > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< Vector2< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vecvector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecvector" "', argument " "1"" of type '" "vector< Vector2< double > >::size_type""'");
  } 
  arg1 = static_cast< vector< Vector2< double > >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vecvector" "', argument " "2"" of type '" "vector< Vector2< double > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vecvector" "', argument " "2"" of type '" "vector< Vector2< double > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< vector< Vector2< double > >::value_type * >(argp2);
  result = (vector< Vector2< double > > *)new vector< Vector2< double > >(arg1,(vector< Vector2< double > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecvector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vecvector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vecvector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Vector2< double >,std::allocator< Vector2< double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vecvector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vector2T_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vecvector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vecvector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Vector2< double > >::vector()\n"
    "    vector< Vector2< double > >::vector(std::vector< Vector2< double > > const &)\n"
    "    vector< Vector2< double > >::vector(vector< Vector2< double > >::size_type)\n"
    "    vector< Vector2< double > >::vector(vector< Vector2< double > >::size_type,vector< Vector2< double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecvector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  vector< Vector2< double > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vecvector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector_push_back" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecvector_push_back" "', argument " "2"" of type '" "vector< Vector2< double > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecvector_push_back" "', argument " "2"" of type '" "vector< Vector2< double > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< vector< Vector2< double > >::value_type * >(argp2);
  (arg1)->push_back((vector< Vector2< double > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< Vector2< double > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecvector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector_front" "', argument " "1"" of type '" "vector< Vector2< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  result = (vector< Vector2< double > >::value_type *) &((vector< Vector2< double > > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< Vector2< double > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecvector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector_back" "', argument " "1"" of type '" "vector< Vector2< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  result = (vector< Vector2< double > >::value_type *) &((vector< Vector2< double > > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  vector< Vector2< double > >::size_type arg2 ;
  vector< Vector2< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vecvector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector_assign" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecvector_assign" "', argument " "2"" of type '" "vector< Vector2< double > >::size_type""'");
  } 
  arg2 = static_cast< vector< Vector2< double > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecvector_assign" "', argument " "3"" of type '" "vector< Vector2< double > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecvector_assign" "', argument " "3"" of type '" "vector< Vector2< double > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< vector< Vector2< double > >::value_type * >(argp3);
  (arg1)->assign(arg2,(vector< Vector2< double > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  vector< Vector2< double > >::size_type arg2 ;
  vector< Vector2< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vecvector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector_resize" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecvector_resize" "', argument " "2"" of type '" "vector< Vector2< double > >::size_type""'");
  } 
  arg2 = static_cast< vector< Vector2< double > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecvector_resize" "', argument " "3"" of type '" "vector< Vector2< double > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecvector_resize" "', argument " "3"" of type '" "vector< Vector2< double > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< vector< Vector2< double > >::value_type * >(argp3);
  (arg1)->resize(arg2,(vector< Vector2< double > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecvector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Vector2T_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecvector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vecvector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Vector2< double > >::resize(vector< Vector2< double > >::size_type)\n"
    "    vector< Vector2< double > >::resize(vector< Vector2< double > >::size_type,vector< Vector2< double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecvector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  vector< Vector2< double > >::iterator arg2 ;
  vector< Vector2< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< Vector2< double > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vecvector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector_insert" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecvector_insert" "', argument " "2"" of type '" "vector< Vector2< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< Vector2< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< Vector2< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecvector_insert" "', argument " "2"" of type '" "vector< Vector2< double > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecvector_insert" "', argument " "3"" of type '" "vector< Vector2< double > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecvector_insert" "', argument " "3"" of type '" "vector< Vector2< double > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< vector< Vector2< double > >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(vector< Vector2< double > >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< Vector2< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  vector< Vector2< double > >::iterator arg2 ;
  vector< Vector2< double > >::size_type arg3 ;
  vector< Vector2< double > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vecvector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector_insert" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecvector_insert" "', argument " "2"" of type '" "vector< Vector2< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< Vector2< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< Vector2< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecvector_insert" "', argument " "2"" of type '" "vector< Vector2< double > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecvector_insert" "', argument " "3"" of type '" "vector< Vector2< double > >::size_type""'");
  } 
  arg3 = static_cast< vector< Vector2< double > >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vecvector_insert" "', argument " "4"" of type '" "vector< Vector2< double > >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecvector_insert" "', argument " "4"" of type '" "vector< Vector2< double > >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< vector< Vector2< double > >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(vector< Vector2< double > >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< Vector2< double > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Vector2T_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecvector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< Vector2< double > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_Vector2T_double_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vecvector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vecvector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Vector2< double > >::insert(vector< Vector2< double > >::iterator,vector< Vector2< double > >::value_type const &)\n"
    "    vector< Vector2< double > >::insert(vector< Vector2< double > >::iterator,vector< Vector2< double > >::size_type,vector< Vector2< double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecvector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  vector< Vector2< double > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vecvector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector_reserve" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecvector_reserve" "', argument " "2"" of type '" "vector< Vector2< double > >::size_type""'");
  } 
  arg2 = static_cast< vector< Vector2< double > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecvector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< Vector2< double > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vecvector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecvector_capacity" "', argument " "1"" of type '" "vector< Vector2< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  result = ((vector< Vector2< double > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vecvector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< Vector2< double > > *arg1 = (vector< Vector2< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vecvector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vecvector" "', argument " "1"" of type '" "vector< Vector2< double > > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Vector2< double > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vecvector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap__jamminglist_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglist_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_iterator" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  result = (swig::SwigPyIterator *)list_Sl_jamminglist_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglist___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist___nonzero__" "', argument " "1"" of type '" "list< jamminglist > const *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  result = (bool)list_Sl_jamminglist_Sg____nonzero__((list< jamminglist > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglist___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist___bool__" "', argument " "1"" of type '" "list< jamminglist > const *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  result = (bool)list_Sl_jamminglist_Sg____bool__((list< jamminglist > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  list< jamminglist >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglist___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist___len__" "', argument " "1"" of type '" "list< jamminglist > const *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  result = list_Sl_jamminglist_Sg____len__((list< jamminglist > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  list< jamminglist >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglist_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_pop" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  try {
    result = list_Sl_jamminglist_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new list< jamminglist >::value_type(static_cast< const list< jamminglist >::value_type& >(result))), SWIGTYPE_p_jamminglist, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  list< jamminglist >::difference_type arg2 ;
  list< jamminglist >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< jamminglist,std::allocator< jamminglist > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_jamminglist___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist___getslice__" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_jamminglist___getslice__" "', argument " "2"" of type '" "list< jamminglist >::difference_type""'");
  } 
  arg2 = static_cast< list< jamminglist >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_jamminglist___getslice__" "', argument " "3"" of type '" "list< jamminglist >::difference_type""'");
  } 
  arg3 = static_cast< list< jamminglist >::difference_type >(val3);
  try {
    result = (std::list< jamminglist,std::allocator< jamminglist > > *)list_Sl_jamminglist_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  list< jamminglist >::difference_type arg2 ;
  list< jamminglist >::difference_type arg3 ;
  std::list< jamminglist,std::allocator< jamminglist > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:_jamminglist___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist___setslice__" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_jamminglist___setslice__" "', argument " "2"" of type '" "list< jamminglist >::difference_type""'");
  } 
  arg2 = static_cast< list< jamminglist >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_jamminglist___setslice__" "', argument " "3"" of type '" "list< jamminglist >::difference_type""'");
  } 
  arg3 = static_cast< list< jamminglist >::difference_type >(val3);
  {
    std::list<jamminglist,std::allocator< jamminglist > > *ptr = (std::list<jamminglist,std::allocator< jamminglist > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "_jamminglist___setslice__" "', argument " "4"" of type '" "std::list< jamminglist,std::allocator< jamminglist > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_jamminglist___setslice__" "', argument " "4"" of type '" "std::list< jamminglist,std::allocator< jamminglist > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    list_Sl_jamminglist_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::list< jamminglist,std::allocator< jamminglist > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  list< jamminglist >::difference_type arg2 ;
  list< jamminglist >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_jamminglist___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist___setslice__" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_jamminglist___setslice__" "', argument " "2"" of type '" "list< jamminglist >::difference_type""'");
  } 
  arg2 = static_cast< list< jamminglist >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_jamminglist___setslice__" "', argument " "3"" of type '" "list< jamminglist >::difference_type""'");
  } 
  arg3 = static_cast< list< jamminglist >::difference_type >(val3);
  try {
    list_Sl_jamminglist_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap__jamminglist___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::list<jamminglist,std::allocator< jamminglist > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap__jamminglist___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_jamminglist___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    list< jamminglist >::__setslice__(list< jamminglist >::difference_type,list< jamminglist >::difference_type,std::list< jamminglist,std::allocator< jamminglist > > const &)\n"
    "    list< jamminglist >::__setslice__(list< jamminglist >::difference_type,list< jamminglist >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__jamminglist___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  list< jamminglist >::difference_type arg2 ;
  list< jamminglist >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_jamminglist___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist___delslice__" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_jamminglist___delslice__" "', argument " "2"" of type '" "list< jamminglist >::difference_type""'");
  } 
  arg2 = static_cast< list< jamminglist >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_jamminglist___delslice__" "', argument " "3"" of type '" "list< jamminglist >::difference_type""'");
  } 
  arg3 = static_cast< list< jamminglist >::difference_type >(val3);
  try {
    list_Sl_jamminglist_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  list< jamminglist >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_jamminglist___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist___delitem__" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_jamminglist___delitem__" "', argument " "2"" of type '" "list< jamminglist >::difference_type""'");
  } 
  arg2 = static_cast< list< jamminglist >::difference_type >(val2);
  try {
    list_Sl_jamminglist_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< jamminglist,std::allocator< jamminglist > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_jamminglist___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist___getitem__" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglist___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::list< jamminglist,std::allocator< jamminglist > > *)list_Sl_jamminglist_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::list< jamminglist,std::allocator< jamminglist > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_jamminglist___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist___setitem__" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglist___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::list<jamminglist,std::allocator< jamminglist > > *ptr = (std::list<jamminglist,std::allocator< jamminglist > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_jamminglist___setitem__" "', argument " "3"" of type '" "std::list< jamminglist,std::allocator< jamminglist > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_jamminglist___setitem__" "', argument " "3"" of type '" "std::list< jamminglist,std::allocator< jamminglist > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    list_Sl_jamminglist_Sg____setitem____SWIG_0(arg1,arg2,(std::list< jamminglist,std::allocator< jamminglist > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_jamminglist___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist___setitem__" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglist___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    list_Sl_jamminglist_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_jamminglist___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist___delitem__" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglist___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    list_Sl_jamminglist_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap__jamminglist___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__jamminglist___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_jamminglist___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    list< jamminglist >::__delitem__(list< jamminglist >::difference_type)\n"
    "    list< jamminglist >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__jamminglist___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  list< jamminglist >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  list< jamminglist >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_jamminglist___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist___getitem__" "', argument " "1"" of type '" "list< jamminglist > const *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_jamminglist___getitem__" "', argument " "2"" of type '" "list< jamminglist >::difference_type""'");
  } 
  arg2 = static_cast< list< jamminglist >::difference_type >(val2);
  try {
    result = (list< jamminglist >::value_type *) &list_Sl_jamminglist_Sg____getitem____SWIG_1((list< jamminglist > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_jamminglist, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap__jamminglist___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__jamminglist___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_jamminglist___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    list< jamminglist >::__getitem__(PySliceObject *)\n"
    "    list< jamminglist >::__getitem__(list< jamminglist >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__jamminglist___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  list< jamminglist >::difference_type arg2 ;
  list< jamminglist >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_jamminglist___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist___setitem__" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_jamminglist___setitem__" "', argument " "2"" of type '" "list< jamminglist >::difference_type""'");
  } 
  arg2 = static_cast< list< jamminglist >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_jamminglist,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_jamminglist___setitem__" "', argument " "3"" of type '" "list< jamminglist >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_jamminglist___setitem__" "', argument " "3"" of type '" "list< jamminglist >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< list< jamminglist >::value_type * >(argp3);
  try {
    list_Sl_jamminglist_Sg____setitem____SWIG_2(arg1,arg2,(jamminglist const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap__jamminglist___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::list<jamminglist,std::allocator< jamminglist > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap__jamminglist___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_jamminglist, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap__jamminglist___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_jamminglist___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    list< jamminglist >::__setitem__(PySliceObject *,std::list< jamminglist,std::allocator< jamminglist > > const &)\n"
    "    list< jamminglist >::__setitem__(PySliceObject *)\n"
    "    list< jamminglist >::__setitem__(list< jamminglist >::difference_type,list< jamminglist >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__jamminglist_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  list< jamminglist >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_jamminglist_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_append" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_jamminglist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_jamminglist_append" "', argument " "2"" of type '" "list< jamminglist >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_jamminglist_append" "', argument " "2"" of type '" "list< jamminglist >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< list< jamminglist >::value_type * >(argp2);
  list_Sl_jamminglist_Sg__append(arg1,(jamminglist const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__jamminglist__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new__jamminglist")) SWIG_fail;
  result = (list< jamminglist > *)new list< jamminglist >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__jamminglist__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< jamminglist > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  list< jamminglist > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__jamminglist",&obj0)) SWIG_fail;
  {
    std::list<jamminglist,std::allocator< jamminglist > > *ptr = (std::list<jamminglist,std::allocator< jamminglist > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__jamminglist" "', argument " "1"" of type '" "std::list< jamminglist > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__jamminglist" "', argument " "1"" of type '" "std::list< jamminglist > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (list< jamminglist > *)new list< jamminglist >((std::list< jamminglist > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglist_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_empty" "', argument " "1"" of type '" "list< jamminglist > const *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  result = (bool)((list< jamminglist > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  list< jamminglist >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglist_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_size" "', argument " "1"" of type '" "list< jamminglist > const *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  result = ((list< jamminglist > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglist_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_clear" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  std::list< jamminglist > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_jamminglist_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_swap" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_jamminglist_swap" "', argument " "2"" of type '" "std::list< jamminglist > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_jamminglist_swap" "', argument " "2"" of type '" "std::list< jamminglist > &""'"); 
  }
  arg2 = reinterpret_cast< std::list< jamminglist > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< jamminglist > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglist_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_get_allocator" "', argument " "1"" of type '" "list< jamminglist > const *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  result = ((list< jamminglist > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new list< jamminglist >::allocator_type(static_cast< const list< jamminglist >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_jamminglist_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  list< jamminglist >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglist_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_begin" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const list< jamminglist >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  list< jamminglist >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglist_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_end" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const list< jamminglist >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  list< jamminglist >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglist_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_rbegin" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const list< jamminglist >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  list< jamminglist >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglist_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_rend" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const list< jamminglist >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__jamminglist__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  list< jamminglist > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__jamminglist",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new__jamminglist" "', argument " "1"" of type '" "list< jamminglist >::size_type""'");
  } 
  arg1 = static_cast< list< jamminglist >::size_type >(val1);
  result = (list< jamminglist > *)new list< jamminglist >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglist_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_pop_back" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  list< jamminglist >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_jamminglist_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_resize" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_jamminglist_resize" "', argument " "2"" of type '" "list< jamminglist >::size_type""'");
  } 
  arg2 = static_cast< list< jamminglist >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  list< jamminglist >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  list< jamminglist >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_jamminglist_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_erase" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglist_erase" "', argument " "2"" of type '" "list< jamminglist >::iterator""'");
  } else {
    swig::SwigPyIterator_T<list< jamminglist >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<list< jamminglist >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglist_erase" "', argument " "2"" of type '" "list< jamminglist >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const list< jamminglist >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  list< jamminglist >::iterator arg2 ;
  list< jamminglist >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  list< jamminglist >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_jamminglist_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_erase" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglist_erase" "', argument " "2"" of type '" "list< jamminglist >::iterator""'");
  } else {
    swig::SwigPyIterator_T<list< jamminglist >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<list< jamminglist >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglist_erase" "', argument " "2"" of type '" "list< jamminglist >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglist_erase" "', argument " "3"" of type '" "list< jamminglist >::iterator""'");
  } else {
    swig::SwigPyIterator_T<list< jamminglist >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<list< jamminglist >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglist_erase" "', argument " "3"" of type '" "list< jamminglist >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const list< jamminglist >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<list< jamminglist >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap__jamminglist_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<list< jamminglist >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<list< jamminglist >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap__jamminglist_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_jamminglist_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    list< jamminglist >::erase(list< jamminglist >::iterator)\n"
    "    list< jamminglist >::erase(list< jamminglist >::iterator,list< jamminglist >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new__jamminglist__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist >::size_type arg1 ;
  list< jamminglist >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  list< jamminglist > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new__jamminglist",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new__jamminglist" "', argument " "1"" of type '" "list< jamminglist >::size_type""'");
  } 
  arg1 = static_cast< list< jamminglist >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_jamminglist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new__jamminglist" "', argument " "2"" of type '" "list< jamminglist >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__jamminglist" "', argument " "2"" of type '" "list< jamminglist >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< list< jamminglist >::value_type * >(argp2);
  result = (list< jamminglist > *)new list< jamminglist >(arg1,(list< jamminglist >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__jamminglist(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new__jamminglist__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new__jamminglist__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<jamminglist,std::allocator< jamminglist > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new__jamminglist__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_jamminglist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new__jamminglist__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new__jamminglist'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    list< jamminglist >::list()\n"
    "    list< jamminglist >::list(std::list< jamminglist > const &)\n"
    "    list< jamminglist >::list(list< jamminglist >::size_type)\n"
    "    list< jamminglist >::list(list< jamminglist >::size_type,list< jamminglist >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__jamminglist_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  list< jamminglist >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_jamminglist_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_push_back" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_jamminglist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_jamminglist_push_back" "', argument " "2"" of type '" "list< jamminglist >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_jamminglist_push_back" "', argument " "2"" of type '" "list< jamminglist >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< list< jamminglist >::value_type * >(argp2);
  (arg1)->push_back((list< jamminglist >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  list< jamminglist >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglist_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_front" "', argument " "1"" of type '" "list< jamminglist > const *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  result = (list< jamminglist >::value_type *) &((list< jamminglist > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_jamminglist, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  list< jamminglist >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglist_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_back" "', argument " "1"" of type '" "list< jamminglist > const *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  result = (list< jamminglist >::value_type *) &((list< jamminglist > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_jamminglist, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  list< jamminglist >::size_type arg2 ;
  list< jamminglist >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_jamminglist_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_assign" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_jamminglist_assign" "', argument " "2"" of type '" "list< jamminglist >::size_type""'");
  } 
  arg2 = static_cast< list< jamminglist >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_jamminglist,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_jamminglist_assign" "', argument " "3"" of type '" "list< jamminglist >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_jamminglist_assign" "', argument " "3"" of type '" "list< jamminglist >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< list< jamminglist >::value_type * >(argp3);
  (arg1)->assign(arg2,(list< jamminglist >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  list< jamminglist >::size_type arg2 ;
  list< jamminglist >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_jamminglist_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_resize" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_jamminglist_resize" "', argument " "2"" of type '" "list< jamminglist >::size_type""'");
  } 
  arg2 = static_cast< list< jamminglist >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_jamminglist,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_jamminglist_resize" "', argument " "3"" of type '" "list< jamminglist >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_jamminglist_resize" "', argument " "3"" of type '" "list< jamminglist >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< list< jamminglist >::value_type * >(argp3);
  (arg1)->resize(arg2,(list< jamminglist >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__jamminglist_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_jamminglist, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap__jamminglist_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_jamminglist_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    list< jamminglist >::resize(list< jamminglist >::size_type)\n"
    "    list< jamminglist >::resize(list< jamminglist >::size_type,list< jamminglist >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__jamminglist_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  list< jamminglist >::iterator arg2 ;
  list< jamminglist >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  list< jamminglist >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_jamminglist_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_insert" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglist_insert" "', argument " "2"" of type '" "list< jamminglist >::iterator""'");
  } else {
    swig::SwigPyIterator_T<list< jamminglist >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<list< jamminglist >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglist_insert" "', argument " "2"" of type '" "list< jamminglist >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_jamminglist,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_jamminglist_insert" "', argument " "3"" of type '" "list< jamminglist >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_jamminglist_insert" "', argument " "3"" of type '" "list< jamminglist >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< list< jamminglist >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(list< jamminglist >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const list< jamminglist >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  list< jamminglist >::iterator arg2 ;
  list< jamminglist >::size_type arg3 ;
  list< jamminglist >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:_jamminglist_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_insert" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglist_insert" "', argument " "2"" of type '" "list< jamminglist >::iterator""'");
  } else {
    swig::SwigPyIterator_T<list< jamminglist >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<list< jamminglist >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglist_insert" "', argument " "2"" of type '" "list< jamminglist >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_jamminglist_insert" "', argument " "3"" of type '" "list< jamminglist >::size_type""'");
  } 
  arg3 = static_cast< list< jamminglist >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_jamminglist,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "_jamminglist_insert" "', argument " "4"" of type '" "list< jamminglist >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_jamminglist_insert" "', argument " "4"" of type '" "list< jamminglist >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< list< jamminglist >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(list< jamminglist >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<list< jamminglist >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_jamminglist, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap__jamminglist_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<list< jamminglist >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_jamminglist, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap__jamminglist_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_jamminglist_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    list< jamminglist >::insert(list< jamminglist >::iterator,list< jamminglist >::value_type const &)\n"
    "    list< jamminglist >::insert(list< jamminglist >::iterator,list< jamminglist >::size_type,list< jamminglist >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__jamminglist_pop_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglist_pop_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_pop_front" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  (arg1)->pop_front();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist_push_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  list< jamminglist >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_jamminglist_push_front",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_push_front" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_jamminglist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_jamminglist_push_front" "', argument " "2"" of type '" "list< jamminglist >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_jamminglist_push_front" "', argument " "2"" of type '" "list< jamminglist >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< list< jamminglist >::value_type * >(argp2);
  (arg1)->push_front((list< jamminglist >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglist_reverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglist_reverse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglist_reverse" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  (arg1)->reverse();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete__jamminglist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglist > *arg1 = (list< jamminglist > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete__jamminglist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete__jamminglist" "', argument " "1"" of type '" "list< jamminglist > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglist > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_jamminglist_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap__jamminglistrot_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglistrot_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_iterator" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  result = (swig::SwigPyIterator *)list_Sl_jamminglistrot_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglistrot___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot___nonzero__" "', argument " "1"" of type '" "list< jamminglistrot > const *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  result = (bool)list_Sl_jamminglistrot_Sg____nonzero__((list< jamminglistrot > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglistrot___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot___bool__" "', argument " "1"" of type '" "list< jamminglistrot > const *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  result = (bool)list_Sl_jamminglistrot_Sg____bool__((list< jamminglistrot > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  list< jamminglistrot >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglistrot___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot___len__" "', argument " "1"" of type '" "list< jamminglistrot > const *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  result = list_Sl_jamminglistrot_Sg____len__((list< jamminglistrot > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  list< jamminglistrot >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglistrot_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_pop" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  try {
    result = list_Sl_jamminglistrot_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new list< jamminglistrot >::value_type(static_cast< const list< jamminglistrot >::value_type& >(result))), SWIGTYPE_p_jamminglistrot, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  list< jamminglistrot >::difference_type arg2 ;
  list< jamminglistrot >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< jamminglistrot,std::allocator< jamminglistrot > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_jamminglistrot___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot___getslice__" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_jamminglistrot___getslice__" "', argument " "2"" of type '" "list< jamminglistrot >::difference_type""'");
  } 
  arg2 = static_cast< list< jamminglistrot >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_jamminglistrot___getslice__" "', argument " "3"" of type '" "list< jamminglistrot >::difference_type""'");
  } 
  arg3 = static_cast< list< jamminglistrot >::difference_type >(val3);
  try {
    result = (std::list< jamminglistrot,std::allocator< jamminglistrot > > *)list_Sl_jamminglistrot_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  list< jamminglistrot >::difference_type arg2 ;
  list< jamminglistrot >::difference_type arg3 ;
  std::list< jamminglistrot,std::allocator< jamminglistrot > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:_jamminglistrot___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot___setslice__" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_jamminglistrot___setslice__" "', argument " "2"" of type '" "list< jamminglistrot >::difference_type""'");
  } 
  arg2 = static_cast< list< jamminglistrot >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_jamminglistrot___setslice__" "', argument " "3"" of type '" "list< jamminglistrot >::difference_type""'");
  } 
  arg3 = static_cast< list< jamminglistrot >::difference_type >(val3);
  {
    std::list<jamminglistrot,std::allocator< jamminglistrot > > *ptr = (std::list<jamminglistrot,std::allocator< jamminglistrot > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "_jamminglistrot___setslice__" "', argument " "4"" of type '" "std::list< jamminglistrot,std::allocator< jamminglistrot > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_jamminglistrot___setslice__" "', argument " "4"" of type '" "std::list< jamminglistrot,std::allocator< jamminglistrot > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    list_Sl_jamminglistrot_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::list< jamminglistrot,std::allocator< jamminglistrot > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  list< jamminglistrot >::difference_type arg2 ;
  list< jamminglistrot >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_jamminglistrot___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot___setslice__" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_jamminglistrot___setslice__" "', argument " "2"" of type '" "list< jamminglistrot >::difference_type""'");
  } 
  arg2 = static_cast< list< jamminglistrot >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_jamminglistrot___setslice__" "', argument " "3"" of type '" "list< jamminglistrot >::difference_type""'");
  } 
  arg3 = static_cast< list< jamminglistrot >::difference_type >(val3);
  try {
    list_Sl_jamminglistrot_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap__jamminglistrot___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::list<jamminglistrot,std::allocator< jamminglistrot > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap__jamminglistrot___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_jamminglistrot___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    list< jamminglistrot >::__setslice__(list< jamminglistrot >::difference_type,list< jamminglistrot >::difference_type,std::list< jamminglistrot,std::allocator< jamminglistrot > > const &)\n"
    "    list< jamminglistrot >::__setslice__(list< jamminglistrot >::difference_type,list< jamminglistrot >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__jamminglistrot___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  list< jamminglistrot >::difference_type arg2 ;
  list< jamminglistrot >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_jamminglistrot___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot___delslice__" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_jamminglistrot___delslice__" "', argument " "2"" of type '" "list< jamminglistrot >::difference_type""'");
  } 
  arg2 = static_cast< list< jamminglistrot >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_jamminglistrot___delslice__" "', argument " "3"" of type '" "list< jamminglistrot >::difference_type""'");
  } 
  arg3 = static_cast< list< jamminglistrot >::difference_type >(val3);
  try {
    list_Sl_jamminglistrot_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  list< jamminglistrot >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_jamminglistrot___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot___delitem__" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_jamminglistrot___delitem__" "', argument " "2"" of type '" "list< jamminglistrot >::difference_type""'");
  } 
  arg2 = static_cast< list< jamminglistrot >::difference_type >(val2);
  try {
    list_Sl_jamminglistrot_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< jamminglistrot,std::allocator< jamminglistrot > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_jamminglistrot___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot___getitem__" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglistrot___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::list< jamminglistrot,std::allocator< jamminglistrot > > *)list_Sl_jamminglistrot_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::list< jamminglistrot,std::allocator< jamminglistrot > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_jamminglistrot___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot___setitem__" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglistrot___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::list<jamminglistrot,std::allocator< jamminglistrot > > *ptr = (std::list<jamminglistrot,std::allocator< jamminglistrot > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_jamminglistrot___setitem__" "', argument " "3"" of type '" "std::list< jamminglistrot,std::allocator< jamminglistrot > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_jamminglistrot___setitem__" "', argument " "3"" of type '" "std::list< jamminglistrot,std::allocator< jamminglistrot > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    list_Sl_jamminglistrot_Sg____setitem____SWIG_0(arg1,arg2,(std::list< jamminglistrot,std::allocator< jamminglistrot > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_jamminglistrot___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot___setitem__" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglistrot___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    list_Sl_jamminglistrot_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_jamminglistrot___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot___delitem__" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglistrot___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    list_Sl_jamminglistrot_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap__jamminglistrot___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__jamminglistrot___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_jamminglistrot___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    list< jamminglistrot >::__delitem__(list< jamminglistrot >::difference_type)\n"
    "    list< jamminglistrot >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__jamminglistrot___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  list< jamminglistrot >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  list< jamminglistrot >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_jamminglistrot___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot___getitem__" "', argument " "1"" of type '" "list< jamminglistrot > const *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_jamminglistrot___getitem__" "', argument " "2"" of type '" "list< jamminglistrot >::difference_type""'");
  } 
  arg2 = static_cast< list< jamminglistrot >::difference_type >(val2);
  try {
    result = (list< jamminglistrot >::value_type *) &list_Sl_jamminglistrot_Sg____getitem____SWIG_1((list< jamminglistrot > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_jamminglistrot, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap__jamminglistrot___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__jamminglistrot___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_jamminglistrot___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    list< jamminglistrot >::__getitem__(PySliceObject *)\n"
    "    list< jamminglistrot >::__getitem__(list< jamminglistrot >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__jamminglistrot___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  list< jamminglistrot >::difference_type arg2 ;
  list< jamminglistrot >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_jamminglistrot___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot___setitem__" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_jamminglistrot___setitem__" "', argument " "2"" of type '" "list< jamminglistrot >::difference_type""'");
  } 
  arg2 = static_cast< list< jamminglistrot >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_jamminglistrot,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_jamminglistrot___setitem__" "', argument " "3"" of type '" "list< jamminglistrot >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_jamminglistrot___setitem__" "', argument " "3"" of type '" "list< jamminglistrot >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< list< jamminglistrot >::value_type * >(argp3);
  try {
    list_Sl_jamminglistrot_Sg____setitem____SWIG_2(arg1,arg2,(jamminglistrot const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap__jamminglistrot___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::list<jamminglistrot,std::allocator< jamminglistrot > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap__jamminglistrot___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_jamminglistrot, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap__jamminglistrot___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_jamminglistrot___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    list< jamminglistrot >::__setitem__(PySliceObject *,std::list< jamminglistrot,std::allocator< jamminglistrot > > const &)\n"
    "    list< jamminglistrot >::__setitem__(PySliceObject *)\n"
    "    list< jamminglistrot >::__setitem__(list< jamminglistrot >::difference_type,list< jamminglistrot >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  list< jamminglistrot >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_jamminglistrot_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_append" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_jamminglistrot,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_jamminglistrot_append" "', argument " "2"" of type '" "list< jamminglistrot >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_jamminglistrot_append" "', argument " "2"" of type '" "list< jamminglistrot >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< list< jamminglistrot >::value_type * >(argp2);
  list_Sl_jamminglistrot_Sg__append(arg1,(jamminglistrot const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__jamminglistrot__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new__jamminglistrot")) SWIG_fail;
  result = (list< jamminglistrot > *)new list< jamminglistrot >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__jamminglistrot__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< jamminglistrot > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  list< jamminglistrot > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__jamminglistrot",&obj0)) SWIG_fail;
  {
    std::list<jamminglistrot,std::allocator< jamminglistrot > > *ptr = (std::list<jamminglistrot,std::allocator< jamminglistrot > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__jamminglistrot" "', argument " "1"" of type '" "std::list< jamminglistrot > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__jamminglistrot" "', argument " "1"" of type '" "std::list< jamminglistrot > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (list< jamminglistrot > *)new list< jamminglistrot >((std::list< jamminglistrot > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglistrot_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_empty" "', argument " "1"" of type '" "list< jamminglistrot > const *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  result = (bool)((list< jamminglistrot > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  list< jamminglistrot >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglistrot_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_size" "', argument " "1"" of type '" "list< jamminglistrot > const *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  result = ((list< jamminglistrot > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglistrot_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_clear" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  std::list< jamminglistrot > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_jamminglistrot_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_swap" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_jamminglistrot_swap" "', argument " "2"" of type '" "std::list< jamminglistrot > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_jamminglistrot_swap" "', argument " "2"" of type '" "std::list< jamminglistrot > &""'"); 
  }
  arg2 = reinterpret_cast< std::list< jamminglistrot > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< jamminglistrot > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglistrot_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_get_allocator" "', argument " "1"" of type '" "list< jamminglistrot > const *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  result = ((list< jamminglistrot > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new list< jamminglistrot >::allocator_type(static_cast< const list< jamminglistrot >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_jamminglistrot_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  list< jamminglistrot >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglistrot_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_begin" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const list< jamminglistrot >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  list< jamminglistrot >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglistrot_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_end" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const list< jamminglistrot >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  list< jamminglistrot >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglistrot_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_rbegin" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const list< jamminglistrot >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  list< jamminglistrot >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglistrot_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_rend" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const list< jamminglistrot >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__jamminglistrot__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  list< jamminglistrot > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__jamminglistrot",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new__jamminglistrot" "', argument " "1"" of type '" "list< jamminglistrot >::size_type""'");
  } 
  arg1 = static_cast< list< jamminglistrot >::size_type >(val1);
  result = (list< jamminglistrot > *)new list< jamminglistrot >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglistrot_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_pop_back" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  list< jamminglistrot >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_jamminglistrot_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_resize" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_jamminglistrot_resize" "', argument " "2"" of type '" "list< jamminglistrot >::size_type""'");
  } 
  arg2 = static_cast< list< jamminglistrot >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  list< jamminglistrot >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  list< jamminglistrot >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_jamminglistrot_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_erase" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglistrot_erase" "', argument " "2"" of type '" "list< jamminglistrot >::iterator""'");
  } else {
    swig::SwigPyIterator_T<list< jamminglistrot >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<list< jamminglistrot >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglistrot_erase" "', argument " "2"" of type '" "list< jamminglistrot >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const list< jamminglistrot >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  list< jamminglistrot >::iterator arg2 ;
  list< jamminglistrot >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  list< jamminglistrot >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_jamminglistrot_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_erase" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglistrot_erase" "', argument " "2"" of type '" "list< jamminglistrot >::iterator""'");
  } else {
    swig::SwigPyIterator_T<list< jamminglistrot >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<list< jamminglistrot >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglistrot_erase" "', argument " "2"" of type '" "list< jamminglistrot >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglistrot_erase" "', argument " "3"" of type '" "list< jamminglistrot >::iterator""'");
  } else {
    swig::SwigPyIterator_T<list< jamminglistrot >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<list< jamminglistrot >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglistrot_erase" "', argument " "3"" of type '" "list< jamminglistrot >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const list< jamminglistrot >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<list< jamminglistrot >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap__jamminglistrot_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<list< jamminglistrot >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<list< jamminglistrot >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap__jamminglistrot_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_jamminglistrot_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    list< jamminglistrot >::erase(list< jamminglistrot >::iterator)\n"
    "    list< jamminglistrot >::erase(list< jamminglistrot >::iterator,list< jamminglistrot >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new__jamminglistrot__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot >::size_type arg1 ;
  list< jamminglistrot >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  list< jamminglistrot > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new__jamminglistrot",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new__jamminglistrot" "', argument " "1"" of type '" "list< jamminglistrot >::size_type""'");
  } 
  arg1 = static_cast< list< jamminglistrot >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_jamminglistrot,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new__jamminglistrot" "', argument " "2"" of type '" "list< jamminglistrot >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__jamminglistrot" "', argument " "2"" of type '" "list< jamminglistrot >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< list< jamminglistrot >::value_type * >(argp2);
  result = (list< jamminglistrot > *)new list< jamminglistrot >(arg1,(list< jamminglistrot >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__jamminglistrot(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new__jamminglistrot__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new__jamminglistrot__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::list<jamminglistrot,std::allocator< jamminglistrot > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new__jamminglistrot__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_jamminglistrot, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new__jamminglistrot__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new__jamminglistrot'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    list< jamminglistrot >::list()\n"
    "    list< jamminglistrot >::list(std::list< jamminglistrot > const &)\n"
    "    list< jamminglistrot >::list(list< jamminglistrot >::size_type)\n"
    "    list< jamminglistrot >::list(list< jamminglistrot >::size_type,list< jamminglistrot >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  list< jamminglistrot >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_jamminglistrot_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_push_back" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_jamminglistrot,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_jamminglistrot_push_back" "', argument " "2"" of type '" "list< jamminglistrot >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_jamminglistrot_push_back" "', argument " "2"" of type '" "list< jamminglistrot >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< list< jamminglistrot >::value_type * >(argp2);
  (arg1)->push_back((list< jamminglistrot >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  list< jamminglistrot >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglistrot_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_front" "', argument " "1"" of type '" "list< jamminglistrot > const *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  result = (list< jamminglistrot >::value_type *) &((list< jamminglistrot > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_jamminglistrot, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  list< jamminglistrot >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglistrot_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_back" "', argument " "1"" of type '" "list< jamminglistrot > const *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  result = (list< jamminglistrot >::value_type *) &((list< jamminglistrot > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_jamminglistrot, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  list< jamminglistrot >::size_type arg2 ;
  list< jamminglistrot >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_jamminglistrot_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_assign" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_jamminglistrot_assign" "', argument " "2"" of type '" "list< jamminglistrot >::size_type""'");
  } 
  arg2 = static_cast< list< jamminglistrot >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_jamminglistrot,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_jamminglistrot_assign" "', argument " "3"" of type '" "list< jamminglistrot >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_jamminglistrot_assign" "', argument " "3"" of type '" "list< jamminglistrot >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< list< jamminglistrot >::value_type * >(argp3);
  (arg1)->assign(arg2,(list< jamminglistrot >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  list< jamminglistrot >::size_type arg2 ;
  list< jamminglistrot >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_jamminglistrot_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_resize" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_jamminglistrot_resize" "', argument " "2"" of type '" "list< jamminglistrot >::size_type""'");
  } 
  arg2 = static_cast< list< jamminglistrot >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_jamminglistrot,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_jamminglistrot_resize" "', argument " "3"" of type '" "list< jamminglistrot >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_jamminglistrot_resize" "', argument " "3"" of type '" "list< jamminglistrot >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< list< jamminglistrot >::value_type * >(argp3);
  (arg1)->resize(arg2,(list< jamminglistrot >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__jamminglistrot_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_jamminglistrot, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap__jamminglistrot_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_jamminglistrot_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    list< jamminglistrot >::resize(list< jamminglistrot >::size_type)\n"
    "    list< jamminglistrot >::resize(list< jamminglistrot >::size_type,list< jamminglistrot >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  list< jamminglistrot >::iterator arg2 ;
  list< jamminglistrot >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  list< jamminglistrot >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_jamminglistrot_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_insert" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglistrot_insert" "', argument " "2"" of type '" "list< jamminglistrot >::iterator""'");
  } else {
    swig::SwigPyIterator_T<list< jamminglistrot >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<list< jamminglistrot >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglistrot_insert" "', argument " "2"" of type '" "list< jamminglistrot >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_jamminglistrot,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_jamminglistrot_insert" "', argument " "3"" of type '" "list< jamminglistrot >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_jamminglistrot_insert" "', argument " "3"" of type '" "list< jamminglistrot >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< list< jamminglistrot >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(list< jamminglistrot >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const list< jamminglistrot >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  list< jamminglistrot >::iterator arg2 ;
  list< jamminglistrot >::size_type arg3 ;
  list< jamminglistrot >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:_jamminglistrot_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_insert" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglistrot_insert" "', argument " "2"" of type '" "list< jamminglistrot >::iterator""'");
  } else {
    swig::SwigPyIterator_T<list< jamminglistrot >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<list< jamminglistrot >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_jamminglistrot_insert" "', argument " "2"" of type '" "list< jamminglistrot >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_jamminglistrot_insert" "', argument " "3"" of type '" "list< jamminglistrot >::size_type""'");
  } 
  arg3 = static_cast< list< jamminglistrot >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_jamminglistrot,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "_jamminglistrot_insert" "', argument " "4"" of type '" "list< jamminglistrot >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_jamminglistrot_insert" "', argument " "4"" of type '" "list< jamminglistrot >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< list< jamminglistrot >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(list< jamminglistrot >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<list< jamminglistrot >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_jamminglistrot, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap__jamminglistrot_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<list< jamminglistrot >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_jamminglistrot, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap__jamminglistrot_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_jamminglistrot_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    list< jamminglistrot >::insert(list< jamminglistrot >::iterator,list< jamminglistrot >::value_type const &)\n"
    "    list< jamminglistrot >::insert(list< jamminglistrot >::iterator,list< jamminglistrot >::size_type,list< jamminglistrot >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_pop_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglistrot_pop_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_pop_front" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  (arg1)->pop_front();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_push_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  list< jamminglistrot >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_jamminglistrot_push_front",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_push_front" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_jamminglistrot,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_jamminglistrot_push_front" "', argument " "2"" of type '" "list< jamminglistrot >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_jamminglistrot_push_front" "', argument " "2"" of type '" "list< jamminglistrot >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< list< jamminglistrot >::value_type * >(argp2);
  (arg1)->push_front((list< jamminglistrot >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__jamminglistrot_reverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_jamminglistrot_reverse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_jamminglistrot_reverse" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  (arg1)->reverse();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete__jamminglistrot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  list< jamminglistrot > *arg1 = (list< jamminglistrot > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete__jamminglistrot",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete__jamminglistrot" "', argument " "1"" of type '" "list< jamminglistrot > *""'"); 
  }
  arg1 = reinterpret_cast< list< jamminglistrot > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_jamminglistrot_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Pair__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,2 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Pair")) SWIG_fail;
  result = (Numvector< double,2 > *)new Numvector< double,2 >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NumvectorT_double_2_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Pair__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< double,2 > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Numvector< double,2 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Pair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_NvectorT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Pair" "', argument " "1"" of type '" "Nvector< double,2 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Pair" "', argument " "1"" of type '" "Nvector< double,2 > const &""'"); 
  }
  arg1 = reinterpret_cast< Nvector< double,2 > * >(argp1);
  result = (Numvector< double,2 > *)new Numvector< double,2 >((Nvector< double,2 > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NumvectorT_double_2_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Pair__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Numvector< double,2 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Pair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Pair" "', argument " "1"" of type '" "double const [2]""'"); 
  } 
  arg1 = reinterpret_cast< double * >(argp1);
  result = (Numvector< double,2 > *)new Numvector< double,2 >((double const (*))arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NumvectorT_double_2_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Pair(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Pair__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_NvectorT_double_2_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Pair__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Pair__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Pair'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Numvector< double,2 >::Numvector()\n"
    "    Numvector< double,2 >::Numvector(Nvector< double,2 > const &)\n"
    "    Numvector< double,2 >::Numvector(double const [2])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Pair_dot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,2 > *arg1 = (Numvector< double,2 > *) 0 ;
  Numvector< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pair_dot",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pair_dot" "', argument " "1"" of type '" "Numvector< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Numvector< double,2 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NumvectorT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pair_dot" "', argument " "2"" of type '" "Numvector< double,2 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pair_dot" "', argument " "2"" of type '" "Numvector< double,2 > const &""'"); 
  }
  arg2 = reinterpret_cast< Numvector< double,2 > * >(argp2);
  result = (double)((Numvector< double,2 > const *)arg1)->dot((Numvector< double,2 > const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pair_sq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,2 > *arg1 = (Numvector< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pair_sq",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pair_sq" "', argument " "1"" of type '" "Numvector< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Numvector< double,2 > * >(argp1);
  result = (double)((Numvector< double,2 > const *)arg1)->sq();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pair_mag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,2 > *arg1 = (Numvector< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pair_mag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pair_mag" "', argument " "1"" of type '" "Numvector< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Numvector< double,2 > * >(argp1);
  result = (double)((Numvector< double,2 > const *)arg1)->mag();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pair_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,2 > *arg1 = (Numvector< double,2 > *) 0 ;
  Numvector< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pair_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pair_distance" "', argument " "1"" of type '" "Numvector< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Numvector< double,2 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NumvectorT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pair_distance" "', argument " "2"" of type '" "Numvector< double,2 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pair_distance" "', argument " "2"" of type '" "Numvector< double,2 > const &""'"); 
  }
  arg2 = reinterpret_cast< Numvector< double,2 > * >(argp2);
  result = (double)((Numvector< double,2 > const *)arg1)->distance((Numvector< double,2 > const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pair_perpto(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,2 > *arg1 = (Numvector< double,2 > *) 0 ;
  Numvector< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Numvector< double,2 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pair_perpto",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pair_perpto" "', argument " "1"" of type '" "Numvector< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Numvector< double,2 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NumvectorT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pair_perpto" "', argument " "2"" of type '" "Numvector< double,2 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pair_perpto" "', argument " "2"" of type '" "Numvector< double,2 > const &""'"); 
  }
  arg2 = reinterpret_cast< Numvector< double,2 > * >(argp2);
  result = ((Numvector< double,2 > const *)arg1)->perpto((Numvector< double,2 > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Numvector< double,2 >(static_cast< const Numvector< double,2 >& >(result))), SWIGTYPE_p_NumvectorT_double_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pair_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,2 > *arg1 = (Numvector< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pair_normalize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pair_normalize" "', argument " "1"" of type '" "Numvector< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< Numvector< double,2 > * >(argp1);
  (arg1)->normalize();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pair_norm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,2 > *arg1 = (Numvector< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Numvector< double,2 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pair_norm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumvectorT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pair_norm" "', argument " "1"" of type '" "Numvector< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Numvector< double,2 > * >(argp1);
  result = ((Numvector< double,2 > const *)arg1)->norm();
  resultobj = SWIG_NewPointerObj((new Numvector< double,2 >(static_cast< const Numvector< double,2 >& >(result))), SWIGTYPE_p_NumvectorT_double_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Numvector< double,2 > *arg1 = (Numvector< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Pair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumvectorT_double_2_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Pair" "', argument " "1"" of type '" "Numvector< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< Numvector< double,2 > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Pair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NumvectorT_double_2_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_VecPair__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< Vec,2 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VecPair")) SWIG_fail;
  result = (Nvector< Vec,2 > *)new Nvector< Vec,2 >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NvectorT_Vec_2_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VecPair__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< Vec,2 > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Nvector< Vec,2 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VecPair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_NvectorT_Vec_2_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VecPair" "', argument " "1"" of type '" "Nvector< Vec,2 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VecPair" "', argument " "1"" of type '" "Nvector< Vec,2 > const &""'"); 
  }
  arg1 = reinterpret_cast< Nvector< Vec,2 > * >(argp1);
  result = (Nvector< Vec,2 > *)new Nvector< Vec,2 >((Nvector< Vec,2 > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NvectorT_Vec_2_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VecPair__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec *arg1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Nvector< Vec,2 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VecPair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VecPair" "', argument " "1"" of type '" "Vec const [2]""'"); 
  } 
  arg1 = reinterpret_cast< Vec * >(argp1);
  result = (Nvector< Vec,2 > *)new Nvector< Vec,2 >((Vec const (*))arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NvectorT_Vec_2_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VecPair(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VecPair__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_NvectorT_Vec_2_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VecPair__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vector2T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VecPair__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VecPair'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Nvector< Vec,2 >::Nvector()\n"
    "    Nvector< Vec,2 >::Nvector(Nvector< Vec,2 > const &)\n"
    "    Nvector< Vec,2 >::Nvector(Vec const [2])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VecPair_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< Vec,2 > *arg1 = (Nvector< Vec,2 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VecPair_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_Vec_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecPair_get" "', argument " "1"" of type '" "Nvector< Vec,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< Vec,2 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecPair_get" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (Vec *) &((Nvector< Vec,2 > const *)arg1)->get(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VecPair_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< Vec,2 > *arg1 = (Nvector< Vec,2 > *) 0 ;
  unsigned int arg2 ;
  Vec arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VecPair_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_Vec_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecPair_set" "', argument " "1"" of type '" "Nvector< Vec,2 > *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< Vec,2 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecPair_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecPair_set" "', argument " "3"" of type '" "Vec const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecPair_set" "', argument " "3"" of type '" "Vec const""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->set(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VecPair_len(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< Vec,2 > *arg1 = (Nvector< Vec,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VecPair_len",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_Vec_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecPair_len" "', argument " "1"" of type '" "Nvector< Vec,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< Vec,2 > * >(argp1);
  result = (unsigned int)((Nvector< Vec,2 > const *)arg1)->len();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VecPair___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< Vec,2 > *arg1 = (Nvector< Vec,2 > *) 0 ;
  Nvector< Vec,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Nvector< Vec,2 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VecPair___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_Vec_2_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecPair___iadd__" "', argument " "1"" of type '" "Nvector< Vec,2 > *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< Vec,2 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NvectorT_Vec_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecPair___iadd__" "', argument " "2"" of type '" "Nvector< Vec,2 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecPair___iadd__" "', argument " "2"" of type '" "Nvector< Vec,2 > const &""'"); 
  }
  arg2 = reinterpret_cast< Nvector< Vec,2 > * >(argp2);
  result = (Nvector< Vec,2 > *) &(arg1)->operator +=((Nvector< Vec,2 > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NvectorT_Vec_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VecPair___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< Vec,2 > *arg1 = (Nvector< Vec,2 > *) 0 ;
  Nvector< Vec,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Nvector< Vec,2 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VecPair___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_Vec_2_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecPair___isub__" "', argument " "1"" of type '" "Nvector< Vec,2 > *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< Vec,2 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NvectorT_Vec_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecPair___isub__" "', argument " "2"" of type '" "Nvector< Vec,2 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecPair___isub__" "', argument " "2"" of type '" "Nvector< Vec,2 > const &""'"); 
  }
  arg2 = reinterpret_cast< Nvector< Vec,2 > * >(argp2);
  result = (Nvector< Vec,2 > *) &(arg1)->operator -=((Nvector< Vec,2 > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NvectorT_Vec_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VecPair___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< Vec,2 > *arg1 = (Nvector< Vec,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Nvector< Vec,2 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VecPair___neg__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_Vec_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecPair___neg__" "', argument " "1"" of type '" "Nvector< Vec,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< Vec,2 > * >(argp1);
  result = ((Nvector< Vec,2 > const *)arg1)->operator -();
  resultobj = SWIG_NewPointerObj((new Nvector< Vec,2 >(static_cast< const Nvector< Vec,2 >& >(result))), SWIGTYPE_p_NvectorT_Vec_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VecPair___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< Vec,2 > *arg1 = (Nvector< Vec,2 > *) 0 ;
  Nvector< Vec,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Nvector< Vec,2 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VecPair___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_Vec_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecPair___add__" "', argument " "1"" of type '" "Nvector< Vec,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< Vec,2 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NvectorT_Vec_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecPair___add__" "', argument " "2"" of type '" "Nvector< Vec,2 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecPair___add__" "', argument " "2"" of type '" "Nvector< Vec,2 > const &""'"); 
  }
  arg2 = reinterpret_cast< Nvector< Vec,2 > * >(argp2);
  result = ((Nvector< Vec,2 > const *)arg1)->operator +((Nvector< Vec,2 > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Nvector< Vec,2 >(static_cast< const Nvector< Vec,2 >& >(result))), SWIGTYPE_p_NvectorT_Vec_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VecPair___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< Vec,2 > *arg1 = (Nvector< Vec,2 > *) 0 ;
  Nvector< Vec,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Nvector< Vec,2 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VecPair___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_Vec_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecPair___sub__" "', argument " "1"" of type '" "Nvector< Vec,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< Vec,2 > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NvectorT_Vec_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecPair___sub__" "', argument " "2"" of type '" "Nvector< Vec,2 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecPair___sub__" "', argument " "2"" of type '" "Nvector< Vec,2 > const &""'"); 
  }
  arg2 = reinterpret_cast< Nvector< Vec,2 > * >(argp2);
  result = ((Nvector< Vec,2 > const *)arg1)->operator -((Nvector< Vec,2 > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Nvector< Vec,2 >(static_cast< const Nvector< Vec,2 >& >(result))), SWIGTYPE_p_NvectorT_Vec_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VecPair_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< Vec,2 > *arg1 = (Nvector< Vec,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VecPair_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_Vec_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecPair_begin" "', argument " "1"" of type '" "Nvector< Vec,2 > *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< Vec,2 > * >(argp1);
  result = (Vec *)(arg1)->begin();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VecPair_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< Vec,2 > *arg1 = (Nvector< Vec,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VecPair_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_Vec_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecPair_end" "', argument " "1"" of type '" "Nvector< Vec,2 > *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< Vec,2 > * >(argp1);
  result = (Vec *)(arg1)->end();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VecPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< Vec,2 > *arg1 = (Nvector< Vec,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VecPair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_Vec_2_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VecPair" "', argument " "1"" of type '" "Nvector< Vec,2 > *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< Vec,2 > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VecPair___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< Vec,2 > *arg1 = (Nvector< Vec,2 > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Nvector< Vec,2 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VecPair___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_Vec_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecPair___mul__" "', argument " "1"" of type '" "Nvector< Vec,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< Vec,2 > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecPair___mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((Nvector< Vec,2 > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR operator *(arg2);
  resultobj = SWIG_NewPointerObj((new Nvector< Vec,2 >(static_cast< const Nvector< Vec,2 >& >(result))), SWIGTYPE_p_NvectorT_Vec_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VecPair___div__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< Vec,2 > *arg1 = (Nvector< Vec,2 > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Nvector< Vec,2 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VecPair___div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_Vec_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecPair___div__" "', argument " "1"" of type '" "Nvector< Vec,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< Vec,2 > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecPair___div__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((Nvector< Vec,2 > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR operator /(arg2);
  resultobj = SWIG_NewPointerObj((new Nvector< Vec,2 >(static_cast< const Nvector< Vec,2 >& >(result))), SWIGTYPE_p_NvectorT_Vec_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VecPair___truediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< Vec,2 > *arg1 = (Nvector< Vec,2 > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Nvector< Vec,2 > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VecPair___truediv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_Vec_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecPair___truediv__" "', argument " "1"" of type '" "Nvector< Vec,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< Vec,2 > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecPair___truediv__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = Nvector_Sl_Vec_Sc_2_Sg____truediv__((Nvector< Vec,2 > const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Nvector< Vec,2 >(static_cast< const Nvector< Vec,2 >& >(result))), SWIGTYPE_p_NvectorT_Vec_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VecPair___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< Vec,2 > *arg1 = (Nvector< Vec,2 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VecPair___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_Vec_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecPair___getitem__" "', argument " "1"" of type '" "Nvector< Vec,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< Vec,2 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecPair___getitem__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = Nvector_Sl_Vec_Sc_2_Sg____getitem__((Nvector< Vec,2 > const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VecPair___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< Vec,2 > *arg1 = (Nvector< Vec,2 > *) 0 ;
  unsigned int arg2 ;
  Vec arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VecPair___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_Vec_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecPair___setitem__" "', argument " "1"" of type '" "Nvector< Vec,2 > *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< Vec,2 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecPair___setitem__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecPair___setitem__" "', argument " "3"" of type '" "Vec const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecPair___setitem__" "', argument " "3"" of type '" "Vec const""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  Nvector_Sl_Vec_Sc_2_Sg____setitem__(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VecPair___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nvector< Vec,2 > *arg1 = (Nvector< Vec,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VecPair___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NvectorT_Vec_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecPair___len__" "', argument " "1"" of type '" "Nvector< Vec,2 > *""'"); 
  }
  arg1 = reinterpret_cast< Nvector< Vec,2 > * >(argp1);
  result = (unsigned int)Nvector_Sl_Vec_Sc_2_Sg____len__(arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VecPair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NvectorT_Vec_2_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new__atomarray2__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atom *,2 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new__atomarray2")) SWIG_fail;
  result = (array< atom *,2 > *)new array< atom *,2 >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_arrayT_atom_p_2_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__atomarray2__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atom *,2 > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  array< atom *,2 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__atomarray2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_arrayT_atom_p_2_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__atomarray2" "', argument " "1"" of type '" "array< atom *,2 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__atomarray2" "', argument " "1"" of type '" "array< atom *,2 > const &""'"); 
  }
  arg1 = reinterpret_cast< array< atom *,2 > * >(argp1);
  result = (array< atom *,2 > *)new array< atom *,2 >((array< atom *,2 > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_arrayT_atom_p_2_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__atomarray2__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom **arg1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  array< atom *,2 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__atomarray2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__atomarray2" "', argument " "1"" of type '" "atom *const [2]""'"); 
  } 
  arg1 = reinterpret_cast< atom ** >(argp1);
  result = (array< atom *,2 > *)new array< atom *,2 >((atom *const (*))arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_arrayT_atom_p_2_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__atomarray2(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new__atomarray2__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_arrayT_atom_p_2_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new__atomarray2__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_p_atom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new__atomarray2__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new__atomarray2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    array< atom *,2 >::array()\n"
    "    array< atom *,2 >::array(array< atom *,2 > const &)\n"
    "    array< atom *,2 >::array(atom *const [2])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__atomarray2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atom *,2 > *arg1 = (array< atom *,2 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  atom **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_atomarray2_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_arrayT_atom_p_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_atomarray2_get" "', argument " "1"" of type '" "array< atom *,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< array< atom *,2 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_atomarray2_get" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (atom **) &((array< atom *,2 > const *)arg1)->get(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__atomarray2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atom *,2 > *arg1 = (array< atom *,2 > *) 0 ;
  unsigned int arg2 ;
  atom *arg3 = (atom *) (atom *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_atomarray2_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_arrayT_atom_p_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_atomarray2_set" "', argument " "1"" of type '" "array< atom *,2 > *""'"); 
  }
  arg1 = reinterpret_cast< array< atom *,2 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_atomarray2_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_atomarray2_set" "', argument " "3"" of type '" "atom *const""'"); 
  }
  arg3 = reinterpret_cast< atom * >(argp3);
  (arg1)->set(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__atomarray2_len(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atom *,2 > *arg1 = (array< atom *,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_atomarray2_len",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_arrayT_atom_p_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_atomarray2_len" "', argument " "1"" of type '" "array< atom *,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< array< atom *,2 > * >(argp1);
  result = (unsigned int)((array< atom *,2 > const *)arg1)->len();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__atomarray2_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atom *,2 > *arg1 = (array< atom *,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atom **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_atomarray2_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_arrayT_atom_p_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_atomarray2_begin" "', argument " "1"" of type '" "array< atom *,2 > *""'"); 
  }
  arg1 = reinterpret_cast< array< atom *,2 > * >(argp1);
  result = (atom **)(arg1)->begin();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__atomarray2_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atom *,2 > *arg1 = (array< atom *,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atom **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_atomarray2_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_arrayT_atom_p_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_atomarray2_end" "', argument " "1"" of type '" "array< atom *,2 > *""'"); 
  }
  arg1 = reinterpret_cast< array< atom *,2 > * >(argp1);
  result = (atom **)(arg1)->end();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete__atomarray2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atom *,2 > *arg1 = (array< atom *,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete__atomarray2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_arrayT_atom_p_2_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete__atomarray2" "', argument " "1"" of type '" "array< atom *,2 > *""'"); 
  }
  arg1 = reinterpret_cast< array< atom *,2 > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_atomarray2_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_arrayT_atom_p_2_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new__idarray2__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atomid,2 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new__idarray2")) SWIG_fail;
  result = (array< atomid,2 > *)new array< atomid,2 >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_arrayT_atomid_2_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__idarray2__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atomid,2 > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  array< atomid,2 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__idarray2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_arrayT_atomid_2_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__idarray2" "', argument " "1"" of type '" "array< atomid,2 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__idarray2" "', argument " "1"" of type '" "array< atomid,2 > const &""'"); 
  }
  arg1 = reinterpret_cast< array< atomid,2 > * >(argp1);
  result = (array< atomid,2 > *)new array< atomid,2 >((array< atomid,2 > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_arrayT_atomid_2_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__idarray2__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomid *arg1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  array< atomid,2 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__idarray2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__idarray2" "', argument " "1"" of type '" "atomid const [2]""'"); 
  } 
  arg1 = reinterpret_cast< atomid * >(argp1);
  result = (array< atomid,2 > *)new array< atomid,2 >((atomid const (*))arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_arrayT_atomid_2_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__idarray2(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new__idarray2__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_arrayT_atomid_2_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new__idarray2__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atomid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new__idarray2__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new__idarray2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    array< atomid,2 >::array()\n"
    "    array< atomid,2 >::array(array< atomid,2 > const &)\n"
    "    array< atomid,2 >::array(atomid const [2])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__idarray2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atomid,2 > *arg1 = (array< atomid,2 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_idarray2_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_arrayT_atomid_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_idarray2_get" "', argument " "1"" of type '" "array< atomid,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< array< atomid,2 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_idarray2_get" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (atomid *) &((array< atomid,2 > const *)arg1)->get(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__idarray2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atomid,2 > *arg1 = (array< atomid,2 > *) 0 ;
  unsigned int arg2 ;
  atomid arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_idarray2_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_arrayT_atomid_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_idarray2_set" "', argument " "1"" of type '" "array< atomid,2 > *""'"); 
  }
  arg1 = reinterpret_cast< array< atomid,2 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_idarray2_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_idarray2_set" "', argument " "3"" of type '" "atomid const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_idarray2_set" "', argument " "3"" of type '" "atomid const""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->set(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__idarray2_len(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atomid,2 > *arg1 = (array< atomid,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_idarray2_len",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_arrayT_atomid_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_idarray2_len" "', argument " "1"" of type '" "array< atomid,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< array< atomid,2 > * >(argp1);
  result = (unsigned int)((array< atomid,2 > const *)arg1)->len();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__idarray2_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atomid,2 > *arg1 = (array< atomid,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_idarray2_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_arrayT_atomid_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_idarray2_begin" "', argument " "1"" of type '" "array< atomid,2 > *""'"); 
  }
  arg1 = reinterpret_cast< array< atomid,2 > * >(argp1);
  result = (atomid *)(arg1)->begin();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__idarray2_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atomid,2 > *arg1 = (array< atomid,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_idarray2_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_arrayT_atomid_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_idarray2_end" "', argument " "1"" of type '" "array< atomid,2 > *""'"); 
  }
  arg1 = reinterpret_cast< array< atomid,2 > * >(argp1);
  result = (atomid *)(arg1)->end();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete__idarray2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atomid,2 > *arg1 = (array< atomid,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete__idarray2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_arrayT_atomid_2_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete__idarray2" "', argument " "1"" of type '" "array< atomid,2 > *""'"); 
  }
  arg1 = reinterpret_cast< array< atomid,2 > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_idarray2_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_arrayT_atomid_2_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new__atomarray3__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atom *,3 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new__atomarray3")) SWIG_fail;
  result = (array< atom *,3 > *)new array< atom *,3 >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_arrayT_atom_p_3_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__atomarray3__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atom *,3 > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  array< atom *,3 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__atomarray3",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_arrayT_atom_p_3_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__atomarray3" "', argument " "1"" of type '" "array< atom *,3 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__atomarray3" "', argument " "1"" of type '" "array< atom *,3 > const &""'"); 
  }
  arg1 = reinterpret_cast< array< atom *,3 > * >(argp1);
  result = (array< atom *,3 > *)new array< atom *,3 >((array< atom *,3 > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_arrayT_atom_p_3_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__atomarray3__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom **arg1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  array< atom *,3 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__atomarray3",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__atomarray3" "', argument " "1"" of type '" "atom *const [3]""'"); 
  } 
  arg1 = reinterpret_cast< atom ** >(argp1);
  result = (array< atom *,3 > *)new array< atom *,3 >((atom *const (*))arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_arrayT_atom_p_3_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__atomarray3(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new__atomarray3__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_arrayT_atom_p_3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new__atomarray3__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_p_atom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new__atomarray3__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new__atomarray3'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    array< atom *,3 >::array()\n"
    "    array< atom *,3 >::array(array< atom *,3 > const &)\n"
    "    array< atom *,3 >::array(atom *const [3])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__atomarray3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atom *,3 > *arg1 = (array< atom *,3 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  atom **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_atomarray3_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_arrayT_atom_p_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_atomarray3_get" "', argument " "1"" of type '" "array< atom *,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< array< atom *,3 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_atomarray3_get" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (atom **) &((array< atom *,3 > const *)arg1)->get(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__atomarray3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atom *,3 > *arg1 = (array< atom *,3 > *) 0 ;
  unsigned int arg2 ;
  atom *arg3 = (atom *) (atom *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_atomarray3_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_arrayT_atom_p_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_atomarray3_set" "', argument " "1"" of type '" "array< atom *,3 > *""'"); 
  }
  arg1 = reinterpret_cast< array< atom *,3 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_atomarray3_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_atomarray3_set" "', argument " "3"" of type '" "atom *const""'"); 
  }
  arg3 = reinterpret_cast< atom * >(argp3);
  (arg1)->set(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__atomarray3_len(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atom *,3 > *arg1 = (array< atom *,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_atomarray3_len",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_arrayT_atom_p_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_atomarray3_len" "', argument " "1"" of type '" "array< atom *,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< array< atom *,3 > * >(argp1);
  result = (unsigned int)((array< atom *,3 > const *)arg1)->len();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__atomarray3_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atom *,3 > *arg1 = (array< atom *,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atom **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_atomarray3_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_arrayT_atom_p_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_atomarray3_begin" "', argument " "1"" of type '" "array< atom *,3 > *""'"); 
  }
  arg1 = reinterpret_cast< array< atom *,3 > * >(argp1);
  result = (atom **)(arg1)->begin();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__atomarray3_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atom *,3 > *arg1 = (array< atom *,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atom **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_atomarray3_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_arrayT_atom_p_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_atomarray3_end" "', argument " "1"" of type '" "array< atom *,3 > *""'"); 
  }
  arg1 = reinterpret_cast< array< atom *,3 > * >(argp1);
  result = (atom **)(arg1)->end();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete__atomarray3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atom *,3 > *arg1 = (array< atom *,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete__atomarray3",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_arrayT_atom_p_3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete__atomarray3" "', argument " "1"" of type '" "array< atom *,3 > *""'"); 
  }
  arg1 = reinterpret_cast< array< atom *,3 > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_atomarray3_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_arrayT_atom_p_3_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new__atomarray4__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atom *,4 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new__atomarray4")) SWIG_fail;
  result = (array< atom *,4 > *)new array< atom *,4 >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_arrayT_atom_p_4_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__atomarray4__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atom *,4 > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  array< atom *,4 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__atomarray4",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_arrayT_atom_p_4_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__atomarray4" "', argument " "1"" of type '" "array< atom *,4 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__atomarray4" "', argument " "1"" of type '" "array< atom *,4 > const &""'"); 
  }
  arg1 = reinterpret_cast< array< atom *,4 > * >(argp1);
  result = (array< atom *,4 > *)new array< atom *,4 >((array< atom *,4 > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_arrayT_atom_p_4_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__atomarray4__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom **arg1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  array< atom *,4 > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__atomarray4",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__atomarray4" "', argument " "1"" of type '" "atom *const [4]""'"); 
  } 
  arg1 = reinterpret_cast< atom ** >(argp1);
  result = (array< atom *,4 > *)new array< atom *,4 >((atom *const (*))arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_arrayT_atom_p_4_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__atomarray4(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new__atomarray4__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_arrayT_atom_p_4_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new__atomarray4__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_p_atom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new__atomarray4__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new__atomarray4'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    array< atom *,4 >::array()\n"
    "    array< atom *,4 >::array(array< atom *,4 > const &)\n"
    "    array< atom *,4 >::array(atom *const [4])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__atomarray4_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atom *,4 > *arg1 = (array< atom *,4 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  atom **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_atomarray4_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_arrayT_atom_p_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_atomarray4_get" "', argument " "1"" of type '" "array< atom *,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< array< atom *,4 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_atomarray4_get" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (atom **) &((array< atom *,4 > const *)arg1)->get(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__atomarray4_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atom *,4 > *arg1 = (array< atom *,4 > *) 0 ;
  unsigned int arg2 ;
  atom *arg3 = (atom *) (atom *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_atomarray4_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_arrayT_atom_p_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_atomarray4_set" "', argument " "1"" of type '" "array< atom *,4 > *""'"); 
  }
  arg1 = reinterpret_cast< array< atom *,4 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_atomarray4_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_atomarray4_set" "', argument " "3"" of type '" "atom *const""'"); 
  }
  arg3 = reinterpret_cast< atom * >(argp3);
  (arg1)->set(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__atomarray4_len(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atom *,4 > *arg1 = (array< atom *,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_atomarray4_len",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_arrayT_atom_p_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_atomarray4_len" "', argument " "1"" of type '" "array< atom *,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< array< atom *,4 > * >(argp1);
  result = (unsigned int)((array< atom *,4 > const *)arg1)->len();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__atomarray4_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atom *,4 > *arg1 = (array< atom *,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atom **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_atomarray4_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_arrayT_atom_p_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_atomarray4_begin" "', argument " "1"" of type '" "array< atom *,4 > *""'"); 
  }
  arg1 = reinterpret_cast< array< atom *,4 > * >(argp1);
  result = (atom **)(arg1)->begin();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__atomarray4_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atom *,4 > *arg1 = (array< atom *,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atom **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_atomarray4_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_arrayT_atom_p_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_atomarray4_end" "', argument " "1"" of type '" "array< atom *,4 > *""'"); 
  }
  arg1 = reinterpret_cast< array< atom *,4 > * >(argp1);
  result = (atom **)(arg1)->end();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete__atomarray4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  array< atom *,4 > *arg1 = (array< atom *,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete__atomarray4",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_arrayT_atom_p_4_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete__atomarray4" "', argument " "1"" of type '" "array< atom *,4 > *""'"); 
  }
  arg1 = reinterpret_cast< array< atom *,4 > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_atomarray4_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_arrayT_atom_p_4_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_fvector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:fvector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector_iterator" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  result = (swig::SwigPyIterator *)vector_Sl_double_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fvector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector___nonzero__" "', argument " "1"" of type '" "vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  result = (bool)vector_Sl_double_Sg____nonzero__((vector< double > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fvector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector___bool__" "', argument " "1"" of type '" "vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  result = (bool)vector_Sl_double_Sg____bool__((vector< double > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fvector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector___len__" "', argument " "1"" of type '" "vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  result = vector_Sl_double_Sg____len__((vector< double > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< double >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fvector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector_pop" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  try {
    result = (vector< double >::value_type)vector_Sl_double_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  vector< double >::difference_type arg2 ;
  vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fvector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector___getslice__" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fvector___getslice__" "', argument " "2"" of type '" "vector< double >::difference_type""'");
  } 
  arg2 = static_cast< vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fvector___getslice__" "', argument " "3"" of type '" "vector< double >::difference_type""'");
  } 
  arg3 = static_cast< vector< double >::difference_type >(val3);
  try {
    result = (std::vector< double,std::allocator< double > > *)vector_Sl_double_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  vector< double >::difference_type arg2 ;
  vector< double >::difference_type arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fvector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector___setslice__" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fvector___setslice__" "', argument " "2"" of type '" "vector< double >::difference_type""'");
  } 
  arg2 = static_cast< vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fvector___setslice__" "', argument " "3"" of type '" "vector< double >::difference_type""'");
  } 
  arg3 = static_cast< vector< double >::difference_type >(val3);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fvector___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fvector___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    vector_Sl_double_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  vector< double >::difference_type arg2 ;
  vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fvector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector___setslice__" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fvector___setslice__" "', argument " "2"" of type '" "vector< double >::difference_type""'");
  } 
  arg2 = static_cast< vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fvector___setslice__" "', argument " "3"" of type '" "vector< double >::difference_type""'");
  } 
  arg3 = static_cast< vector< double >::difference_type >(val3);
  try {
    vector_Sl_double_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_fvector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_fvector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fvector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< double >::__setslice__(vector< double >::difference_type,vector< double >::difference_type,std::vector< double,std::allocator< double > > const &)\n"
    "    vector< double >::__setslice__(vector< double >::difference_type,vector< double >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fvector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  vector< double >::difference_type arg2 ;
  vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fvector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector___delslice__" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fvector___delslice__" "', argument " "2"" of type '" "vector< double >::difference_type""'");
  } 
  arg2 = static_cast< vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fvector___delslice__" "', argument " "3"" of type '" "vector< double >::difference_type""'");
  } 
  arg3 = static_cast< vector< double >::difference_type >(val3);
  try {
    vector_Sl_double_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fvector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector___delitem__" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fvector___delitem__" "', argument " "2"" of type '" "vector< double >::difference_type""'");
  } 
  arg2 = static_cast< vector< double >::difference_type >(val2);
  try {
    vector_Sl_double_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fvector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector___getitem__" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "fvector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< double,std::allocator< double > > *)vector_Sl_double_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fvector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector___setitem__" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "fvector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fvector___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fvector___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    vector_Sl_double_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fvector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector___setitem__" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "fvector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_double_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fvector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector___delitem__" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "fvector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_double_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_fvector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_fvector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fvector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< double >::__delitem__(vector< double >::difference_type)\n"
    "    vector< double >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fvector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fvector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector___getitem__" "', argument " "1"" of type '" "vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fvector___getitem__" "', argument " "2"" of type '" "vector< double >::difference_type""'");
  } 
  arg2 = static_cast< vector< double >::difference_type >(val2);
  try {
    result = (vector< double >::value_type *) &vector_Sl_double_Sg____getitem____SWIG_1((vector< double > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_fvector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_fvector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fvector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< double >::__getitem__(PySliceObject *)\n"
    "    vector< double >::__getitem__(vector< double >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fvector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  vector< double >::difference_type arg2 ;
  vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fvector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector___setitem__" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fvector___setitem__" "', argument " "2"" of type '" "vector< double >::difference_type""'");
  } 
  arg2 = static_cast< vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fvector___setitem__" "', argument " "3"" of type '" "vector< double >::value_type""'");
  } 
  temp3 = static_cast< vector< double >::value_type >(val3);
  arg3 = &temp3;
  try {
    vector_Sl_double_Sg____setitem____SWIG_2(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_fvector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_fvector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_fvector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fvector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< double >::__setitem__(PySliceObject *,std::vector< double,std::allocator< double > > const &)\n"
    "    vector< double >::__setitem__(PySliceObject *)\n"
    "    vector< double >::__setitem__(vector< double >::difference_type,vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fvector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fvector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector_append" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fvector_append" "', argument " "2"" of type '" "vector< double >::value_type""'");
  } 
  temp2 = static_cast< vector< double >::value_type >(val2);
  arg2 = &temp2;
  vector_Sl_double_Sg__append(arg1,(double const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fvector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_fvector")) SWIG_fail;
  result = (vector< double > *)new vector< double >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fvector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_fvector",&obj0)) SWIG_fail;
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_fvector" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_fvector" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (vector< double > *)new vector< double >((std::vector< double > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fvector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector_empty" "', argument " "1"" of type '" "vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  result = (bool)((vector< double > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fvector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector_size" "', argument " "1"" of type '" "vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  result = ((vector< double > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fvector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector_clear" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fvector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector_swap" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fvector_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fvector_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fvector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector_get_allocator" "', argument " "1"" of type '" "vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  result = ((vector< double > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new vector< double >::allocator_type(static_cast< const vector< double >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fvector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector_begin" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fvector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector_end" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< double >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fvector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector_rbegin" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< double >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fvector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector_rend" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fvector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_fvector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_fvector" "', argument " "1"" of type '" "vector< double >::size_type""'");
  } 
  arg1 = static_cast< vector< double >::size_type >(val1);
  result = (vector< double > *)new vector< double >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fvector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector_pop_back" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fvector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector_resize" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fvector_resize" "', argument " "2"" of type '" "vector< double >::size_type""'");
  } 
  arg2 = static_cast< vector< double >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  vector< double >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fvector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector_erase" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "fvector_erase" "', argument " "2"" of type '" "vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "fvector_erase" "', argument " "2"" of type '" "vector< double >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  vector< double >::iterator arg2 ;
  vector< double >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fvector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector_erase" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "fvector_erase" "', argument " "2"" of type '" "vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "fvector_erase" "', argument " "2"" of type '" "vector< double >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "fvector_erase" "', argument " "3"" of type '" "vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< double >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "fvector_erase" "', argument " "3"" of type '" "vector< double >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_fvector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< double >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_fvector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fvector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< double >::erase(vector< double >::iterator)\n"
    "    vector< double >::erase(vector< double >::iterator,vector< double >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_fvector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double >::size_type arg1 ;
  vector< double >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_fvector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_fvector" "', argument " "1"" of type '" "vector< double >::size_type""'");
  } 
  arg1 = static_cast< vector< double >::size_type >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_fvector" "', argument " "2"" of type '" "vector< double >::value_type""'");
  } 
  temp2 = static_cast< vector< double >::value_type >(val2);
  arg2 = &temp2;
  result = (vector< double > *)new vector< double >(arg1,(vector< double >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fvector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_fvector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_fvector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_fvector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_fvector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_fvector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< double >::vector()\n"
    "    vector< double >::vector(std::vector< double > const &)\n"
    "    vector< double >::vector(vector< double >::size_type)\n"
    "    vector< double >::vector(vector< double >::size_type,vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fvector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fvector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector_push_back" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fvector_push_back" "', argument " "2"" of type '" "vector< double >::value_type""'");
  } 
  temp2 = static_cast< vector< double >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((vector< double >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fvector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector_front" "', argument " "1"" of type '" "vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  result = (vector< double >::value_type *) &((vector< double > const *)arg1)->front();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fvector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector_back" "', argument " "1"" of type '" "vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  result = (vector< double >::value_type *) &((vector< double > const *)arg1)->back();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  vector< double >::size_type arg2 ;
  vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fvector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector_assign" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fvector_assign" "', argument " "2"" of type '" "vector< double >::size_type""'");
  } 
  arg2 = static_cast< vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fvector_assign" "', argument " "3"" of type '" "vector< double >::value_type""'");
  } 
  temp3 = static_cast< vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(vector< double >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  vector< double >::size_type arg2 ;
  vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fvector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector_resize" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fvector_resize" "', argument " "2"" of type '" "vector< double >::size_type""'");
  } 
  arg2 = static_cast< vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fvector_resize" "', argument " "3"" of type '" "vector< double >::value_type""'");
  } 
  temp3 = static_cast< vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(vector< double >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_fvector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_fvector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fvector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< double >::resize(vector< double >::size_type)\n"
    "    vector< double >::resize(vector< double >::size_type,vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fvector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  vector< double >::iterator arg2 ;
  vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fvector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector_insert" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "fvector_insert" "', argument " "2"" of type '" "vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "fvector_insert" "', argument " "2"" of type '" "vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fvector_insert" "', argument " "3"" of type '" "vector< double >::value_type""'");
  } 
  temp3 = static_cast< vector< double >::value_type >(val3);
  arg3 = &temp3;
  result = (arg1)->insert(arg2,(vector< double >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  vector< double >::iterator arg2 ;
  vector< double >::size_type arg3 ;
  vector< double >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  vector< double >::value_type temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fvector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector_insert" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "fvector_insert" "', argument " "2"" of type '" "vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "fvector_insert" "', argument " "2"" of type '" "vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fvector_insert" "', argument " "3"" of type '" "vector< double >::size_type""'");
  } 
  arg3 = static_cast< vector< double >::size_type >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fvector_insert" "', argument " "4"" of type '" "vector< double >::value_type""'");
  } 
  temp4 = static_cast< vector< double >::value_type >(val4);
  arg4 = &temp4;
  (arg1)->insert(arg2,arg3,(vector< double >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_fvector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_fvector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fvector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< double >::insert(vector< double >::iterator,vector< double >::value_type const &)\n"
    "    vector< double >::insert(vector< double >::iterator,vector< double >::size_type,vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fvector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fvector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector_reserve" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fvector_reserve" "', argument " "2"" of type '" "vector< double >::size_type""'");
  } 
  arg2 = static_cast< vector< double >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fvector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fvector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fvector_capacity" "', argument " "1"" of type '" "vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  result = ((vector< double > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_fvector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< double > *arg1 = (vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_fvector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_fvector" "', argument " "1"" of type '" "vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< vector< double > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *fvector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_avector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:avector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector_iterator" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  result = (swig::SwigPyIterator *)vector_Sl_atomgroup_Sm__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:avector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector___nonzero__" "', argument " "1"" of type '" "vector< atomgroup * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  result = (bool)vector_Sl_atomgroup_Sm__Sg____nonzero__((vector< atomgroup * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:avector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector___bool__" "', argument " "1"" of type '" "vector< atomgroup * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  result = (bool)vector_Sl_atomgroup_Sm__Sg____bool__((vector< atomgroup * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< atomgroup * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:avector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector___len__" "', argument " "1"" of type '" "vector< atomgroup * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  result = vector_Sl_atomgroup_Sm__Sg____len__((vector< atomgroup * > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< atomgroup * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:avector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector_pop" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  try {
    result = (vector< atomgroup * >::value_type)vector_Sl_atomgroup_Sm__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomgroup, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  vector< atomgroup * >::difference_type arg2 ;
  vector< atomgroup * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< atomgroup *,std::allocator< atomgroup * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:avector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector___getslice__" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "avector___getslice__" "', argument " "2"" of type '" "vector< atomgroup * >::difference_type""'");
  } 
  arg2 = static_cast< vector< atomgroup * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "avector___getslice__" "', argument " "3"" of type '" "vector< atomgroup * >::difference_type""'");
  } 
  arg3 = static_cast< vector< atomgroup * >::difference_type >(val3);
  try {
    result = (std::vector< atomgroup *,std::allocator< atomgroup * > > *)vector_Sl_atomgroup_Sm__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  vector< atomgroup * >::difference_type arg2 ;
  vector< atomgroup * >::difference_type arg3 ;
  std::vector< atomgroup *,std::allocator< atomgroup * > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:avector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector___setslice__" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "avector___setslice__" "', argument " "2"" of type '" "vector< atomgroup * >::difference_type""'");
  } 
  arg2 = static_cast< vector< atomgroup * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "avector___setslice__" "', argument " "3"" of type '" "vector< atomgroup * >::difference_type""'");
  } 
  arg3 = static_cast< vector< atomgroup * >::difference_type >(val3);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "avector___setslice__" "', argument " "4"" of type '" "std::vector< atomgroup *,std::allocator< atomgroup * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "avector___setslice__" "', argument " "4"" of type '" "std::vector< atomgroup *,std::allocator< atomgroup * > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    vector_Sl_atomgroup_Sm__Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< atomgroup *,std::allocator< atomgroup * > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  vector< atomgroup * >::difference_type arg2 ;
  vector< atomgroup * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:avector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector___setslice__" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "avector___setslice__" "', argument " "2"" of type '" "vector< atomgroup * >::difference_type""'");
  } 
  arg2 = static_cast< vector< atomgroup * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "avector___setslice__" "', argument " "3"" of type '" "vector< atomgroup * >::difference_type""'");
  } 
  arg3 = static_cast< vector< atomgroup * >::difference_type >(val3);
  try {
    vector_Sl_atomgroup_Sm__Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_avector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_avector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'avector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< atomgroup * >::__setslice__(vector< atomgroup * >::difference_type,vector< atomgroup * >::difference_type,std::vector< atomgroup *,std::allocator< atomgroup * > > const &)\n"
    "    vector< atomgroup * >::__setslice__(vector< atomgroup * >::difference_type,vector< atomgroup * >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_avector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  vector< atomgroup * >::difference_type arg2 ;
  vector< atomgroup * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:avector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector___delslice__" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "avector___delslice__" "', argument " "2"" of type '" "vector< atomgroup * >::difference_type""'");
  } 
  arg2 = static_cast< vector< atomgroup * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "avector___delslice__" "', argument " "3"" of type '" "vector< atomgroup * >::difference_type""'");
  } 
  arg3 = static_cast< vector< atomgroup * >::difference_type >(val3);
  try {
    vector_Sl_atomgroup_Sm__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  vector< atomgroup * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:avector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector___delitem__" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "avector___delitem__" "', argument " "2"" of type '" "vector< atomgroup * >::difference_type""'");
  } 
  arg2 = static_cast< vector< atomgroup * >::difference_type >(val2);
  try {
    vector_Sl_atomgroup_Sm__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< atomgroup *,std::allocator< atomgroup * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:avector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector___getitem__" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "avector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< atomgroup *,std::allocator< atomgroup * > > *)vector_Sl_atomgroup_Sm__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< atomgroup *,std::allocator< atomgroup * > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:avector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector___setitem__" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "avector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "avector___setitem__" "', argument " "3"" of type '" "std::vector< atomgroup *,std::allocator< atomgroup * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "avector___setitem__" "', argument " "3"" of type '" "std::vector< atomgroup *,std::allocator< atomgroup * > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    vector_Sl_atomgroup_Sm__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< atomgroup *,std::allocator< atomgroup * > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:avector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector___setitem__" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "avector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_atomgroup_Sm__Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:avector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector___delitem__" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "avector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_atomgroup_Sm__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_avector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_avector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'avector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< atomgroup * >::__delitem__(vector< atomgroup * >::difference_type)\n"
    "    vector< atomgroup * >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_avector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  vector< atomgroup * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< atomgroup * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:avector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector___getitem__" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "avector___getitem__" "', argument " "2"" of type '" "vector< atomgroup * >::difference_type""'");
  } 
  arg2 = static_cast< vector< atomgroup * >::difference_type >(val2);
  try {
    result = (vector< atomgroup * >::value_type)vector_Sl_atomgroup_Sm__Sg____getitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomgroup, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_avector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_avector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'avector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< atomgroup * >::__getitem__(PySliceObject *)\n"
    "    vector< atomgroup * >::__getitem__(vector< atomgroup * >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_avector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  vector< atomgroup * >::difference_type arg2 ;
  vector< atomgroup * >::value_type arg3 = (vector< atomgroup * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:avector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector___setitem__" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "avector___setitem__" "', argument " "2"" of type '" "vector< atomgroup * >::difference_type""'");
  } 
  arg2 = static_cast< vector< atomgroup * >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "avector___setitem__" "', argument " "3"" of type '" "vector< atomgroup * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< atomgroup * >::value_type >(argp3);
  try {
    vector_Sl_atomgroup_Sm__Sg____setitem____SWIG_2(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_avector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_avector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_atomgroup, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_avector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'avector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< atomgroup * >::__setitem__(PySliceObject *,std::vector< atomgroup *,std::allocator< atomgroup * > > const &)\n"
    "    vector< atomgroup * >::__setitem__(PySliceObject *)\n"
    "    vector< atomgroup * >::__setitem__(vector< atomgroup * >::difference_type,vector< atomgroup * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_avector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  vector< atomgroup * >::value_type arg2 = (vector< atomgroup * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:avector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector_append" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "avector_append" "', argument " "2"" of type '" "vector< atomgroup * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< vector< atomgroup * >::value_type >(argp2);
  vector_Sl_atomgroup_Sm__Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_avector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_avector")) SWIG_fail;
  result = (vector< atomgroup * > *)new vector< atomgroup * >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_avector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< atomgroup * > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  vector< atomgroup * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_avector",&obj0)) SWIG_fail;
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_avector" "', argument " "1"" of type '" "std::vector< atomgroup * > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_avector" "', argument " "1"" of type '" "std::vector< atomgroup * > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (vector< atomgroup * > *)new vector< atomgroup * >((std::vector< atomgroup * > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:avector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector_empty" "', argument " "1"" of type '" "vector< atomgroup * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  result = (bool)((vector< atomgroup * > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< atomgroup * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:avector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector_size" "', argument " "1"" of type '" "vector< atomgroup * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  result = ((vector< atomgroup * > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:avector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector_clear" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  std::vector< atomgroup * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:avector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector_swap" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "avector_swap" "', argument " "2"" of type '" "std::vector< atomgroup * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "avector_swap" "', argument " "2"" of type '" "std::vector< atomgroup * > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< atomgroup * > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< atomgroup * > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:avector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector_get_allocator" "', argument " "1"" of type '" "vector< atomgroup * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  result = ((vector< atomgroup * > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new vector< atomgroup * >::allocator_type(static_cast< const vector< atomgroup * >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_atomgroup_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< atomgroup * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:avector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector_begin" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< atomgroup * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< atomgroup * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:avector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector_end" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< atomgroup * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< atomgroup * >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:avector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector_rbegin" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< atomgroup * >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< atomgroup * >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:avector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector_rend" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< atomgroup * >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_avector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< atomgroup * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_avector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_avector" "', argument " "1"" of type '" "vector< atomgroup * >::size_type""'");
  } 
  arg1 = static_cast< vector< atomgroup * >::size_type >(val1);
  result = (vector< atomgroup * > *)new vector< atomgroup * >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:avector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector_pop_back" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  vector< atomgroup * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:avector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector_resize" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "avector_resize" "', argument " "2"" of type '" "vector< atomgroup * >::size_type""'");
  } 
  arg2 = static_cast< vector< atomgroup * >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  vector< atomgroup * >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< atomgroup * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:avector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector_erase" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "avector_erase" "', argument " "2"" of type '" "vector< atomgroup * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< atomgroup * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< atomgroup * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "avector_erase" "', argument " "2"" of type '" "vector< atomgroup * >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< atomgroup * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  vector< atomgroup * >::iterator arg2 ;
  vector< atomgroup * >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< atomgroup * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:avector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector_erase" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "avector_erase" "', argument " "2"" of type '" "vector< atomgroup * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< atomgroup * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< atomgroup * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "avector_erase" "', argument " "2"" of type '" "vector< atomgroup * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "avector_erase" "', argument " "3"" of type '" "vector< atomgroup * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< atomgroup * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< atomgroup * >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "avector_erase" "', argument " "3"" of type '" "vector< atomgroup * >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< atomgroup * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< atomgroup * >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_avector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< atomgroup * >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< atomgroup * >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_avector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'avector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< atomgroup * >::erase(vector< atomgroup * >::iterator)\n"
    "    vector< atomgroup * >::erase(vector< atomgroup * >::iterator,vector< atomgroup * >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_avector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * >::size_type arg1 ;
  vector< atomgroup * >::value_type arg2 = (vector< atomgroup * >::value_type) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< atomgroup * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_avector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_avector" "', argument " "1"" of type '" "vector< atomgroup * >::size_type""'");
  } 
  arg1 = static_cast< vector< atomgroup * >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_avector" "', argument " "2"" of type '" "vector< atomgroup * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< vector< atomgroup * >::value_type >(argp2);
  result = (vector< atomgroup * > *)new vector< atomgroup * >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_avector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_avector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_avector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_avector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_atomgroup, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_avector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_avector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< atomgroup * >::vector()\n"
    "    vector< atomgroup * >::vector(std::vector< atomgroup * > const &)\n"
    "    vector< atomgroup * >::vector(vector< atomgroup * >::size_type)\n"
    "    vector< atomgroup * >::vector(vector< atomgroup * >::size_type,vector< atomgroup * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_avector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  vector< atomgroup * >::value_type arg2 = (vector< atomgroup * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:avector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector_push_back" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "avector_push_back" "', argument " "2"" of type '" "vector< atomgroup * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< vector< atomgroup * >::value_type >(argp2);
  (arg1)->push_back(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< atomgroup * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:avector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector_front" "', argument " "1"" of type '" "vector< atomgroup * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  result = (vector< atomgroup * >::value_type)((vector< atomgroup * > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomgroup, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< atomgroup * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:avector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector_back" "', argument " "1"" of type '" "vector< atomgroup * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  result = (vector< atomgroup * >::value_type)((vector< atomgroup * > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomgroup, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  vector< atomgroup * >::size_type arg2 ;
  vector< atomgroup * >::value_type arg3 = (vector< atomgroup * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:avector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector_assign" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "avector_assign" "', argument " "2"" of type '" "vector< atomgroup * >::size_type""'");
  } 
  arg2 = static_cast< vector< atomgroup * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "avector_assign" "', argument " "3"" of type '" "vector< atomgroup * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< atomgroup * >::value_type >(argp3);
  (arg1)->assign(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  vector< atomgroup * >::size_type arg2 ;
  vector< atomgroup * >::value_type arg3 = (vector< atomgroup * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:avector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector_resize" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "avector_resize" "', argument " "2"" of type '" "vector< atomgroup * >::size_type""'");
  } 
  arg2 = static_cast< vector< atomgroup * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "avector_resize" "', argument " "3"" of type '" "vector< atomgroup * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< atomgroup * >::value_type >(argp3);
  (arg1)->resize(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_avector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_atomgroup, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_avector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'avector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< atomgroup * >::resize(vector< atomgroup * >::size_type)\n"
    "    vector< atomgroup * >::resize(vector< atomgroup * >::size_type,vector< atomgroup * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_avector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  vector< atomgroup * >::iterator arg2 ;
  vector< atomgroup * >::value_type arg3 = (vector< atomgroup * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< atomgroup * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:avector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector_insert" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "avector_insert" "', argument " "2"" of type '" "vector< atomgroup * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< atomgroup * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< atomgroup * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "avector_insert" "', argument " "2"" of type '" "vector< atomgroup * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "avector_insert" "', argument " "3"" of type '" "vector< atomgroup * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< atomgroup * >::value_type >(argp3);
  result = (arg1)->insert(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< atomgroup * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  vector< atomgroup * >::iterator arg2 ;
  vector< atomgroup * >::size_type arg3 ;
  vector< atomgroup * >::value_type arg4 = (vector< atomgroup * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:avector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector_insert" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "avector_insert" "', argument " "2"" of type '" "vector< atomgroup * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< atomgroup * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< atomgroup * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "avector_insert" "', argument " "2"" of type '" "vector< atomgroup * >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "avector_insert" "', argument " "3"" of type '" "vector< atomgroup * >::size_type""'");
  } 
  arg3 = static_cast< vector< atomgroup * >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "avector_insert" "', argument " "4"" of type '" "vector< atomgroup * >::value_type""'"); 
  }
  arg4 = reinterpret_cast< vector< atomgroup * >::value_type >(argp4);
  (arg1)->insert(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< atomgroup * >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_atomgroup, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_avector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< atomgroup * >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_atomgroup, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_avector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'avector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< atomgroup * >::insert(vector< atomgroup * >::iterator,vector< atomgroup * >::value_type)\n"
    "    vector< atomgroup * >::insert(vector< atomgroup * >::iterator,vector< atomgroup * >::size_type,vector< atomgroup * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_avector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  vector< atomgroup * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:avector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector_reserve" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "avector_reserve" "', argument " "2"" of type '" "vector< atomgroup * >::size_type""'");
  } 
  arg2 = static_cast< vector< atomgroup * >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< atomgroup * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:avector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avector_capacity" "', argument " "1"" of type '" "vector< atomgroup * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  result = ((vector< atomgroup * > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_avector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomgroup * > *arg1 = (vector< atomgroup * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_avector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_avector" "', argument " "1"" of type '" "vector< atomgroup * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomgroup * > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *avector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ivector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:ivector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector_iterator" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  result = (swig::SwigPyIterator *)vector_Sl_interaction_Sm__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ivector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector___nonzero__" "', argument " "1"" of type '" "vector< interaction * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  result = (bool)vector_Sl_interaction_Sm__Sg____nonzero__((vector< interaction * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ivector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector___bool__" "', argument " "1"" of type '" "vector< interaction * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  result = (bool)vector_Sl_interaction_Sm__Sg____bool__((vector< interaction * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< interaction * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ivector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector___len__" "', argument " "1"" of type '" "vector< interaction * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  result = vector_Sl_interaction_Sm__Sg____len__((vector< interaction * > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< interaction * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ivector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector_pop" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  try {
    result = (vector< interaction * >::value_type)vector_Sl_interaction_Sm__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_interaction, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  vector< interaction * >::difference_type arg2 ;
  vector< interaction * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< interaction *,std::allocator< interaction * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ivector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector___getslice__" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ivector___getslice__" "', argument " "2"" of type '" "vector< interaction * >::difference_type""'");
  } 
  arg2 = static_cast< vector< interaction * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ivector___getslice__" "', argument " "3"" of type '" "vector< interaction * >::difference_type""'");
  } 
  arg3 = static_cast< vector< interaction * >::difference_type >(val3);
  try {
    result = (std::vector< interaction *,std::allocator< interaction * > > *)vector_Sl_interaction_Sm__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  vector< interaction * >::difference_type arg2 ;
  vector< interaction * >::difference_type arg3 ;
  std::vector< interaction *,std::allocator< interaction * > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ivector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector___setslice__" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ivector___setslice__" "', argument " "2"" of type '" "vector< interaction * >::difference_type""'");
  } 
  arg2 = static_cast< vector< interaction * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ivector___setslice__" "', argument " "3"" of type '" "vector< interaction * >::difference_type""'");
  } 
  arg3 = static_cast< vector< interaction * >::difference_type >(val3);
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ivector___setslice__" "', argument " "4"" of type '" "std::vector< interaction *,std::allocator< interaction * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ivector___setslice__" "', argument " "4"" of type '" "std::vector< interaction *,std::allocator< interaction * > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    vector_Sl_interaction_Sm__Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< interaction *,std::allocator< interaction * > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  vector< interaction * >::difference_type arg2 ;
  vector< interaction * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ivector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector___setslice__" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ivector___setslice__" "', argument " "2"" of type '" "vector< interaction * >::difference_type""'");
  } 
  arg2 = static_cast< vector< interaction * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ivector___setslice__" "', argument " "3"" of type '" "vector< interaction * >::difference_type""'");
  } 
  arg3 = static_cast< vector< interaction * >::difference_type >(val3);
  try {
    vector_Sl_interaction_Sm__Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ivector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ivector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ivector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< interaction * >::__setslice__(vector< interaction * >::difference_type,vector< interaction * >::difference_type,std::vector< interaction *,std::allocator< interaction * > > const &)\n"
    "    vector< interaction * >::__setslice__(vector< interaction * >::difference_type,vector< interaction * >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ivector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  vector< interaction * >::difference_type arg2 ;
  vector< interaction * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ivector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector___delslice__" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ivector___delslice__" "', argument " "2"" of type '" "vector< interaction * >::difference_type""'");
  } 
  arg2 = static_cast< vector< interaction * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ivector___delslice__" "', argument " "3"" of type '" "vector< interaction * >::difference_type""'");
  } 
  arg3 = static_cast< vector< interaction * >::difference_type >(val3);
  try {
    vector_Sl_interaction_Sm__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  vector< interaction * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector___delitem__" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ivector___delitem__" "', argument " "2"" of type '" "vector< interaction * >::difference_type""'");
  } 
  arg2 = static_cast< vector< interaction * >::difference_type >(val2);
  try {
    vector_Sl_interaction_Sm__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< interaction *,std::allocator< interaction * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector___getitem__" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ivector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< interaction *,std::allocator< interaction * > > *)vector_Sl_interaction_Sm__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< interaction *,std::allocator< interaction * > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ivector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector___setitem__" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ivector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ivector___setitem__" "', argument " "3"" of type '" "std::vector< interaction *,std::allocator< interaction * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ivector___setitem__" "', argument " "3"" of type '" "std::vector< interaction *,std::allocator< interaction * > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    vector_Sl_interaction_Sm__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< interaction *,std::allocator< interaction * > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector___setitem__" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ivector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_interaction_Sm__Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector___delitem__" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ivector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_interaction_Sm__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ivector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ivector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ivector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< interaction * >::__delitem__(vector< interaction * >::difference_type)\n"
    "    vector< interaction * >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ivector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  vector< interaction * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< interaction * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector___getitem__" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ivector___getitem__" "', argument " "2"" of type '" "vector< interaction * >::difference_type""'");
  } 
  arg2 = static_cast< vector< interaction * >::difference_type >(val2);
  try {
    result = (vector< interaction * >::value_type)vector_Sl_interaction_Sm__Sg____getitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_interaction, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ivector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ivector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ivector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< interaction * >::__getitem__(PySliceObject *)\n"
    "    vector< interaction * >::__getitem__(vector< interaction * >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ivector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  vector< interaction * >::difference_type arg2 ;
  vector< interaction * >::value_type arg3 = (vector< interaction * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ivector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector___setitem__" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ivector___setitem__" "', argument " "2"" of type '" "vector< interaction * >::difference_type""'");
  } 
  arg2 = static_cast< vector< interaction * >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_interaction, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ivector___setitem__" "', argument " "3"" of type '" "vector< interaction * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< interaction * >::value_type >(argp3);
  try {
    vector_Sl_interaction_Sm__Sg____setitem____SWIG_2(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ivector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ivector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_interaction, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ivector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ivector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< interaction * >::__setitem__(PySliceObject *,std::vector< interaction *,std::allocator< interaction * > > const &)\n"
    "    vector< interaction * >::__setitem__(PySliceObject *)\n"
    "    vector< interaction * >::__setitem__(vector< interaction * >::difference_type,vector< interaction * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ivector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  vector< interaction * >::value_type arg2 = (vector< interaction * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector_append" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_interaction, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ivector_append" "', argument " "2"" of type '" "vector< interaction * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< vector< interaction * >::value_type >(argp2);
  vector_Sl_interaction_Sm__Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ivector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ivector")) SWIG_fail;
  result = (vector< interaction * > *)new vector< interaction * >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ivector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< interaction * > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  vector< interaction * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ivector",&obj0)) SWIG_fail;
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ivector" "', argument " "1"" of type '" "std::vector< interaction * > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ivector" "', argument " "1"" of type '" "std::vector< interaction * > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (vector< interaction * > *)new vector< interaction * >((std::vector< interaction * > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ivector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector_empty" "', argument " "1"" of type '" "vector< interaction * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  result = (bool)((vector< interaction * > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< interaction * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ivector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector_size" "', argument " "1"" of type '" "vector< interaction * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  result = ((vector< interaction * > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ivector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector_clear" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  std::vector< interaction * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector_swap" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ivector_swap" "', argument " "2"" of type '" "std::vector< interaction * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ivector_swap" "', argument " "2"" of type '" "std::vector< interaction * > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< interaction * > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< interaction * > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ivector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector_get_allocator" "', argument " "1"" of type '" "vector< interaction * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  result = ((vector< interaction * > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new vector< interaction * >::allocator_type(static_cast< const vector< interaction * >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_interaction_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< interaction * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ivector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector_begin" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< interaction * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< interaction * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ivector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector_end" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< interaction * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< interaction * >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ivector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector_rbegin" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< interaction * >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< interaction * >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ivector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector_rend" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< interaction * >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ivector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< interaction * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ivector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ivector" "', argument " "1"" of type '" "vector< interaction * >::size_type""'");
  } 
  arg1 = static_cast< vector< interaction * >::size_type >(val1);
  result = (vector< interaction * > *)new vector< interaction * >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ivector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector_pop_back" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  vector< interaction * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector_resize" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ivector_resize" "', argument " "2"" of type '" "vector< interaction * >::size_type""'");
  } 
  arg2 = static_cast< vector< interaction * >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  vector< interaction * >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< interaction * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector_erase" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ivector_erase" "', argument " "2"" of type '" "vector< interaction * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< interaction * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< interaction * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ivector_erase" "', argument " "2"" of type '" "vector< interaction * >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< interaction * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  vector< interaction * >::iterator arg2 ;
  vector< interaction * >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< interaction * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ivector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector_erase" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ivector_erase" "', argument " "2"" of type '" "vector< interaction * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< interaction * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< interaction * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ivector_erase" "', argument " "2"" of type '" "vector< interaction * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ivector_erase" "', argument " "3"" of type '" "vector< interaction * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< interaction * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< interaction * >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ivector_erase" "', argument " "3"" of type '" "vector< interaction * >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< interaction * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< interaction * >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_ivector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< interaction * >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< interaction * >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_ivector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ivector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< interaction * >::erase(vector< interaction * >::iterator)\n"
    "    vector< interaction * >::erase(vector< interaction * >::iterator,vector< interaction * >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ivector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * >::size_type arg1 ;
  vector< interaction * >::value_type arg2 = (vector< interaction * >::value_type) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< interaction * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ivector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ivector" "', argument " "1"" of type '" "vector< interaction * >::size_type""'");
  } 
  arg1 = static_cast< vector< interaction * >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_interaction, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ivector" "', argument " "2"" of type '" "vector< interaction * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< vector< interaction * >::value_type >(argp2);
  result = (vector< interaction * > *)new vector< interaction * >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ivector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ivector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ivector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ivector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_interaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ivector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ivector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< interaction * >::vector()\n"
    "    vector< interaction * >::vector(std::vector< interaction * > const &)\n"
    "    vector< interaction * >::vector(vector< interaction * >::size_type)\n"
    "    vector< interaction * >::vector(vector< interaction * >::size_type,vector< interaction * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ivector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  vector< interaction * >::value_type arg2 = (vector< interaction * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector_push_back" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_interaction, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ivector_push_back" "', argument " "2"" of type '" "vector< interaction * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< vector< interaction * >::value_type >(argp2);
  (arg1)->push_back(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< interaction * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ivector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector_front" "', argument " "1"" of type '" "vector< interaction * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  result = (vector< interaction * >::value_type)((vector< interaction * > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_interaction, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< interaction * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ivector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector_back" "', argument " "1"" of type '" "vector< interaction * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  result = (vector< interaction * >::value_type)((vector< interaction * > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_interaction, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  vector< interaction * >::size_type arg2 ;
  vector< interaction * >::value_type arg3 = (vector< interaction * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ivector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector_assign" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ivector_assign" "', argument " "2"" of type '" "vector< interaction * >::size_type""'");
  } 
  arg2 = static_cast< vector< interaction * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_interaction, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ivector_assign" "', argument " "3"" of type '" "vector< interaction * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< interaction * >::value_type >(argp3);
  (arg1)->assign(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  vector< interaction * >::size_type arg2 ;
  vector< interaction * >::value_type arg3 = (vector< interaction * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ivector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector_resize" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ivector_resize" "', argument " "2"" of type '" "vector< interaction * >::size_type""'");
  } 
  arg2 = static_cast< vector< interaction * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_interaction, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ivector_resize" "', argument " "3"" of type '" "vector< interaction * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< interaction * >::value_type >(argp3);
  (arg1)->resize(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ivector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_interaction, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ivector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ivector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< interaction * >::resize(vector< interaction * >::size_type)\n"
    "    vector< interaction * >::resize(vector< interaction * >::size_type,vector< interaction * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ivector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  vector< interaction * >::iterator arg2 ;
  vector< interaction * >::value_type arg3 = (vector< interaction * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< interaction * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ivector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector_insert" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ivector_insert" "', argument " "2"" of type '" "vector< interaction * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< interaction * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< interaction * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ivector_insert" "', argument " "2"" of type '" "vector< interaction * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_interaction, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ivector_insert" "', argument " "3"" of type '" "vector< interaction * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< interaction * >::value_type >(argp3);
  result = (arg1)->insert(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< interaction * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  vector< interaction * >::iterator arg2 ;
  vector< interaction * >::size_type arg3 ;
  vector< interaction * >::value_type arg4 = (vector< interaction * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ivector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector_insert" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ivector_insert" "', argument " "2"" of type '" "vector< interaction * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< interaction * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< interaction * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ivector_insert" "', argument " "2"" of type '" "vector< interaction * >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ivector_insert" "', argument " "3"" of type '" "vector< interaction * >::size_type""'");
  } 
  arg3 = static_cast< vector< interaction * >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_interaction, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ivector_insert" "', argument " "4"" of type '" "vector< interaction * >::value_type""'"); 
  }
  arg4 = reinterpret_cast< vector< interaction * >::value_type >(argp4);
  (arg1)->insert(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< interaction * >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_interaction, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ivector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< interaction * >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_interaction, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ivector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ivector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< interaction * >::insert(vector< interaction * >::iterator,vector< interaction * >::value_type)\n"
    "    vector< interaction * >::insert(vector< interaction * >::iterator,vector< interaction * >::size_type,vector< interaction * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ivector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  vector< interaction * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector_reserve" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ivector_reserve" "', argument " "2"" of type '" "vector< interaction * >::size_type""'");
  } 
  arg2 = static_cast< vector< interaction * >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< interaction * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ivector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivector_capacity" "', argument " "1"" of type '" "vector< interaction * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  result = ((vector< interaction * > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ivector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interaction * > *arg1 = (vector< interaction * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ivector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ivector" "', argument " "1"" of type '" "vector< interaction * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interaction * > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ivector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ifxvector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:ifxvector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector_iterator" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  result = (swig::SwigPyIterator *)vector_Sl_interactionpairsx_Sm__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ifxvector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector___nonzero__" "', argument " "1"" of type '" "vector< interactionpairsx * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  result = (bool)vector_Sl_interactionpairsx_Sm__Sg____nonzero__((vector< interactionpairsx * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ifxvector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector___bool__" "', argument " "1"" of type '" "vector< interactionpairsx * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  result = (bool)vector_Sl_interactionpairsx_Sm__Sg____bool__((vector< interactionpairsx * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< interactionpairsx * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ifxvector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector___len__" "', argument " "1"" of type '" "vector< interactionpairsx * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  result = vector_Sl_interactionpairsx_Sm__Sg____len__((vector< interactionpairsx * > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< interactionpairsx * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ifxvector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector_pop" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  try {
    result = (vector< interactionpairsx * >::value_type)vector_Sl_interactionpairsx_Sm__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_interactionpairsx, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  vector< interactionpairsx * >::difference_type arg2 ;
  vector< interactionpairsx * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< interactionpairsx *,std::allocator< interactionpairsx * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ifxvector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector___getslice__" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ifxvector___getslice__" "', argument " "2"" of type '" "vector< interactionpairsx * >::difference_type""'");
  } 
  arg2 = static_cast< vector< interactionpairsx * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ifxvector___getslice__" "', argument " "3"" of type '" "vector< interactionpairsx * >::difference_type""'");
  } 
  arg3 = static_cast< vector< interactionpairsx * >::difference_type >(val3);
  try {
    result = (std::vector< interactionpairsx *,std::allocator< interactionpairsx * > > *)vector_Sl_interactionpairsx_Sm__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  vector< interactionpairsx * >::difference_type arg2 ;
  vector< interactionpairsx * >::difference_type arg3 ;
  std::vector< interactionpairsx *,std::allocator< interactionpairsx * > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ifxvector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector___setslice__" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ifxvector___setslice__" "', argument " "2"" of type '" "vector< interactionpairsx * >::difference_type""'");
  } 
  arg2 = static_cast< vector< interactionpairsx * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ifxvector___setslice__" "', argument " "3"" of type '" "vector< interactionpairsx * >::difference_type""'");
  } 
  arg3 = static_cast< vector< interactionpairsx * >::difference_type >(val3);
  {
    std::vector<interactionpairsx*,std::allocator< interactionpairsx * > > *ptr = (std::vector<interactionpairsx*,std::allocator< interactionpairsx * > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ifxvector___setslice__" "', argument " "4"" of type '" "std::vector< interactionpairsx *,std::allocator< interactionpairsx * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ifxvector___setslice__" "', argument " "4"" of type '" "std::vector< interactionpairsx *,std::allocator< interactionpairsx * > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    vector_Sl_interactionpairsx_Sm__Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< interactionpairsx *,std::allocator< interactionpairsx * > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  vector< interactionpairsx * >::difference_type arg2 ;
  vector< interactionpairsx * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ifxvector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector___setslice__" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ifxvector___setslice__" "', argument " "2"" of type '" "vector< interactionpairsx * >::difference_type""'");
  } 
  arg2 = static_cast< vector< interactionpairsx * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ifxvector___setslice__" "', argument " "3"" of type '" "vector< interactionpairsx * >::difference_type""'");
  } 
  arg3 = static_cast< vector< interactionpairsx * >::difference_type >(val3);
  try {
    vector_Sl_interactionpairsx_Sm__Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ifxvector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interactionpairsx*,std::allocator< interactionpairsx * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ifxvector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ifxvector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< interactionpairsx * >::__setslice__(vector< interactionpairsx * >::difference_type,vector< interactionpairsx * >::difference_type,std::vector< interactionpairsx *,std::allocator< interactionpairsx * > > const &)\n"
    "    vector< interactionpairsx * >::__setslice__(vector< interactionpairsx * >::difference_type,vector< interactionpairsx * >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ifxvector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  vector< interactionpairsx * >::difference_type arg2 ;
  vector< interactionpairsx * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ifxvector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector___delslice__" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ifxvector___delslice__" "', argument " "2"" of type '" "vector< interactionpairsx * >::difference_type""'");
  } 
  arg2 = static_cast< vector< interactionpairsx * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ifxvector___delslice__" "', argument " "3"" of type '" "vector< interactionpairsx * >::difference_type""'");
  } 
  arg3 = static_cast< vector< interactionpairsx * >::difference_type >(val3);
  try {
    vector_Sl_interactionpairsx_Sm__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  vector< interactionpairsx * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ifxvector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector___delitem__" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ifxvector___delitem__" "', argument " "2"" of type '" "vector< interactionpairsx * >::difference_type""'");
  } 
  arg2 = static_cast< vector< interactionpairsx * >::difference_type >(val2);
  try {
    vector_Sl_interactionpairsx_Sm__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< interactionpairsx *,std::allocator< interactionpairsx * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ifxvector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector___getitem__" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ifxvector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< interactionpairsx *,std::allocator< interactionpairsx * > > *)vector_Sl_interactionpairsx_Sm__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< interactionpairsx *,std::allocator< interactionpairsx * > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ifxvector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector___setitem__" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ifxvector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<interactionpairsx*,std::allocator< interactionpairsx * > > *ptr = (std::vector<interactionpairsx*,std::allocator< interactionpairsx * > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ifxvector___setitem__" "', argument " "3"" of type '" "std::vector< interactionpairsx *,std::allocator< interactionpairsx * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ifxvector___setitem__" "', argument " "3"" of type '" "std::vector< interactionpairsx *,std::allocator< interactionpairsx * > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    vector_Sl_interactionpairsx_Sm__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< interactionpairsx *,std::allocator< interactionpairsx * > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ifxvector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector___setitem__" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ifxvector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_interactionpairsx_Sm__Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ifxvector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector___delitem__" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ifxvector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_interactionpairsx_Sm__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ifxvector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ifxvector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ifxvector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< interactionpairsx * >::__delitem__(vector< interactionpairsx * >::difference_type)\n"
    "    vector< interactionpairsx * >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ifxvector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  vector< interactionpairsx * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< interactionpairsx * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ifxvector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector___getitem__" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ifxvector___getitem__" "', argument " "2"" of type '" "vector< interactionpairsx * >::difference_type""'");
  } 
  arg2 = static_cast< vector< interactionpairsx * >::difference_type >(val2);
  try {
    result = (vector< interactionpairsx * >::value_type)vector_Sl_interactionpairsx_Sm__Sg____getitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_interactionpairsx, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ifxvector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ifxvector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ifxvector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< interactionpairsx * >::__getitem__(PySliceObject *)\n"
    "    vector< interactionpairsx * >::__getitem__(vector< interactionpairsx * >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ifxvector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  vector< interactionpairsx * >::difference_type arg2 ;
  vector< interactionpairsx * >::value_type arg3 = (vector< interactionpairsx * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ifxvector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector___setitem__" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ifxvector___setitem__" "', argument " "2"" of type '" "vector< interactionpairsx * >::difference_type""'");
  } 
  arg2 = static_cast< vector< interactionpairsx * >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_interactionpairsx, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ifxvector___setitem__" "', argument " "3"" of type '" "vector< interactionpairsx * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< interactionpairsx * >::value_type >(argp3);
  try {
    vector_Sl_interactionpairsx_Sm__Sg____setitem____SWIG_2(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ifxvector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<interactionpairsx*,std::allocator< interactionpairsx * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ifxvector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_interactionpairsx, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ifxvector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ifxvector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< interactionpairsx * >::__setitem__(PySliceObject *,std::vector< interactionpairsx *,std::allocator< interactionpairsx * > > const &)\n"
    "    vector< interactionpairsx * >::__setitem__(PySliceObject *)\n"
    "    vector< interactionpairsx * >::__setitem__(vector< interactionpairsx * >::difference_type,vector< interactionpairsx * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ifxvector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  vector< interactionpairsx * >::value_type arg2 = (vector< interactionpairsx * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ifxvector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector_append" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_interactionpairsx, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ifxvector_append" "', argument " "2"" of type '" "vector< interactionpairsx * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< vector< interactionpairsx * >::value_type >(argp2);
  vector_Sl_interactionpairsx_Sm__Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ifxvector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ifxvector")) SWIG_fail;
  result = (vector< interactionpairsx * > *)new vector< interactionpairsx * >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ifxvector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< interactionpairsx * > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  vector< interactionpairsx * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ifxvector",&obj0)) SWIG_fail;
  {
    std::vector<interactionpairsx*,std::allocator< interactionpairsx * > > *ptr = (std::vector<interactionpairsx*,std::allocator< interactionpairsx * > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ifxvector" "', argument " "1"" of type '" "std::vector< interactionpairsx * > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ifxvector" "', argument " "1"" of type '" "std::vector< interactionpairsx * > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (vector< interactionpairsx * > *)new vector< interactionpairsx * >((std::vector< interactionpairsx * > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ifxvector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector_empty" "', argument " "1"" of type '" "vector< interactionpairsx * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  result = (bool)((vector< interactionpairsx * > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< interactionpairsx * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ifxvector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector_size" "', argument " "1"" of type '" "vector< interactionpairsx * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  result = ((vector< interactionpairsx * > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ifxvector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector_clear" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  std::vector< interactionpairsx * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ifxvector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector_swap" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ifxvector_swap" "', argument " "2"" of type '" "std::vector< interactionpairsx * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ifxvector_swap" "', argument " "2"" of type '" "std::vector< interactionpairsx * > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< interactionpairsx * > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< interactionpairsx * > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ifxvector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector_get_allocator" "', argument " "1"" of type '" "vector< interactionpairsx * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  result = ((vector< interactionpairsx * > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new vector< interactionpairsx * >::allocator_type(static_cast< const vector< interactionpairsx * >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_interactionpairsx_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< interactionpairsx * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ifxvector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector_begin" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< interactionpairsx * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< interactionpairsx * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ifxvector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector_end" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< interactionpairsx * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< interactionpairsx * >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ifxvector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector_rbegin" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< interactionpairsx * >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< interactionpairsx * >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ifxvector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector_rend" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< interactionpairsx * >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ifxvector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< interactionpairsx * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ifxvector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ifxvector" "', argument " "1"" of type '" "vector< interactionpairsx * >::size_type""'");
  } 
  arg1 = static_cast< vector< interactionpairsx * >::size_type >(val1);
  result = (vector< interactionpairsx * > *)new vector< interactionpairsx * >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ifxvector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector_pop_back" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  vector< interactionpairsx * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ifxvector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector_resize" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ifxvector_resize" "', argument " "2"" of type '" "vector< interactionpairsx * >::size_type""'");
  } 
  arg2 = static_cast< vector< interactionpairsx * >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  vector< interactionpairsx * >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< interactionpairsx * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ifxvector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector_erase" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ifxvector_erase" "', argument " "2"" of type '" "vector< interactionpairsx * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< interactionpairsx * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< interactionpairsx * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ifxvector_erase" "', argument " "2"" of type '" "vector< interactionpairsx * >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< interactionpairsx * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  vector< interactionpairsx * >::iterator arg2 ;
  vector< interactionpairsx * >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< interactionpairsx * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ifxvector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector_erase" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ifxvector_erase" "', argument " "2"" of type '" "vector< interactionpairsx * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< interactionpairsx * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< interactionpairsx * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ifxvector_erase" "', argument " "2"" of type '" "vector< interactionpairsx * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ifxvector_erase" "', argument " "3"" of type '" "vector< interactionpairsx * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< interactionpairsx * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< interactionpairsx * >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ifxvector_erase" "', argument " "3"" of type '" "vector< interactionpairsx * >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< interactionpairsx * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< interactionpairsx * >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_ifxvector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< interactionpairsx * >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< interactionpairsx * >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_ifxvector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ifxvector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< interactionpairsx * >::erase(vector< interactionpairsx * >::iterator)\n"
    "    vector< interactionpairsx * >::erase(vector< interactionpairsx * >::iterator,vector< interactionpairsx * >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ifxvector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * >::size_type arg1 ;
  vector< interactionpairsx * >::value_type arg2 = (vector< interactionpairsx * >::value_type) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< interactionpairsx * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ifxvector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ifxvector" "', argument " "1"" of type '" "vector< interactionpairsx * >::size_type""'");
  } 
  arg1 = static_cast< vector< interactionpairsx * >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_interactionpairsx, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ifxvector" "', argument " "2"" of type '" "vector< interactionpairsx * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< vector< interactionpairsx * >::value_type >(argp2);
  result = (vector< interactionpairsx * > *)new vector< interactionpairsx * >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ifxvector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ifxvector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ifxvector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<interactionpairsx*,std::allocator< interactionpairsx * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ifxvector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_interactionpairsx, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ifxvector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ifxvector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< interactionpairsx * >::vector()\n"
    "    vector< interactionpairsx * >::vector(std::vector< interactionpairsx * > const &)\n"
    "    vector< interactionpairsx * >::vector(vector< interactionpairsx * >::size_type)\n"
    "    vector< interactionpairsx * >::vector(vector< interactionpairsx * >::size_type,vector< interactionpairsx * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ifxvector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  vector< interactionpairsx * >::value_type arg2 = (vector< interactionpairsx * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ifxvector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector_push_back" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_interactionpairsx, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ifxvector_push_back" "', argument " "2"" of type '" "vector< interactionpairsx * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< vector< interactionpairsx * >::value_type >(argp2);
  (arg1)->push_back(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< interactionpairsx * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ifxvector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector_front" "', argument " "1"" of type '" "vector< interactionpairsx * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  result = (vector< interactionpairsx * >::value_type)((vector< interactionpairsx * > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_interactionpairsx, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< interactionpairsx * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ifxvector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector_back" "', argument " "1"" of type '" "vector< interactionpairsx * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  result = (vector< interactionpairsx * >::value_type)((vector< interactionpairsx * > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_interactionpairsx, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  vector< interactionpairsx * >::size_type arg2 ;
  vector< interactionpairsx * >::value_type arg3 = (vector< interactionpairsx * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ifxvector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector_assign" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ifxvector_assign" "', argument " "2"" of type '" "vector< interactionpairsx * >::size_type""'");
  } 
  arg2 = static_cast< vector< interactionpairsx * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_interactionpairsx, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ifxvector_assign" "', argument " "3"" of type '" "vector< interactionpairsx * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< interactionpairsx * >::value_type >(argp3);
  (arg1)->assign(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  vector< interactionpairsx * >::size_type arg2 ;
  vector< interactionpairsx * >::value_type arg3 = (vector< interactionpairsx * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ifxvector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector_resize" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ifxvector_resize" "', argument " "2"" of type '" "vector< interactionpairsx * >::size_type""'");
  } 
  arg2 = static_cast< vector< interactionpairsx * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_interactionpairsx, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ifxvector_resize" "', argument " "3"" of type '" "vector< interactionpairsx * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< interactionpairsx * >::value_type >(argp3);
  (arg1)->resize(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ifxvector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_interactionpairsx, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ifxvector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ifxvector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< interactionpairsx * >::resize(vector< interactionpairsx * >::size_type)\n"
    "    vector< interactionpairsx * >::resize(vector< interactionpairsx * >::size_type,vector< interactionpairsx * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ifxvector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  vector< interactionpairsx * >::iterator arg2 ;
  vector< interactionpairsx * >::value_type arg3 = (vector< interactionpairsx * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< interactionpairsx * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ifxvector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector_insert" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ifxvector_insert" "', argument " "2"" of type '" "vector< interactionpairsx * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< interactionpairsx * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< interactionpairsx * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ifxvector_insert" "', argument " "2"" of type '" "vector< interactionpairsx * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_interactionpairsx, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ifxvector_insert" "', argument " "3"" of type '" "vector< interactionpairsx * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< interactionpairsx * >::value_type >(argp3);
  result = (arg1)->insert(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< interactionpairsx * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  vector< interactionpairsx * >::iterator arg2 ;
  vector< interactionpairsx * >::size_type arg3 ;
  vector< interactionpairsx * >::value_type arg4 = (vector< interactionpairsx * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ifxvector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector_insert" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ifxvector_insert" "', argument " "2"" of type '" "vector< interactionpairsx * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< interactionpairsx * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< interactionpairsx * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ifxvector_insert" "', argument " "2"" of type '" "vector< interactionpairsx * >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ifxvector_insert" "', argument " "3"" of type '" "vector< interactionpairsx * >::size_type""'");
  } 
  arg3 = static_cast< vector< interactionpairsx * >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_interactionpairsx, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ifxvector_insert" "', argument " "4"" of type '" "vector< interactionpairsx * >::value_type""'"); 
  }
  arg4 = reinterpret_cast< vector< interactionpairsx * >::value_type >(argp4);
  (arg1)->insert(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< interactionpairsx * >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_interactionpairsx, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ifxvector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< interactionpairsx * >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_interactionpairsx, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ifxvector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ifxvector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< interactionpairsx * >::insert(vector< interactionpairsx * >::iterator,vector< interactionpairsx * >::value_type)\n"
    "    vector< interactionpairsx * >::insert(vector< interactionpairsx * >::iterator,vector< interactionpairsx * >::size_type,vector< interactionpairsx * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ifxvector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  vector< interactionpairsx * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ifxvector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector_reserve" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ifxvector_reserve" "', argument " "2"" of type '" "vector< interactionpairsx * >::size_type""'");
  } 
  arg2 = static_cast< vector< interactionpairsx * >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ifxvector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< interactionpairsx * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ifxvector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ifxvector_capacity" "', argument " "1"" of type '" "vector< interactionpairsx * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  result = ((vector< interactionpairsx * > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ifxvector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< interactionpairsx * > *arg1 = (vector< interactionpairsx * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ifxvector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ifxvector" "', argument " "1"" of type '" "vector< interactionpairsx * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< interactionpairsx * > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ifxvector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_tvector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:tvector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector_iterator" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  result = (swig::SwigPyIterator *)vector_Sl_statetracker_Sm__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tvector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector___nonzero__" "', argument " "1"" of type '" "vector< statetracker * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  result = (bool)vector_Sl_statetracker_Sm__Sg____nonzero__((vector< statetracker * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tvector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector___bool__" "', argument " "1"" of type '" "vector< statetracker * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  result = (bool)vector_Sl_statetracker_Sm__Sg____bool__((vector< statetracker * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< statetracker * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tvector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector___len__" "', argument " "1"" of type '" "vector< statetracker * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  result = vector_Sl_statetracker_Sm__Sg____len__((vector< statetracker * > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< statetracker * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tvector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector_pop" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  try {
    result = (vector< statetracker * >::value_type)vector_Sl_statetracker_Sm__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_statetracker, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  vector< statetracker * >::difference_type arg2 ;
  vector< statetracker * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< statetracker *,std::allocator< statetracker * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:tvector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector___getslice__" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tvector___getslice__" "', argument " "2"" of type '" "vector< statetracker * >::difference_type""'");
  } 
  arg2 = static_cast< vector< statetracker * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tvector___getslice__" "', argument " "3"" of type '" "vector< statetracker * >::difference_type""'");
  } 
  arg3 = static_cast< vector< statetracker * >::difference_type >(val3);
  try {
    result = (std::vector< statetracker *,std::allocator< statetracker * > > *)vector_Sl_statetracker_Sm__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  vector< statetracker * >::difference_type arg2 ;
  vector< statetracker * >::difference_type arg3 ;
  std::vector< statetracker *,std::allocator< statetracker * > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:tvector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector___setslice__" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tvector___setslice__" "', argument " "2"" of type '" "vector< statetracker * >::difference_type""'");
  } 
  arg2 = static_cast< vector< statetracker * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tvector___setslice__" "', argument " "3"" of type '" "vector< statetracker * >::difference_type""'");
  } 
  arg3 = static_cast< vector< statetracker * >::difference_type >(val3);
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "tvector___setslice__" "', argument " "4"" of type '" "std::vector< statetracker *,std::allocator< statetracker * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tvector___setslice__" "', argument " "4"" of type '" "std::vector< statetracker *,std::allocator< statetracker * > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    vector_Sl_statetracker_Sm__Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< statetracker *,std::allocator< statetracker * > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  vector< statetracker * >::difference_type arg2 ;
  vector< statetracker * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:tvector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector___setslice__" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tvector___setslice__" "', argument " "2"" of type '" "vector< statetracker * >::difference_type""'");
  } 
  arg2 = static_cast< vector< statetracker * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tvector___setslice__" "', argument " "3"" of type '" "vector< statetracker * >::difference_type""'");
  } 
  arg3 = static_cast< vector< statetracker * >::difference_type >(val3);
  try {
    vector_Sl_statetracker_Sm__Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tvector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_tvector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tvector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< statetracker * >::__setslice__(vector< statetracker * >::difference_type,vector< statetracker * >::difference_type,std::vector< statetracker *,std::allocator< statetracker * > > const &)\n"
    "    vector< statetracker * >::__setslice__(vector< statetracker * >::difference_type,vector< statetracker * >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tvector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  vector< statetracker * >::difference_type arg2 ;
  vector< statetracker * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:tvector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector___delslice__" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tvector___delslice__" "', argument " "2"" of type '" "vector< statetracker * >::difference_type""'");
  } 
  arg2 = static_cast< vector< statetracker * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tvector___delslice__" "', argument " "3"" of type '" "vector< statetracker * >::difference_type""'");
  } 
  arg3 = static_cast< vector< statetracker * >::difference_type >(val3);
  try {
    vector_Sl_statetracker_Sm__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  vector< statetracker * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tvector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector___delitem__" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tvector___delitem__" "', argument " "2"" of type '" "vector< statetracker * >::difference_type""'");
  } 
  arg2 = static_cast< vector< statetracker * >::difference_type >(val2);
  try {
    vector_Sl_statetracker_Sm__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< statetracker *,std::allocator< statetracker * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tvector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector___getitem__" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tvector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< statetracker *,std::allocator< statetracker * > > *)vector_Sl_statetracker_Sm__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< statetracker *,std::allocator< statetracker * > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:tvector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector___setitem__" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tvector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tvector___setitem__" "', argument " "3"" of type '" "std::vector< statetracker *,std::allocator< statetracker * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tvector___setitem__" "', argument " "3"" of type '" "std::vector< statetracker *,std::allocator< statetracker * > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    vector_Sl_statetracker_Sm__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< statetracker *,std::allocator< statetracker * > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tvector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector___setitem__" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tvector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_statetracker_Sm__Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tvector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector___delitem__" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tvector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_statetracker_Sm__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_tvector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tvector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tvector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< statetracker * >::__delitem__(vector< statetracker * >::difference_type)\n"
    "    vector< statetracker * >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tvector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  vector< statetracker * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< statetracker * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tvector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector___getitem__" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tvector___getitem__" "', argument " "2"" of type '" "vector< statetracker * >::difference_type""'");
  } 
  arg2 = static_cast< vector< statetracker * >::difference_type >(val2);
  try {
    result = (vector< statetracker * >::value_type)vector_Sl_statetracker_Sm__Sg____getitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_statetracker, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_tvector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tvector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tvector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< statetracker * >::__getitem__(PySliceObject *)\n"
    "    vector< statetracker * >::__getitem__(vector< statetracker * >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tvector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  vector< statetracker * >::difference_type arg2 ;
  vector< statetracker * >::value_type arg3 = (vector< statetracker * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:tvector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector___setitem__" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tvector___setitem__" "', argument " "2"" of type '" "vector< statetracker * >::difference_type""'");
  } 
  arg2 = static_cast< vector< statetracker * >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_statetracker, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tvector___setitem__" "', argument " "3"" of type '" "vector< statetracker * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< statetracker * >::value_type >(argp3);
  try {
    vector_Sl_statetracker_Sm__Sg____setitem____SWIG_2(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_tvector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_tvector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_statetracker, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_tvector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tvector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< statetracker * >::__setitem__(PySliceObject *,std::vector< statetracker *,std::allocator< statetracker * > > const &)\n"
    "    vector< statetracker * >::__setitem__(PySliceObject *)\n"
    "    vector< statetracker * >::__setitem__(vector< statetracker * >::difference_type,vector< statetracker * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tvector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  vector< statetracker * >::value_type arg2 = (vector< statetracker * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tvector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector_append" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_statetracker, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tvector_append" "', argument " "2"" of type '" "vector< statetracker * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< vector< statetracker * >::value_type >(argp2);
  vector_Sl_statetracker_Sm__Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tvector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_tvector")) SWIG_fail;
  result = (vector< statetracker * > *)new vector< statetracker * >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tvector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< statetracker * > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  vector< statetracker * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_tvector",&obj0)) SWIG_fail;
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_tvector" "', argument " "1"" of type '" "std::vector< statetracker * > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_tvector" "', argument " "1"" of type '" "std::vector< statetracker * > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (vector< statetracker * > *)new vector< statetracker * >((std::vector< statetracker * > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tvector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector_empty" "', argument " "1"" of type '" "vector< statetracker * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  result = (bool)((vector< statetracker * > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< statetracker * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tvector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector_size" "', argument " "1"" of type '" "vector< statetracker * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  result = ((vector< statetracker * > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tvector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector_clear" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  std::vector< statetracker * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tvector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector_swap" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tvector_swap" "', argument " "2"" of type '" "std::vector< statetracker * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tvector_swap" "', argument " "2"" of type '" "std::vector< statetracker * > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< statetracker * > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< statetracker * > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tvector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector_get_allocator" "', argument " "1"" of type '" "vector< statetracker * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  result = ((vector< statetracker * > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new vector< statetracker * >::allocator_type(static_cast< const vector< statetracker * >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_statetracker_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< statetracker * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tvector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector_begin" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< statetracker * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< statetracker * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tvector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector_end" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< statetracker * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< statetracker * >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tvector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector_rbegin" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< statetracker * >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< statetracker * >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tvector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector_rend" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< statetracker * >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tvector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< statetracker * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_tvector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_tvector" "', argument " "1"" of type '" "vector< statetracker * >::size_type""'");
  } 
  arg1 = static_cast< vector< statetracker * >::size_type >(val1);
  result = (vector< statetracker * > *)new vector< statetracker * >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tvector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector_pop_back" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  vector< statetracker * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tvector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector_resize" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tvector_resize" "', argument " "2"" of type '" "vector< statetracker * >::size_type""'");
  } 
  arg2 = static_cast< vector< statetracker * >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  vector< statetracker * >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< statetracker * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tvector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector_erase" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tvector_erase" "', argument " "2"" of type '" "vector< statetracker * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< statetracker * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< statetracker * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tvector_erase" "', argument " "2"" of type '" "vector< statetracker * >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< statetracker * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  vector< statetracker * >::iterator arg2 ;
  vector< statetracker * >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< statetracker * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:tvector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector_erase" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tvector_erase" "', argument " "2"" of type '" "vector< statetracker * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< statetracker * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< statetracker * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tvector_erase" "', argument " "2"" of type '" "vector< statetracker * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tvector_erase" "', argument " "3"" of type '" "vector< statetracker * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< statetracker * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< statetracker * >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tvector_erase" "', argument " "3"" of type '" "vector< statetracker * >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< statetracker * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< statetracker * >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_tvector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< statetracker * >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< statetracker * >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_tvector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tvector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< statetracker * >::erase(vector< statetracker * >::iterator)\n"
    "    vector< statetracker * >::erase(vector< statetracker * >::iterator,vector< statetracker * >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_tvector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * >::size_type arg1 ;
  vector< statetracker * >::value_type arg2 = (vector< statetracker * >::value_type) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< statetracker * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_tvector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_tvector" "', argument " "1"" of type '" "vector< statetracker * >::size_type""'");
  } 
  arg1 = static_cast< vector< statetracker * >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_statetracker, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_tvector" "', argument " "2"" of type '" "vector< statetracker * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< vector< statetracker * >::value_type >(argp2);
  result = (vector< statetracker * > *)new vector< statetracker * >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tvector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_tvector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_tvector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_tvector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_statetracker, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_tvector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_tvector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< statetracker * >::vector()\n"
    "    vector< statetracker * >::vector(std::vector< statetracker * > const &)\n"
    "    vector< statetracker * >::vector(vector< statetracker * >::size_type)\n"
    "    vector< statetracker * >::vector(vector< statetracker * >::size_type,vector< statetracker * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tvector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  vector< statetracker * >::value_type arg2 = (vector< statetracker * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tvector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector_push_back" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_statetracker, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tvector_push_back" "', argument " "2"" of type '" "vector< statetracker * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< vector< statetracker * >::value_type >(argp2);
  (arg1)->push_back(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< statetracker * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tvector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector_front" "', argument " "1"" of type '" "vector< statetracker * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  result = (vector< statetracker * >::value_type)((vector< statetracker * > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_statetracker, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< statetracker * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tvector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector_back" "', argument " "1"" of type '" "vector< statetracker * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  result = (vector< statetracker * >::value_type)((vector< statetracker * > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_statetracker, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  vector< statetracker * >::size_type arg2 ;
  vector< statetracker * >::value_type arg3 = (vector< statetracker * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:tvector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector_assign" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tvector_assign" "', argument " "2"" of type '" "vector< statetracker * >::size_type""'");
  } 
  arg2 = static_cast< vector< statetracker * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_statetracker, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tvector_assign" "', argument " "3"" of type '" "vector< statetracker * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< statetracker * >::value_type >(argp3);
  (arg1)->assign(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  vector< statetracker * >::size_type arg2 ;
  vector< statetracker * >::value_type arg3 = (vector< statetracker * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:tvector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector_resize" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tvector_resize" "', argument " "2"" of type '" "vector< statetracker * >::size_type""'");
  } 
  arg2 = static_cast< vector< statetracker * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_statetracker, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tvector_resize" "', argument " "3"" of type '" "vector< statetracker * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< statetracker * >::value_type >(argp3);
  (arg1)->resize(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tvector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_statetracker, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_tvector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tvector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< statetracker * >::resize(vector< statetracker * >::size_type)\n"
    "    vector< statetracker * >::resize(vector< statetracker * >::size_type,vector< statetracker * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tvector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  vector< statetracker * >::iterator arg2 ;
  vector< statetracker * >::value_type arg3 = (vector< statetracker * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< statetracker * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:tvector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector_insert" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tvector_insert" "', argument " "2"" of type '" "vector< statetracker * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< statetracker * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< statetracker * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tvector_insert" "', argument " "2"" of type '" "vector< statetracker * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_statetracker, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tvector_insert" "', argument " "3"" of type '" "vector< statetracker * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< statetracker * >::value_type >(argp3);
  result = (arg1)->insert(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< statetracker * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  vector< statetracker * >::iterator arg2 ;
  vector< statetracker * >::size_type arg3 ;
  vector< statetracker * >::value_type arg4 = (vector< statetracker * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:tvector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector_insert" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tvector_insert" "', argument " "2"" of type '" "vector< statetracker * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< statetracker * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< statetracker * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tvector_insert" "', argument " "2"" of type '" "vector< statetracker * >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tvector_insert" "', argument " "3"" of type '" "vector< statetracker * >::size_type""'");
  } 
  arg3 = static_cast< vector< statetracker * >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_statetracker, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "tvector_insert" "', argument " "4"" of type '" "vector< statetracker * >::value_type""'"); 
  }
  arg4 = reinterpret_cast< vector< statetracker * >::value_type >(argp4);
  (arg1)->insert(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< statetracker * >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_statetracker, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_tvector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< statetracker * >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_statetracker, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_tvector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tvector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< statetracker * >::insert(vector< statetracker * >::iterator,vector< statetracker * >::value_type)\n"
    "    vector< statetracker * >::insert(vector< statetracker * >::iterator,vector< statetracker * >::size_type,vector< statetracker * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tvector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  vector< statetracker * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tvector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector_reserve" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tvector_reserve" "', argument " "2"" of type '" "vector< statetracker * >::size_type""'");
  } 
  arg2 = static_cast< vector< statetracker * >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tvector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< statetracker * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tvector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tvector_capacity" "', argument " "1"" of type '" "vector< statetracker * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  result = ((vector< statetracker * > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tvector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< statetracker * > *arg1 = (vector< statetracker * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_tvector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tvector" "', argument " "1"" of type '" "vector< statetracker * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< statetracker * > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tvector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_constraintvector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:constraintvector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector_iterator" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  result = (swig::SwigPyIterator *)vector_Sl_constraint_Sm__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:constraintvector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector___nonzero__" "', argument " "1"" of type '" "vector< constraint * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  result = (bool)vector_Sl_constraint_Sm__Sg____nonzero__((vector< constraint * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:constraintvector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector___bool__" "', argument " "1"" of type '" "vector< constraint * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  result = (bool)vector_Sl_constraint_Sm__Sg____bool__((vector< constraint * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< constraint * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:constraintvector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector___len__" "', argument " "1"" of type '" "vector< constraint * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  result = vector_Sl_constraint_Sm__Sg____len__((vector< constraint * > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< constraint * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:constraintvector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector_pop" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  try {
    result = (vector< constraint * >::value_type)vector_Sl_constraint_Sm__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  vector< constraint * >::difference_type arg2 ;
  vector< constraint * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< constraint *,std::allocator< constraint * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:constraintvector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector___getslice__" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "constraintvector___getslice__" "', argument " "2"" of type '" "vector< constraint * >::difference_type""'");
  } 
  arg2 = static_cast< vector< constraint * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "constraintvector___getslice__" "', argument " "3"" of type '" "vector< constraint * >::difference_type""'");
  } 
  arg3 = static_cast< vector< constraint * >::difference_type >(val3);
  try {
    result = (std::vector< constraint *,std::allocator< constraint * > > *)vector_Sl_constraint_Sm__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  vector< constraint * >::difference_type arg2 ;
  vector< constraint * >::difference_type arg3 ;
  std::vector< constraint *,std::allocator< constraint * > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:constraintvector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector___setslice__" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "constraintvector___setslice__" "', argument " "2"" of type '" "vector< constraint * >::difference_type""'");
  } 
  arg2 = static_cast< vector< constraint * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "constraintvector___setslice__" "', argument " "3"" of type '" "vector< constraint * >::difference_type""'");
  } 
  arg3 = static_cast< vector< constraint * >::difference_type >(val3);
  {
    std::vector<constraint*,std::allocator< constraint * > > *ptr = (std::vector<constraint*,std::allocator< constraint * > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "constraintvector___setslice__" "', argument " "4"" of type '" "std::vector< constraint *,std::allocator< constraint * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "constraintvector___setslice__" "', argument " "4"" of type '" "std::vector< constraint *,std::allocator< constraint * > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    vector_Sl_constraint_Sm__Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< constraint *,std::allocator< constraint * > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  vector< constraint * >::difference_type arg2 ;
  vector< constraint * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:constraintvector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector___setslice__" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "constraintvector___setslice__" "', argument " "2"" of type '" "vector< constraint * >::difference_type""'");
  } 
  arg2 = static_cast< vector< constraint * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "constraintvector___setslice__" "', argument " "3"" of type '" "vector< constraint * >::difference_type""'");
  } 
  arg3 = static_cast< vector< constraint * >::difference_type >(val3);
  try {
    vector_Sl_constraint_Sm__Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_constraintvector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<constraint*,std::allocator< constraint * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_constraintvector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'constraintvector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< constraint * >::__setslice__(vector< constraint * >::difference_type,vector< constraint * >::difference_type,std::vector< constraint *,std::allocator< constraint * > > const &)\n"
    "    vector< constraint * >::__setslice__(vector< constraint * >::difference_type,vector< constraint * >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_constraintvector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  vector< constraint * >::difference_type arg2 ;
  vector< constraint * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:constraintvector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector___delslice__" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "constraintvector___delslice__" "', argument " "2"" of type '" "vector< constraint * >::difference_type""'");
  } 
  arg2 = static_cast< vector< constraint * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "constraintvector___delslice__" "', argument " "3"" of type '" "vector< constraint * >::difference_type""'");
  } 
  arg3 = static_cast< vector< constraint * >::difference_type >(val3);
  try {
    vector_Sl_constraint_Sm__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  vector< constraint * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:constraintvector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector___delitem__" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "constraintvector___delitem__" "', argument " "2"" of type '" "vector< constraint * >::difference_type""'");
  } 
  arg2 = static_cast< vector< constraint * >::difference_type >(val2);
  try {
    vector_Sl_constraint_Sm__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< constraint *,std::allocator< constraint * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:constraintvector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector___getitem__" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "constraintvector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< constraint *,std::allocator< constraint * > > *)vector_Sl_constraint_Sm__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< constraint *,std::allocator< constraint * > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:constraintvector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector___setitem__" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "constraintvector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<constraint*,std::allocator< constraint * > > *ptr = (std::vector<constraint*,std::allocator< constraint * > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "constraintvector___setitem__" "', argument " "3"" of type '" "std::vector< constraint *,std::allocator< constraint * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "constraintvector___setitem__" "', argument " "3"" of type '" "std::vector< constraint *,std::allocator< constraint * > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    vector_Sl_constraint_Sm__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< constraint *,std::allocator< constraint * > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:constraintvector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector___setitem__" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "constraintvector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_constraint_Sm__Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:constraintvector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector___delitem__" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "constraintvector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_constraint_Sm__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_constraintvector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_constraintvector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'constraintvector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< constraint * >::__delitem__(vector< constraint * >::difference_type)\n"
    "    vector< constraint * >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_constraintvector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  vector< constraint * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< constraint * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:constraintvector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector___getitem__" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "constraintvector___getitem__" "', argument " "2"" of type '" "vector< constraint * >::difference_type""'");
  } 
  arg2 = static_cast< vector< constraint * >::difference_type >(val2);
  try {
    result = (vector< constraint * >::value_type)vector_Sl_constraint_Sm__Sg____getitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_constraintvector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_constraintvector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'constraintvector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< constraint * >::__getitem__(PySliceObject *)\n"
    "    vector< constraint * >::__getitem__(vector< constraint * >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_constraintvector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  vector< constraint * >::difference_type arg2 ;
  vector< constraint * >::value_type arg3 = (vector< constraint * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:constraintvector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector___setitem__" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "constraintvector___setitem__" "', argument " "2"" of type '" "vector< constraint * >::difference_type""'");
  } 
  arg2 = static_cast< vector< constraint * >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_constraint, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "constraintvector___setitem__" "', argument " "3"" of type '" "vector< constraint * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< constraint * >::value_type >(argp3);
  try {
    vector_Sl_constraint_Sm__Sg____setitem____SWIG_2(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_constraintvector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<constraint*,std::allocator< constraint * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_constraintvector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_constraint, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_constraintvector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'constraintvector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< constraint * >::__setitem__(PySliceObject *,std::vector< constraint *,std::allocator< constraint * > > const &)\n"
    "    vector< constraint * >::__setitem__(PySliceObject *)\n"
    "    vector< constraint * >::__setitem__(vector< constraint * >::difference_type,vector< constraint * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_constraintvector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  vector< constraint * >::value_type arg2 = (vector< constraint * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:constraintvector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector_append" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_constraint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "constraintvector_append" "', argument " "2"" of type '" "vector< constraint * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< vector< constraint * >::value_type >(argp2);
  vector_Sl_constraint_Sm__Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_constraintvector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_constraintvector")) SWIG_fail;
  result = (vector< constraint * > *)new vector< constraint * >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_constraintvector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< constraint * > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  vector< constraint * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_constraintvector",&obj0)) SWIG_fail;
  {
    std::vector<constraint*,std::allocator< constraint * > > *ptr = (std::vector<constraint*,std::allocator< constraint * > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_constraintvector" "', argument " "1"" of type '" "std::vector< constraint * > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_constraintvector" "', argument " "1"" of type '" "std::vector< constraint * > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (vector< constraint * > *)new vector< constraint * >((std::vector< constraint * > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:constraintvector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector_empty" "', argument " "1"" of type '" "vector< constraint * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  result = (bool)((vector< constraint * > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< constraint * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:constraintvector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector_size" "', argument " "1"" of type '" "vector< constraint * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  result = ((vector< constraint * > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:constraintvector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector_clear" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  std::vector< constraint * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:constraintvector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector_swap" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "constraintvector_swap" "', argument " "2"" of type '" "std::vector< constraint * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "constraintvector_swap" "', argument " "2"" of type '" "std::vector< constraint * > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< constraint * > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< constraint * > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:constraintvector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector_get_allocator" "', argument " "1"" of type '" "vector< constraint * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  result = ((vector< constraint * > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new vector< constraint * >::allocator_type(static_cast< const vector< constraint * >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_constraint_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< constraint * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:constraintvector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector_begin" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< constraint * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< constraint * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:constraintvector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector_end" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< constraint * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< constraint * >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:constraintvector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector_rbegin" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< constraint * >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< constraint * >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:constraintvector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector_rend" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< constraint * >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_constraintvector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< constraint * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_constraintvector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_constraintvector" "', argument " "1"" of type '" "vector< constraint * >::size_type""'");
  } 
  arg1 = static_cast< vector< constraint * >::size_type >(val1);
  result = (vector< constraint * > *)new vector< constraint * >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:constraintvector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector_pop_back" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  vector< constraint * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:constraintvector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector_resize" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "constraintvector_resize" "', argument " "2"" of type '" "vector< constraint * >::size_type""'");
  } 
  arg2 = static_cast< vector< constraint * >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  vector< constraint * >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< constraint * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:constraintvector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector_erase" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "constraintvector_erase" "', argument " "2"" of type '" "vector< constraint * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< constraint * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< constraint * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "constraintvector_erase" "', argument " "2"" of type '" "vector< constraint * >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< constraint * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  vector< constraint * >::iterator arg2 ;
  vector< constraint * >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< constraint * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:constraintvector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector_erase" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "constraintvector_erase" "', argument " "2"" of type '" "vector< constraint * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< constraint * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< constraint * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "constraintvector_erase" "', argument " "2"" of type '" "vector< constraint * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "constraintvector_erase" "', argument " "3"" of type '" "vector< constraint * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< constraint * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< constraint * >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "constraintvector_erase" "', argument " "3"" of type '" "vector< constraint * >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< constraint * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< constraint * >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_constraintvector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< constraint * >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< constraint * >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_constraintvector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'constraintvector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< constraint * >::erase(vector< constraint * >::iterator)\n"
    "    vector< constraint * >::erase(vector< constraint * >::iterator,vector< constraint * >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_constraintvector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * >::size_type arg1 ;
  vector< constraint * >::value_type arg2 = (vector< constraint * >::value_type) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< constraint * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_constraintvector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_constraintvector" "', argument " "1"" of type '" "vector< constraint * >::size_type""'");
  } 
  arg1 = static_cast< vector< constraint * >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_constraint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_constraintvector" "', argument " "2"" of type '" "vector< constraint * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< vector< constraint * >::value_type >(argp2);
  result = (vector< constraint * > *)new vector< constraint * >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_constraintvector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_constraintvector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_constraintvector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<constraint*,std::allocator< constraint * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_constraintvector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_constraint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_constraintvector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_constraintvector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< constraint * >::vector()\n"
    "    vector< constraint * >::vector(std::vector< constraint * > const &)\n"
    "    vector< constraint * >::vector(vector< constraint * >::size_type)\n"
    "    vector< constraint * >::vector(vector< constraint * >::size_type,vector< constraint * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_constraintvector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  vector< constraint * >::value_type arg2 = (vector< constraint * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:constraintvector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector_push_back" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_constraint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "constraintvector_push_back" "', argument " "2"" of type '" "vector< constraint * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< vector< constraint * >::value_type >(argp2);
  (arg1)->push_back(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< constraint * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:constraintvector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector_front" "', argument " "1"" of type '" "vector< constraint * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  result = (vector< constraint * >::value_type)((vector< constraint * > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< constraint * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:constraintvector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector_back" "', argument " "1"" of type '" "vector< constraint * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  result = (vector< constraint * >::value_type)((vector< constraint * > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  vector< constraint * >::size_type arg2 ;
  vector< constraint * >::value_type arg3 = (vector< constraint * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:constraintvector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector_assign" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "constraintvector_assign" "', argument " "2"" of type '" "vector< constraint * >::size_type""'");
  } 
  arg2 = static_cast< vector< constraint * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_constraint, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "constraintvector_assign" "', argument " "3"" of type '" "vector< constraint * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< constraint * >::value_type >(argp3);
  (arg1)->assign(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  vector< constraint * >::size_type arg2 ;
  vector< constraint * >::value_type arg3 = (vector< constraint * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:constraintvector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector_resize" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "constraintvector_resize" "', argument " "2"" of type '" "vector< constraint * >::size_type""'");
  } 
  arg2 = static_cast< vector< constraint * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_constraint, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "constraintvector_resize" "', argument " "3"" of type '" "vector< constraint * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< constraint * >::value_type >(argp3);
  (arg1)->resize(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_constraintvector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_constraint, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_constraintvector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'constraintvector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< constraint * >::resize(vector< constraint * >::size_type)\n"
    "    vector< constraint * >::resize(vector< constraint * >::size_type,vector< constraint * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_constraintvector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  vector< constraint * >::iterator arg2 ;
  vector< constraint * >::value_type arg3 = (vector< constraint * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< constraint * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:constraintvector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector_insert" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "constraintvector_insert" "', argument " "2"" of type '" "vector< constraint * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< constraint * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< constraint * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "constraintvector_insert" "', argument " "2"" of type '" "vector< constraint * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_constraint, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "constraintvector_insert" "', argument " "3"" of type '" "vector< constraint * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< constraint * >::value_type >(argp3);
  result = (arg1)->insert(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< constraint * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  vector< constraint * >::iterator arg2 ;
  vector< constraint * >::size_type arg3 ;
  vector< constraint * >::value_type arg4 = (vector< constraint * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:constraintvector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector_insert" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "constraintvector_insert" "', argument " "2"" of type '" "vector< constraint * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< constraint * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< constraint * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "constraintvector_insert" "', argument " "2"" of type '" "vector< constraint * >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "constraintvector_insert" "', argument " "3"" of type '" "vector< constraint * >::size_type""'");
  } 
  arg3 = static_cast< vector< constraint * >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_constraint, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "constraintvector_insert" "', argument " "4"" of type '" "vector< constraint * >::value_type""'"); 
  }
  arg4 = reinterpret_cast< vector< constraint * >::value_type >(argp4);
  (arg1)->insert(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< constraint * >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_constraint, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_constraintvector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< constraint * >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_constraint, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_constraintvector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'constraintvector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< constraint * >::insert(vector< constraint * >::iterator,vector< constraint * >::value_type)\n"
    "    vector< constraint * >::insert(vector< constraint * >::iterator,vector< constraint * >::size_type,vector< constraint * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_constraintvector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  vector< constraint * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:constraintvector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector_reserve" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "constraintvector_reserve" "', argument " "2"" of type '" "vector< constraint * >::size_type""'");
  } 
  arg2 = static_cast< vector< constraint * >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraintvector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< constraint * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:constraintvector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraintvector_capacity" "', argument " "1"" of type '" "vector< constraint * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  result = ((vector< constraint * > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_constraintvector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< constraint * > *arg1 = (vector< constraint * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_constraintvector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_constraintvector" "', argument " "1"" of type '" "vector< constraint * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< constraint * > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *constraintvector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_aRK4vector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:aRK4vector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector_iterator" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  result = (swig::SwigPyIterator *)vector_Sl_atomvecRK4_Sm__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:aRK4vector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector___nonzero__" "', argument " "1"" of type '" "vector< atomvecRK4 * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  result = (bool)vector_Sl_atomvecRK4_Sm__Sg____nonzero__((vector< atomvecRK4 * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:aRK4vector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector___bool__" "', argument " "1"" of type '" "vector< atomvecRK4 * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  result = (bool)vector_Sl_atomvecRK4_Sm__Sg____bool__((vector< atomvecRK4 * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< atomvecRK4 * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:aRK4vector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector___len__" "', argument " "1"" of type '" "vector< atomvecRK4 * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  result = vector_Sl_atomvecRK4_Sm__Sg____len__((vector< atomvecRK4 * > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< atomvecRK4 * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:aRK4vector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector_pop" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  try {
    result = (vector< atomvecRK4 * >::value_type)vector_Sl_atomvecRK4_Sm__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomvecRK4, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  vector< atomvecRK4 * >::difference_type arg2 ;
  vector< atomvecRK4 * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< atomvecRK4 *,std::allocator< atomvecRK4 * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:aRK4vector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector___getslice__" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "aRK4vector___getslice__" "', argument " "2"" of type '" "vector< atomvecRK4 * >::difference_type""'");
  } 
  arg2 = static_cast< vector< atomvecRK4 * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "aRK4vector___getslice__" "', argument " "3"" of type '" "vector< atomvecRK4 * >::difference_type""'");
  } 
  arg3 = static_cast< vector< atomvecRK4 * >::difference_type >(val3);
  try {
    result = (std::vector< atomvecRK4 *,std::allocator< atomvecRK4 * > > *)vector_Sl_atomvecRK4_Sm__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  vector< atomvecRK4 * >::difference_type arg2 ;
  vector< atomvecRK4 * >::difference_type arg3 ;
  std::vector< atomvecRK4 *,std::allocator< atomvecRK4 * > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:aRK4vector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector___setslice__" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "aRK4vector___setslice__" "', argument " "2"" of type '" "vector< atomvecRK4 * >::difference_type""'");
  } 
  arg2 = static_cast< vector< atomvecRK4 * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "aRK4vector___setslice__" "', argument " "3"" of type '" "vector< atomvecRK4 * >::difference_type""'");
  } 
  arg3 = static_cast< vector< atomvecRK4 * >::difference_type >(val3);
  {
    std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > > *ptr = (std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "aRK4vector___setslice__" "', argument " "4"" of type '" "std::vector< atomvecRK4 *,std::allocator< atomvecRK4 * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "aRK4vector___setslice__" "', argument " "4"" of type '" "std::vector< atomvecRK4 *,std::allocator< atomvecRK4 * > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    vector_Sl_atomvecRK4_Sm__Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< atomvecRK4 *,std::allocator< atomvecRK4 * > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  vector< atomvecRK4 * >::difference_type arg2 ;
  vector< atomvecRK4 * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:aRK4vector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector___setslice__" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "aRK4vector___setslice__" "', argument " "2"" of type '" "vector< atomvecRK4 * >::difference_type""'");
  } 
  arg2 = static_cast< vector< atomvecRK4 * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "aRK4vector___setslice__" "', argument " "3"" of type '" "vector< atomvecRK4 * >::difference_type""'");
  } 
  arg3 = static_cast< vector< atomvecRK4 * >::difference_type >(val3);
  try {
    vector_Sl_atomvecRK4_Sm__Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_aRK4vector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_aRK4vector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'aRK4vector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< atomvecRK4 * >::__setslice__(vector< atomvecRK4 * >::difference_type,vector< atomvecRK4 * >::difference_type,std::vector< atomvecRK4 *,std::allocator< atomvecRK4 * > > const &)\n"
    "    vector< atomvecRK4 * >::__setslice__(vector< atomvecRK4 * >::difference_type,vector< atomvecRK4 * >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_aRK4vector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  vector< atomvecRK4 * >::difference_type arg2 ;
  vector< atomvecRK4 * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:aRK4vector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector___delslice__" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "aRK4vector___delslice__" "', argument " "2"" of type '" "vector< atomvecRK4 * >::difference_type""'");
  } 
  arg2 = static_cast< vector< atomvecRK4 * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "aRK4vector___delslice__" "', argument " "3"" of type '" "vector< atomvecRK4 * >::difference_type""'");
  } 
  arg3 = static_cast< vector< atomvecRK4 * >::difference_type >(val3);
  try {
    vector_Sl_atomvecRK4_Sm__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  vector< atomvecRK4 * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:aRK4vector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector___delitem__" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "aRK4vector___delitem__" "', argument " "2"" of type '" "vector< atomvecRK4 * >::difference_type""'");
  } 
  arg2 = static_cast< vector< atomvecRK4 * >::difference_type >(val2);
  try {
    vector_Sl_atomvecRK4_Sm__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< atomvecRK4 *,std::allocator< atomvecRK4 * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:aRK4vector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector___getitem__" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "aRK4vector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< atomvecRK4 *,std::allocator< atomvecRK4 * > > *)vector_Sl_atomvecRK4_Sm__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< atomvecRK4 *,std::allocator< atomvecRK4 * > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:aRK4vector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector___setitem__" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "aRK4vector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > > *ptr = (std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "aRK4vector___setitem__" "', argument " "3"" of type '" "std::vector< atomvecRK4 *,std::allocator< atomvecRK4 * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "aRK4vector___setitem__" "', argument " "3"" of type '" "std::vector< atomvecRK4 *,std::allocator< atomvecRK4 * > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    vector_Sl_atomvecRK4_Sm__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< atomvecRK4 *,std::allocator< atomvecRK4 * > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:aRK4vector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector___setitem__" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "aRK4vector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_atomvecRK4_Sm__Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:aRK4vector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector___delitem__" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "aRK4vector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_atomvecRK4_Sm__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_aRK4vector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_aRK4vector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'aRK4vector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< atomvecRK4 * >::__delitem__(vector< atomvecRK4 * >::difference_type)\n"
    "    vector< atomvecRK4 * >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_aRK4vector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  vector< atomvecRK4 * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< atomvecRK4 * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:aRK4vector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector___getitem__" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "aRK4vector___getitem__" "', argument " "2"" of type '" "vector< atomvecRK4 * >::difference_type""'");
  } 
  arg2 = static_cast< vector< atomvecRK4 * >::difference_type >(val2);
  try {
    result = (vector< atomvecRK4 * >::value_type)vector_Sl_atomvecRK4_Sm__Sg____getitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomvecRK4, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_aRK4vector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_aRK4vector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'aRK4vector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< atomvecRK4 * >::__getitem__(PySliceObject *)\n"
    "    vector< atomvecRK4 * >::__getitem__(vector< atomvecRK4 * >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_aRK4vector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  vector< atomvecRK4 * >::difference_type arg2 ;
  vector< atomvecRK4 * >::value_type arg3 = (vector< atomvecRK4 * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:aRK4vector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector___setitem__" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "aRK4vector___setitem__" "', argument " "2"" of type '" "vector< atomvecRK4 * >::difference_type""'");
  } 
  arg2 = static_cast< vector< atomvecRK4 * >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_atomvecRK4, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "aRK4vector___setitem__" "', argument " "3"" of type '" "vector< atomvecRK4 * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< atomvecRK4 * >::value_type >(argp3);
  try {
    vector_Sl_atomvecRK4_Sm__Sg____setitem____SWIG_2(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_aRK4vector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_aRK4vector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_atomvecRK4, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_aRK4vector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'aRK4vector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< atomvecRK4 * >::__setitem__(PySliceObject *,std::vector< atomvecRK4 *,std::allocator< atomvecRK4 * > > const &)\n"
    "    vector< atomvecRK4 * >::__setitem__(PySliceObject *)\n"
    "    vector< atomvecRK4 * >::__setitem__(vector< atomvecRK4 * >::difference_type,vector< atomvecRK4 * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_aRK4vector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  vector< atomvecRK4 * >::value_type arg2 = (vector< atomvecRK4 * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:aRK4vector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector_append" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomvecRK4, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "aRK4vector_append" "', argument " "2"" of type '" "vector< atomvecRK4 * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< vector< atomvecRK4 * >::value_type >(argp2);
  vector_Sl_atomvecRK4_Sm__Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_aRK4vector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_aRK4vector")) SWIG_fail;
  result = (vector< atomvecRK4 * > *)new vector< atomvecRK4 * >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_aRK4vector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< atomvecRK4 * > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  vector< atomvecRK4 * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_aRK4vector",&obj0)) SWIG_fail;
  {
    std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > > *ptr = (std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_aRK4vector" "', argument " "1"" of type '" "std::vector< atomvecRK4 * > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_aRK4vector" "', argument " "1"" of type '" "std::vector< atomvecRK4 * > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (vector< atomvecRK4 * > *)new vector< atomvecRK4 * >((std::vector< atomvecRK4 * > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:aRK4vector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector_empty" "', argument " "1"" of type '" "vector< atomvecRK4 * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  result = (bool)((vector< atomvecRK4 * > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< atomvecRK4 * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:aRK4vector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector_size" "', argument " "1"" of type '" "vector< atomvecRK4 * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  result = ((vector< atomvecRK4 * > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:aRK4vector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector_clear" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  std::vector< atomvecRK4 * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:aRK4vector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector_swap" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "aRK4vector_swap" "', argument " "2"" of type '" "std::vector< atomvecRK4 * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "aRK4vector_swap" "', argument " "2"" of type '" "std::vector< atomvecRK4 * > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< atomvecRK4 * > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< atomvecRK4 * > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:aRK4vector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector_get_allocator" "', argument " "1"" of type '" "vector< atomvecRK4 * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  result = ((vector< atomvecRK4 * > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new vector< atomvecRK4 * >::allocator_type(static_cast< const vector< atomvecRK4 * >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_atomvecRK4_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< atomvecRK4 * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:aRK4vector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector_begin" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< atomvecRK4 * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< atomvecRK4 * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:aRK4vector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector_end" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< atomvecRK4 * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< atomvecRK4 * >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:aRK4vector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector_rbegin" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< atomvecRK4 * >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< atomvecRK4 * >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:aRK4vector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector_rend" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< atomvecRK4 * >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_aRK4vector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< atomvecRK4 * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_aRK4vector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_aRK4vector" "', argument " "1"" of type '" "vector< atomvecRK4 * >::size_type""'");
  } 
  arg1 = static_cast< vector< atomvecRK4 * >::size_type >(val1);
  result = (vector< atomvecRK4 * > *)new vector< atomvecRK4 * >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:aRK4vector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector_pop_back" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  vector< atomvecRK4 * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:aRK4vector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector_resize" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "aRK4vector_resize" "', argument " "2"" of type '" "vector< atomvecRK4 * >::size_type""'");
  } 
  arg2 = static_cast< vector< atomvecRK4 * >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  vector< atomvecRK4 * >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< atomvecRK4 * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:aRK4vector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector_erase" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "aRK4vector_erase" "', argument " "2"" of type '" "vector< atomvecRK4 * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< atomvecRK4 * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< atomvecRK4 * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "aRK4vector_erase" "', argument " "2"" of type '" "vector< atomvecRK4 * >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< atomvecRK4 * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  vector< atomvecRK4 * >::iterator arg2 ;
  vector< atomvecRK4 * >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< atomvecRK4 * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:aRK4vector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector_erase" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "aRK4vector_erase" "', argument " "2"" of type '" "vector< atomvecRK4 * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< atomvecRK4 * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< atomvecRK4 * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "aRK4vector_erase" "', argument " "2"" of type '" "vector< atomvecRK4 * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "aRK4vector_erase" "', argument " "3"" of type '" "vector< atomvecRK4 * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< atomvecRK4 * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< atomvecRK4 * >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "aRK4vector_erase" "', argument " "3"" of type '" "vector< atomvecRK4 * >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< atomvecRK4 * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< atomvecRK4 * >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_aRK4vector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< atomvecRK4 * >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< atomvecRK4 * >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_aRK4vector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'aRK4vector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< atomvecRK4 * >::erase(vector< atomvecRK4 * >::iterator)\n"
    "    vector< atomvecRK4 * >::erase(vector< atomvecRK4 * >::iterator,vector< atomvecRK4 * >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_aRK4vector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * >::size_type arg1 ;
  vector< atomvecRK4 * >::value_type arg2 = (vector< atomvecRK4 * >::value_type) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< atomvecRK4 * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_aRK4vector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_aRK4vector" "', argument " "1"" of type '" "vector< atomvecRK4 * >::size_type""'");
  } 
  arg1 = static_cast< vector< atomvecRK4 * >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomvecRK4, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_aRK4vector" "', argument " "2"" of type '" "vector< atomvecRK4 * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< vector< atomvecRK4 * >::value_type >(argp2);
  result = (vector< atomvecRK4 * > *)new vector< atomvecRK4 * >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_aRK4vector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_aRK4vector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_aRK4vector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_aRK4vector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_atomvecRK4, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_aRK4vector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_aRK4vector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< atomvecRK4 * >::vector()\n"
    "    vector< atomvecRK4 * >::vector(std::vector< atomvecRK4 * > const &)\n"
    "    vector< atomvecRK4 * >::vector(vector< atomvecRK4 * >::size_type)\n"
    "    vector< atomvecRK4 * >::vector(vector< atomvecRK4 * >::size_type,vector< atomvecRK4 * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_aRK4vector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  vector< atomvecRK4 * >::value_type arg2 = (vector< atomvecRK4 * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:aRK4vector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector_push_back" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomvecRK4, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "aRK4vector_push_back" "', argument " "2"" of type '" "vector< atomvecRK4 * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< vector< atomvecRK4 * >::value_type >(argp2);
  (arg1)->push_back(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< atomvecRK4 * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:aRK4vector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector_front" "', argument " "1"" of type '" "vector< atomvecRK4 * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  result = (vector< atomvecRK4 * >::value_type)((vector< atomvecRK4 * > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomvecRK4, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< atomvecRK4 * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:aRK4vector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector_back" "', argument " "1"" of type '" "vector< atomvecRK4 * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  result = (vector< atomvecRK4 * >::value_type)((vector< atomvecRK4 * > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomvecRK4, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  vector< atomvecRK4 * >::size_type arg2 ;
  vector< atomvecRK4 * >::value_type arg3 = (vector< atomvecRK4 * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:aRK4vector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector_assign" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "aRK4vector_assign" "', argument " "2"" of type '" "vector< atomvecRK4 * >::size_type""'");
  } 
  arg2 = static_cast< vector< atomvecRK4 * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_atomvecRK4, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "aRK4vector_assign" "', argument " "3"" of type '" "vector< atomvecRK4 * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< atomvecRK4 * >::value_type >(argp3);
  (arg1)->assign(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  vector< atomvecRK4 * >::size_type arg2 ;
  vector< atomvecRK4 * >::value_type arg3 = (vector< atomvecRK4 * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:aRK4vector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector_resize" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "aRK4vector_resize" "', argument " "2"" of type '" "vector< atomvecRK4 * >::size_type""'");
  } 
  arg2 = static_cast< vector< atomvecRK4 * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_atomvecRK4, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "aRK4vector_resize" "', argument " "3"" of type '" "vector< atomvecRK4 * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< atomvecRK4 * >::value_type >(argp3);
  (arg1)->resize(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_aRK4vector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_atomvecRK4, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_aRK4vector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'aRK4vector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< atomvecRK4 * >::resize(vector< atomvecRK4 * >::size_type)\n"
    "    vector< atomvecRK4 * >::resize(vector< atomvecRK4 * >::size_type,vector< atomvecRK4 * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_aRK4vector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  vector< atomvecRK4 * >::iterator arg2 ;
  vector< atomvecRK4 * >::value_type arg3 = (vector< atomvecRK4 * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< atomvecRK4 * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:aRK4vector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector_insert" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "aRK4vector_insert" "', argument " "2"" of type '" "vector< atomvecRK4 * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< atomvecRK4 * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< atomvecRK4 * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "aRK4vector_insert" "', argument " "2"" of type '" "vector< atomvecRK4 * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_atomvecRK4, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "aRK4vector_insert" "', argument " "3"" of type '" "vector< atomvecRK4 * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< vector< atomvecRK4 * >::value_type >(argp3);
  result = (arg1)->insert(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< atomvecRK4 * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  vector< atomvecRK4 * >::iterator arg2 ;
  vector< atomvecRK4 * >::size_type arg3 ;
  vector< atomvecRK4 * >::value_type arg4 = (vector< atomvecRK4 * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:aRK4vector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector_insert" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "aRK4vector_insert" "', argument " "2"" of type '" "vector< atomvecRK4 * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< atomvecRK4 * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< atomvecRK4 * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "aRK4vector_insert" "', argument " "2"" of type '" "vector< atomvecRK4 * >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "aRK4vector_insert" "', argument " "3"" of type '" "vector< atomvecRK4 * >::size_type""'");
  } 
  arg3 = static_cast< vector< atomvecRK4 * >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_atomvecRK4, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "aRK4vector_insert" "', argument " "4"" of type '" "vector< atomvecRK4 * >::value_type""'"); 
  }
  arg4 = reinterpret_cast< vector< atomvecRK4 * >::value_type >(argp4);
  (arg1)->insert(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< atomvecRK4 * >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_atomvecRK4, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_aRK4vector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< atomvecRK4 * >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_atomvecRK4, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_aRK4vector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'aRK4vector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< atomvecRK4 * >::insert(vector< atomvecRK4 * >::iterator,vector< atomvecRK4 * >::value_type)\n"
    "    vector< atomvecRK4 * >::insert(vector< atomvecRK4 * >::iterator,vector< atomvecRK4 * >::size_type,vector< atomvecRK4 * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_aRK4vector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  vector< atomvecRK4 * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:aRK4vector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector_reserve" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "aRK4vector_reserve" "', argument " "2"" of type '" "vector< atomvecRK4 * >::size_type""'");
  } 
  arg2 = static_cast< vector< atomvecRK4 * >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_aRK4vector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< atomvecRK4 * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:aRK4vector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "aRK4vector_capacity" "', argument " "1"" of type '" "vector< atomvecRK4 * > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  result = ((vector< atomvecRK4 * > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_aRK4vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< atomvecRK4 * > *arg1 = (vector< atomvecRK4 * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_aRK4vector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_aRK4vector" "', argument " "1"" of type '" "vector< atomvecRK4 * > *""'"); 
  }
  arg1 = reinterpret_cast< vector< atomvecRK4 * > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *aRK4vector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap__uintvector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:_uintvector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector_iterator" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = (swig::SwigPyIterator *)vector_Sl_unsigned_SS_int_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_uintvector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector___nonzero__" "', argument " "1"" of type '" "vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = (bool)vector_Sl_unsigned_SS_int_Sg____nonzero__((vector< unsigned int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_uintvector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector___bool__" "', argument " "1"" of type '" "vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = (bool)vector_Sl_unsigned_SS_int_Sg____bool__((vector< unsigned int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< unsigned int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_uintvector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector___len__" "', argument " "1"" of type '" "vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = vector_Sl_unsigned_SS_int_Sg____len__((vector< unsigned int > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< unsigned int >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_uintvector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector_pop" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  try {
    result = (vector< unsigned int >::value_type)vector_Sl_unsigned_SS_int_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::difference_type arg2 ;
  vector< unsigned int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_uintvector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector___getslice__" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_uintvector___getslice__" "', argument " "2"" of type '" "vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_uintvector___getslice__" "', argument " "3"" of type '" "vector< unsigned int >::difference_type""'");
  } 
  arg3 = static_cast< vector< unsigned int >::difference_type >(val3);
  try {
    result = (std::vector< unsigned int,std::allocator< unsigned int > > *)vector_Sl_unsigned_SS_int_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::difference_type arg2 ;
  vector< unsigned int >::difference_type arg3 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:_uintvector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector___setslice__" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_uintvector___setslice__" "', argument " "2"" of type '" "vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_uintvector___setslice__" "', argument " "3"" of type '" "vector< unsigned int >::difference_type""'");
  } 
  arg3 = static_cast< vector< unsigned int >::difference_type >(val3);
  {
    std::vector<unsigned int,std::allocator< unsigned int > > *ptr = (std::vector<unsigned int,std::allocator< unsigned int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "_uintvector___setslice__" "', argument " "4"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_uintvector___setslice__" "', argument " "4"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    vector_Sl_unsigned_SS_int_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< unsigned int,std::allocator< unsigned int > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::difference_type arg2 ;
  vector< unsigned int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_uintvector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector___setslice__" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_uintvector___setslice__" "', argument " "2"" of type '" "vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_uintvector___setslice__" "', argument " "3"" of type '" "vector< unsigned int >::difference_type""'");
  } 
  arg3 = static_cast< vector< unsigned int >::difference_type >(val3);
  try {
    vector_Sl_unsigned_SS_int_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap__uintvector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<unsigned int,std::allocator< unsigned int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap__uintvector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_uintvector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< unsigned int >::__setslice__(vector< unsigned int >::difference_type,vector< unsigned int >::difference_type,std::vector< unsigned int,std::allocator< unsigned int > > const &)\n"
    "    vector< unsigned int >::__setslice__(vector< unsigned int >::difference_type,vector< unsigned int >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__uintvector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::difference_type arg2 ;
  vector< unsigned int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_uintvector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector___delslice__" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_uintvector___delslice__" "', argument " "2"" of type '" "vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_uintvector___delslice__" "', argument " "3"" of type '" "vector< unsigned int >::difference_type""'");
  } 
  arg3 = static_cast< vector< unsigned int >::difference_type >(val3);
  try {
    vector_Sl_unsigned_SS_int_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_uintvector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector___delitem__" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_uintvector___delitem__" "', argument " "2"" of type '" "vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< vector< unsigned int >::difference_type >(val2);
  try {
    vector_Sl_unsigned_SS_int_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_uintvector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector___getitem__" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_uintvector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< unsigned int,std::allocator< unsigned int > > *)vector_Sl_unsigned_SS_int_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_uintvector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector___setitem__" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_uintvector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<unsigned int,std::allocator< unsigned int > > *ptr = (std::vector<unsigned int,std::allocator< unsigned int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_uintvector___setitem__" "', argument " "3"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_uintvector___setitem__" "', argument " "3"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    vector_Sl_unsigned_SS_int_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< unsigned int,std::allocator< unsigned int > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_uintvector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector___setitem__" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_uintvector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_unsigned_SS_int_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_uintvector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector___delitem__" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_uintvector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_unsigned_SS_int_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap__uintvector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__uintvector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_uintvector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< unsigned int >::__delitem__(vector< unsigned int >::difference_type)\n"
    "    vector< unsigned int >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__uintvector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< unsigned int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_uintvector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector___getitem__" "', argument " "1"" of type '" "vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_uintvector___getitem__" "', argument " "2"" of type '" "vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< vector< unsigned int >::difference_type >(val2);
  try {
    result = (vector< unsigned int >::value_type *) &vector_Sl_unsigned_SS_int_Sg____getitem____SWIG_1((vector< unsigned int > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap__uintvector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__uintvector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_uintvector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< unsigned int >::__getitem__(PySliceObject *)\n"
    "    vector< unsigned int >::__getitem__(vector< unsigned int >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__uintvector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::difference_type arg2 ;
  vector< unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  vector< unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_uintvector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector___setitem__" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_uintvector___setitem__" "', argument " "2"" of type '" "vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_uintvector___setitem__" "', argument " "3"" of type '" "vector< unsigned int >::value_type""'");
  } 
  temp3 = static_cast< vector< unsigned int >::value_type >(val3);
  arg3 = &temp3;
  try {
    vector_Sl_unsigned_SS_int_Sg____setitem____SWIG_2(arg1,arg2,(unsigned int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap__uintvector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<unsigned int,std::allocator< unsigned int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap__uintvector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap__uintvector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_uintvector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< unsigned int >::__setitem__(PySliceObject *,std::vector< unsigned int,std::allocator< unsigned int > > const &)\n"
    "    vector< unsigned int >::__setitem__(PySliceObject *)\n"
    "    vector< unsigned int >::__setitem__(vector< unsigned int >::difference_type,vector< unsigned int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__uintvector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< unsigned int >::value_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_uintvector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector_append" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_uintvector_append" "', argument " "2"" of type '" "vector< unsigned int >::value_type""'");
  } 
  temp2 = static_cast< vector< unsigned int >::value_type >(val2);
  arg2 = &temp2;
  vector_Sl_unsigned_SS_int_Sg__append(arg1,(unsigned int const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__uintvector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new__uintvector")) SWIG_fail;
  result = (vector< unsigned int > *)new vector< unsigned int >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__uintvector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  vector< unsigned int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__uintvector",&obj0)) SWIG_fail;
  {
    std::vector<unsigned int,std::allocator< unsigned int > > *ptr = (std::vector<unsigned int,std::allocator< unsigned int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__uintvector" "', argument " "1"" of type '" "std::vector< unsigned int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__uintvector" "', argument " "1"" of type '" "std::vector< unsigned int > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (vector< unsigned int > *)new vector< unsigned int >((std::vector< unsigned int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_uintvector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector_empty" "', argument " "1"" of type '" "vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = (bool)((vector< unsigned int > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< unsigned int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_uintvector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector_size" "', argument " "1"" of type '" "vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = ((vector< unsigned int > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_uintvector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector_clear" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_uintvector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector_swap" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_uintvector_swap" "', argument " "2"" of type '" "std::vector< unsigned int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_uintvector_swap" "', argument " "2"" of type '" "std::vector< unsigned int > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< unsigned int > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< unsigned int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_uintvector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector_get_allocator" "', argument " "1"" of type '" "vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = ((vector< unsigned int > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new vector< unsigned int >::allocator_type(static_cast< const vector< unsigned int >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_unsigned_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< unsigned int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_uintvector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector_begin" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< unsigned int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_uintvector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector_end" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< unsigned int >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_uintvector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector_rbegin" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< unsigned int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< unsigned int >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_uintvector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector_rend" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< unsigned int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__uintvector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< unsigned int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__uintvector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new__uintvector" "', argument " "1"" of type '" "vector< unsigned int >::size_type""'");
  } 
  arg1 = static_cast< vector< unsigned int >::size_type >(val1);
  result = (vector< unsigned int > *)new vector< unsigned int >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_uintvector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector_pop_back" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_uintvector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector_resize" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_uintvector_resize" "', argument " "2"" of type '" "vector< unsigned int >::size_type""'");
  } 
  arg2 = static_cast< vector< unsigned int >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< unsigned int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_uintvector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector_erase" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_uintvector_erase" "', argument " "2"" of type '" "vector< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_uintvector_erase" "', argument " "2"" of type '" "vector< unsigned int >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::iterator arg2 ;
  vector< unsigned int >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< unsigned int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_uintvector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector_erase" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_uintvector_erase" "', argument " "2"" of type '" "vector< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_uintvector_erase" "', argument " "2"" of type '" "vector< unsigned int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_uintvector_erase" "', argument " "3"" of type '" "vector< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< unsigned int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_uintvector_erase" "', argument " "3"" of type '" "vector< unsigned int >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap__uintvector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< unsigned int >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap__uintvector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_uintvector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< unsigned int >::erase(vector< unsigned int >::iterator)\n"
    "    vector< unsigned int >::erase(vector< unsigned int >::iterator,vector< unsigned int >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new__uintvector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int >::size_type arg1 ;
  vector< unsigned int >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  vector< unsigned int >::value_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< unsigned int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new__uintvector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new__uintvector" "', argument " "1"" of type '" "vector< unsigned int >::size_type""'");
  } 
  arg1 = static_cast< vector< unsigned int >::size_type >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new__uintvector" "', argument " "2"" of type '" "vector< unsigned int >::value_type""'");
  } 
  temp2 = static_cast< vector< unsigned int >::value_type >(val2);
  arg2 = &temp2;
  result = (vector< unsigned int > *)new vector< unsigned int >(arg1,(vector< unsigned int >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__uintvector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new__uintvector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new__uintvector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new__uintvector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new__uintvector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new__uintvector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< unsigned int >::vector()\n"
    "    vector< unsigned int >::vector(std::vector< unsigned int > const &)\n"
    "    vector< unsigned int >::vector(vector< unsigned int >::size_type)\n"
    "    vector< unsigned int >::vector(vector< unsigned int >::size_type,vector< unsigned int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__uintvector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< unsigned int >::value_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_uintvector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector_push_back" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_uintvector_push_back" "', argument " "2"" of type '" "vector< unsigned int >::value_type""'");
  } 
  temp2 = static_cast< vector< unsigned int >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((vector< unsigned int >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< unsigned int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_uintvector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector_front" "', argument " "1"" of type '" "vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = (vector< unsigned int >::value_type *) &((vector< unsigned int > const *)arg1)->front();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< unsigned int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_uintvector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector_back" "', argument " "1"" of type '" "vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = (vector< unsigned int >::value_type *) &((vector< unsigned int > const *)arg1)->back();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::size_type arg2 ;
  vector< unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  vector< unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_uintvector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector_assign" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_uintvector_assign" "', argument " "2"" of type '" "vector< unsigned int >::size_type""'");
  } 
  arg2 = static_cast< vector< unsigned int >::size_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_uintvector_assign" "', argument " "3"" of type '" "vector< unsigned int >::value_type""'");
  } 
  temp3 = static_cast< vector< unsigned int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(vector< unsigned int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::size_type arg2 ;
  vector< unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  vector< unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_uintvector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector_resize" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_uintvector_resize" "', argument " "2"" of type '" "vector< unsigned int >::size_type""'");
  } 
  arg2 = static_cast< vector< unsigned int >::size_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_uintvector_resize" "', argument " "3"" of type '" "vector< unsigned int >::value_type""'");
  } 
  temp3 = static_cast< vector< unsigned int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(vector< unsigned int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__uintvector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap__uintvector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_uintvector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< unsigned int >::resize(vector< unsigned int >::size_type)\n"
    "    vector< unsigned int >::resize(vector< unsigned int >::size_type,vector< unsigned int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__uintvector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::iterator arg2 ;
  vector< unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  vector< unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< unsigned int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_uintvector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector_insert" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_uintvector_insert" "', argument " "2"" of type '" "vector< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_uintvector_insert" "', argument " "2"" of type '" "vector< unsigned int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_uintvector_insert" "', argument " "3"" of type '" "vector< unsigned int >::value_type""'");
  } 
  temp3 = static_cast< vector< unsigned int >::value_type >(val3);
  arg3 = &temp3;
  result = (arg1)->insert(arg2,(vector< unsigned int >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::iterator arg2 ;
  vector< unsigned int >::size_type arg3 ;
  vector< unsigned int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  vector< unsigned int >::value_type temp4 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:_uintvector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector_insert" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_uintvector_insert" "', argument " "2"" of type '" "vector< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_uintvector_insert" "', argument " "2"" of type '" "vector< unsigned int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_uintvector_insert" "', argument " "3"" of type '" "vector< unsigned int >::size_type""'");
  } 
  arg3 = static_cast< vector< unsigned int >::size_type >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "_uintvector_insert" "', argument " "4"" of type '" "vector< unsigned int >::value_type""'");
  } 
  temp4 = static_cast< vector< unsigned int >::value_type >(val4);
  arg4 = &temp4;
  (arg1)->insert(arg2,arg3,(vector< unsigned int >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap__uintvector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap__uintvector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_uintvector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< unsigned int >::insert(vector< unsigned int >::iterator,vector< unsigned int >::value_type const &)\n"
    "    vector< unsigned int >::insert(vector< unsigned int >::iterator,vector< unsigned int >::size_type,vector< unsigned int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__uintvector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_uintvector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector_reserve" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_uintvector_reserve" "', argument " "2"" of type '" "vector< unsigned int >::size_type""'");
  } 
  arg2 = static_cast< vector< unsigned int >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__uintvector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< unsigned int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_uintvector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_uintvector_capacity" "', argument " "1"" of type '" "vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = ((vector< unsigned int > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete__uintvector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete__uintvector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete__uintvector" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_uintvector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_randVec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)":randVec")) SWIG_fail;
  result = randVec();
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_randVecBoxed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)":randVecBoxed")) SWIG_fail;
  result = randVecBoxed();
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seed__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seed",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "seed" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (unsigned int)seed(arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seed__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)":seed")) SWIG_fail;
  result = (unsigned int)seed();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seed(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_seed__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_seed__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'seed'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    seed(unsigned int)\n"
    "    seed()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_gaussVec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  gaussVec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_gaussVec",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_gaussVec" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (gaussVec *)new gaussVec(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gaussVec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gaussVec_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gaussVec *arg1 = (gaussVec *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:gaussVec_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gaussVec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gaussVec_set" "', argument " "1"" of type '" "gaussVec *""'"); 
  }
  arg1 = reinterpret_cast< gaussVec * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gaussVec_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->set(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gaussVec_generate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gaussVec *arg1 = (gaussVec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:gaussVec_generate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gaussVec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gaussVec_generate" "', argument " "1"" of type '" "gaussVec *""'"); 
  }
  arg1 = reinterpret_cast< gaussVec * >(argp1);
  result = (arg1)->generate();
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_gaussVec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gaussVec *arg1 = (gaussVec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_gaussVec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gaussVec, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_gaussVec" "', argument " "1"" of type '" "gaussVec *""'"); 
  }
  arg1 = reinterpret_cast< gaussVec * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *gaussVec_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gaussVec, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_bivariateGauss__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bivariateGauss *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_bivariateGauss",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_bivariateGauss" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_bivariateGauss" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_bivariateGauss" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bivariateGauss *)new bivariateGauss(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bivariateGauss, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_bivariateGauss__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bivariateGauss *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_bivariateGauss",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_bivariateGauss" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_bivariateGauss" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (bivariateGauss *)new bivariateGauss(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bivariateGauss, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_bivariateGauss__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bivariateGauss *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_bivariateGauss",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_bivariateGauss" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (bivariateGauss *)new bivariateGauss(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bivariateGauss, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_bivariateGauss__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bivariateGauss *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_bivariateGauss")) SWIG_fail;
  result = (bivariateGauss *)new bivariateGauss();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bivariateGauss, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_bivariateGauss(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_bivariateGauss__SWIG_3(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_bivariateGauss__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_bivariateGauss__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_bivariateGauss__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_bivariateGauss'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    bivariateGauss::bivariateGauss(double const,double const,double const)\n"
    "    bivariateGauss::bivariateGauss(double const,double const)\n"
    "    bivariateGauss::bivariateGauss(double const)\n"
    "    bivariateGauss::bivariateGauss()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_bivariateGauss_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bivariateGauss *arg1 = (bivariateGauss *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:bivariateGauss_set",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bivariateGauss, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bivariateGauss_set" "', argument " "1"" of type '" "bivariateGauss *""'"); 
  }
  arg1 = reinterpret_cast< bivariateGauss * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bivariateGauss_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "bivariateGauss_set" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "bivariateGauss_set" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->set(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bivariateGauss_generate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bivariateGauss *arg1 = (bivariateGauss *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Pair result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:bivariateGauss_generate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bivariateGauss, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bivariateGauss_generate" "', argument " "1"" of type '" "bivariateGauss *""'"); 
  }
  arg1 = reinterpret_cast< bivariateGauss * >(argp1);
  result = (arg1)->generate();
  resultobj = SWIG_NewPointerObj((new Pair(static_cast< const Pair& >(result))), SWIGTYPE_p_NumvectorT_double_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bivariateGauss_genVec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bivariateGauss *arg1 = (bivariateGauss *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:bivariateGauss_genVec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bivariateGauss, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bivariateGauss_genVec" "', argument " "1"" of type '" "bivariateGauss *""'"); 
  }
  arg1 = reinterpret_cast< bivariateGauss * >(argp1);
  result = (arg1)->genVec();
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bivariateGauss_genVecs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bivariateGauss *arg1 = (bivariateGauss *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  VecPair result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:bivariateGauss_genVecs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bivariateGauss, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bivariateGauss_genVecs" "', argument " "1"" of type '" "bivariateGauss *""'"); 
  }
  arg1 = reinterpret_cast< bivariateGauss * >(argp1);
  result = (arg1)->genVecs();
  resultobj = SWIG_NewPointerObj((new VecPair(static_cast< const VecPair& >(result))), SWIGTYPE_p_NvectorT_Vec_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_bivariateGauss(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bivariateGauss *arg1 = (bivariateGauss *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_bivariateGauss",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bivariateGauss, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_bivariateGauss" "', argument " "1"" of type '" "bivariateGauss *""'"); 
  }
  arg1 = reinterpret_cast< bivariateGauss * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *bivariateGauss_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bivariateGauss, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Box_diff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  Vec arg2 ;
  Vec arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Box_diff",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box_diff" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Box_diff" "', argument " "2"" of type '" "Vec""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Box_diff" "', argument " "2"" of type '" "Vec""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Box_diff" "', argument " "3"" of type '" "Vec""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Box_diff" "', argument " "3"" of type '" "Vec""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (arg1)->diff(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Box_V(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Box_V",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box_V" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  result = (flt)(arg1)->V();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Box(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Box",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Box" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Box_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Box, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_interaction_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  interaction *arg1 = (interaction *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:interaction_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_interaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interaction_energy" "', argument " "1"" of type '" "interaction *""'"); 
  }
  arg1 = reinterpret_cast< interaction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "interaction_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_interaction_setForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  interaction *arg1 = (interaction *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:interaction_setForces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_interaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interaction_setForces" "', argument " "1"" of type '" "interaction *""'"); 
  }
  arg1 = reinterpret_cast< interaction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "interaction_setForces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->setForces(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_interaction_setForcesGetPressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  interaction *arg1 = (interaction *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:interaction_setForcesGetPressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_interaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interaction_setForcesGetPressure" "', argument " "1"" of type '" "interaction *""'"); 
  }
  arg1 = reinterpret_cast< interaction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "interaction_setForcesGetPressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->setForcesGetPressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_interaction_pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  interaction *arg1 = (interaction *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:interaction_pressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_interaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interaction_pressure" "', argument " "1"" of type '" "interaction *""'"); 
  }
  arg1 = reinterpret_cast< interaction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "interaction_pressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->pressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_interaction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  interaction *arg1 = (interaction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_interaction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_interaction, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_interaction" "', argument " "1"" of type '" "interaction *""'"); 
  }
  arg1 = reinterpret_cast< interaction * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *interaction_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_interaction, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_statetracker_update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  statetracker *arg1 = (statetracker *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:statetracker_update",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_statetracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "statetracker_update" "', argument " "1"" of type '" "statetracker *""'"); 
  }
  arg1 = reinterpret_cast< statetracker * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "statetracker_update" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->update(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_statetracker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  statetracker *arg1 = (statetracker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_statetracker",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_statetracker, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_statetracker" "', argument " "1"" of type '" "statetracker *""'"); 
  }
  arg1 = reinterpret_cast< statetracker * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *statetracker_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_statetracker, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vecmod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec arg1 ;
  Vec arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vecmod",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecmod" "', argument " "1"" of type '" "Vec""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecmod" "', argument " "1"" of type '" "Vec""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecmod" "', argument " "2"" of type '" "Vec""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecmod" "', argument " "2"" of type '" "Vec""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = vecmod(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfiniteBox_diff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  InfiniteBox *arg1 = (InfiniteBox *) 0 ;
  Vec arg2 ;
  Vec arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InfiniteBox_diff",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_InfiniteBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfiniteBox_diff" "', argument " "1"" of type '" "InfiniteBox *""'"); 
  }
  arg1 = reinterpret_cast< InfiniteBox * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfiniteBox_diff" "', argument " "2"" of type '" "Vec""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfiniteBox_diff" "', argument " "2"" of type '" "Vec""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InfiniteBox_diff" "', argument " "3"" of type '" "Vec""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfiniteBox_diff" "', argument " "3"" of type '" "Vec""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (arg1)->diff(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfiniteBox_V(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  InfiniteBox *arg1 = (InfiniteBox *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InfiniteBox_V",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_InfiniteBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfiniteBox_V" "', argument " "1"" of type '" "InfiniteBox *""'"); 
  }
  arg1 = reinterpret_cast< InfiniteBox * >(argp1);
  result = (flt)(arg1)->V();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InfiniteBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  InfiniteBox *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_InfiniteBox")) SWIG_fail;
  result = (InfiniteBox *)new InfiniteBox();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_InfiniteBox, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InfiniteBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  InfiniteBox *arg1 = (InfiniteBox *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InfiniteBox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_InfiniteBox, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InfiniteBox" "', argument " "1"" of type '" "InfiniteBox *""'"); 
  }
  arg1 = reinterpret_cast< InfiniteBox * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InfiniteBox_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_InfiniteBox, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_infbox_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_InfiniteBox,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""infbox""' of type '""InfiniteBox""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""infbox""' of type '""InfiniteBox""'");
    } else {
      InfiniteBox * temp;
      temp  = reinterpret_cast< InfiniteBox * >(argp);
      infbox = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_infbox_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&infbox), SWIGTYPE_p_InfiniteBox,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_OriginBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OriginBox *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_OriginBox",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OriginBox" "', argument " "1"" of type '" "Vec""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OriginBox" "', argument " "1"" of type '" "Vec""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (OriginBox *)new OriginBox(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OriginBox, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OriginBox_diff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  Vec arg2 ;
  Vec arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:OriginBox_diff",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OriginBox_diff" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OriginBox_diff" "', argument " "2"" of type '" "Vec""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OriginBox_diff" "', argument " "2"" of type '" "Vec""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OriginBox_diff" "', argument " "3"" of type '" "Vec""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OriginBox_diff" "', argument " "3"" of type '" "Vec""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (arg1)->diff(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OriginBox_V(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OriginBox_V",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OriginBox_V" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  result = (flt)(arg1)->V();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OriginBox_L(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OriginBox_L",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OriginBox_L" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  result = (flt)(arg1)->L();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OriginBox_resize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OriginBox_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OriginBox_resize" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OriginBox_resize" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  result = (flt)(arg1)->resize(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OriginBox_resizeV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OriginBox_resizeV",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OriginBox_resizeV" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OriginBox_resizeV" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  result = (flt)(arg1)->resizeV(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OriginBox_randLoc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OriginBox_randLoc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OriginBox_randLoc" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  result = (arg1)->randLoc();
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_OriginBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_OriginBox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OriginBox" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OriginBox_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OriginBox, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_atom_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  Vec *arg2 = (Vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atom_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atom_x_set" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atom_x_set" "', argument " "2"" of type '" "Vec *""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  if (arg1) (arg1)->x = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atom_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atom_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atom_x_get" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  result = (Vec *)& ((arg1)->x);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atom_v_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  Vec *arg2 = (Vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atom_v_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atom_v_set" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atom_v_set" "', argument " "2"" of type '" "Vec *""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  if (arg1) (arg1)->v = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atom_v_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atom_v_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atom_v_get" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  result = (Vec *)& ((arg1)->v);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atom_a_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  Vec *arg2 = (Vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atom_a_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atom_a_set" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atom_a_set" "', argument " "2"" of type '" "Vec *""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  if (arg1) (arg1)->a = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atom_a_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atom_a_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atom_a_get" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  result = (Vec *)& ((arg1)->a);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atom_f_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  Vec *arg2 = (Vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atom_f_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atom_f_set" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atom_f_set" "', argument " "2"" of type '" "Vec *""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  if (arg1) (arg1)->f = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atom_f_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atom_f_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atom_f_get" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  result = (Vec *)& ((arg1)->f);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atom_m_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atom_m_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atom_m_set" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "atom_m_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->m = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atom_m_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atom_m_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atom_m_get" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  result = (flt) ((arg1)->m);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_atom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_atom")) SWIG_fail;
  result = (atom *)new atom();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atom, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_atom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_atom",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_atom" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *atom_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_atom, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_atomref__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomref *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_atomref")) SWIG_fail;
  result = (atomref *)new atomref();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomref, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_atomref__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomref *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_atomref",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_atomref" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  result = (atomref *)new atomref(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomref, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_atomref(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_atomref__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_atomref__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_atomref'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    atomref::atomref()\n"
    "    atomref::atomref(atom *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_atomref___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomref *arg1 = (atomref *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomref___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomref___ref__" "', argument " "1"" of type '" "atomref *""'"); 
  }
  arg1 = reinterpret_cast< atomref * >(argp1);
  result = (atom *) &(arg1)->operator *();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomref_pointer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomref *arg1 = (atomref *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomref_pointer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomref_pointer" "', argument " "1"" of type '" "atomref *""'"); 
  }
  arg1 = reinterpret_cast< atomref * >(argp1);
  result = (atom *)(arg1)->pointer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomref_x(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomref *arg1 = (atomref *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomref_x",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomref_x" "', argument " "1"" of type '" "atomref *""'"); 
  }
  arg1 = reinterpret_cast< atomref * >(argp1);
  result = (Vec *) &(arg1)->x();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomref_v(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomref *arg1 = (atomref *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomref_v",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomref_v" "', argument " "1"" of type '" "atomref *""'"); 
  }
  arg1 = reinterpret_cast< atomref * >(argp1);
  result = (Vec *) &(arg1)->v();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomref_f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomref *arg1 = (atomref *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomref_f",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomref_f" "', argument " "1"" of type '" "atomref *""'"); 
  }
  arg1 = reinterpret_cast< atomref * >(argp1);
  result = (Vec *) &(arg1)->f();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomref_a(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomref *arg1 = (atomref *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomref_a",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomref_a" "', argument " "1"" of type '" "atomref *""'"); 
  }
  arg1 = reinterpret_cast< atomref * >(argp1);
  result = (Vec *) &(arg1)->a();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomref_m(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomref *arg1 = (atomref *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomref_m",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomref_m" "', argument " "1"" of type '" "atomref *""'"); 
  }
  arg1 = reinterpret_cast< atomref * >(argp1);
  result = (flt *) &(arg1)->m();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomref___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomref *arg1 = (atomref *) 0 ;
  atomref *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomref___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomref___eq__" "', argument " "1"" of type '" "atomref const *""'"); 
  }
  arg1 = reinterpret_cast< atomref * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_atomref,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atomref___eq__" "', argument " "2"" of type '" "atomref const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "atomref___eq__" "', argument " "2"" of type '" "atomref const &""'"); 
  }
  arg2 = reinterpret_cast< atomref * >(argp2);
  result = (bool)((atomref const *)arg1)->operator ==((atomref const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomref___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomref *arg1 = (atomref *) 0 ;
  atom *arg2 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomref___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomref___eq__" "', argument " "1"" of type '" "atomref const *""'"); 
  }
  arg1 = reinterpret_cast< atomref * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atomref___eq__" "', argument " "2"" of type '" "atom const *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  result = (bool)((atomref const *)arg1)->operator ==((atom const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomref___eq__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atomref, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_atomref, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_atomref___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atomref, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_atom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_atomref___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_atomref___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomref *arg1 = (atomref *) 0 ;
  atomref *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomref___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomref___ne__" "', argument " "1"" of type '" "atomref const *""'"); 
  }
  arg1 = reinterpret_cast< atomref * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_atomref,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atomref___ne__" "', argument " "2"" of type '" "atomref const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "atomref___ne__" "', argument " "2"" of type '" "atomref const &""'"); 
  }
  arg2 = reinterpret_cast< atomref * >(argp2);
  result = (bool)((atomref const *)arg1)->operator !=((atomref const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomref___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomref *arg1 = (atomref *) 0 ;
  atomref *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomref___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomref___lt__" "', argument " "1"" of type '" "atomref const *""'"); 
  }
  arg1 = reinterpret_cast< atomref * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_atomref,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atomref___lt__" "', argument " "2"" of type '" "atomref const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "atomref___lt__" "', argument " "2"" of type '" "atomref const &""'"); 
  }
  arg2 = reinterpret_cast< atomref * >(argp2);
  result = (bool)((atomref const *)arg1)->operator <((atomref const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomref___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomref *arg1 = (atomref *) 0 ;
  atomref *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomref___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomref___le__" "', argument " "1"" of type '" "atomref const *""'"); 
  }
  arg1 = reinterpret_cast< atomref * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_atomref,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atomref___le__" "', argument " "2"" of type '" "atomref const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "atomref___le__" "', argument " "2"" of type '" "atomref const &""'"); 
  }
  arg2 = reinterpret_cast< atomref * >(argp2);
  result = (bool)((atomref const *)arg1)->operator <=((atomref const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomref___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomref *arg1 = (atomref *) 0 ;
  atomref *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomref___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomref___ge__" "', argument " "1"" of type '" "atomref const *""'"); 
  }
  arg1 = reinterpret_cast< atomref * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_atomref,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atomref___ge__" "', argument " "2"" of type '" "atomref const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "atomref___ge__" "', argument " "2"" of type '" "atomref const &""'"); 
  }
  arg2 = reinterpret_cast< atomref * >(argp2);
  result = (bool)((atomref const *)arg1)->operator >=((atomref const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomref___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomref *arg1 = (atomref *) 0 ;
  atomref *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomref___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomref___gt__" "', argument " "1"" of type '" "atomref const *""'"); 
  }
  arg1 = reinterpret_cast< atomref * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_atomref,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atomref___gt__" "', argument " "2"" of type '" "atomref const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "atomref___gt__" "', argument " "2"" of type '" "atomref const &""'"); 
  }
  arg2 = reinterpret_cast< atomref * >(argp2);
  result = (bool)((atomref const *)arg1)->operator >((atomref const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_atomref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomref *arg1 = (atomref *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_atomref",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomref, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_atomref" "', argument " "1"" of type '" "atomref *""'"); 
  }
  arg1 = reinterpret_cast< atomref * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *atomref_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_atomref, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_atomid__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_atomid")) SWIG_fail;
  result = (atomid *)new atomid();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_atomid__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_atomid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_atomid" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  result = (atomid *)new atomid(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_atomid__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_atomid",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_atomid" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_atomid" "', argument " "2"" of type '" "uint""'");
  } 
  arg2 = static_cast< uint >(val2);
  result = (atomid *)new atomid(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_atomid(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_atomid__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_atomid__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_atomid__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_atomid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    atomid::atomid()\n"
    "    atomid::atomid(atom *)\n"
    "    atomid::atomid(atom *,uint)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_atomid_n(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomid *arg1 = (atomid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomid_n",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomid_n" "', argument " "1"" of type '" "atomid const *""'"); 
  }
  arg1 = reinterpret_cast< atomid * >(argp1);
  result = (uint)((atomid const *)arg1)->n();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_atomid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomid *arg1 = (atomid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_atomid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomid, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_atomid" "', argument " "1"" of type '" "atomid *""'"); 
  }
  arg1 = reinterpret_cast< atomid * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *atomid_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_atomid, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_idpair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomid arg1 ;
  atomid arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  idpair *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_idpair",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_idpair" "', argument " "1"" of type '" "atomid""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_idpair" "', argument " "1"" of type '" "atomid""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_idpair" "', argument " "2"" of type '" "atomid""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_idpair" "', argument " "2"" of type '" "atomid""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (idpair *)new idpair(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_idpair, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_idpair_first(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  idpair *arg1 = (idpair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:idpair_first",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_idpair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "idpair_first" "', argument " "1"" of type '" "idpair const *""'"); 
  }
  arg1 = reinterpret_cast< idpair * >(argp1);
  result = ((idpair const *)arg1)->first();
  resultobj = SWIG_NewPointerObj((new atomid(static_cast< const atomid& >(result))), SWIGTYPE_p_atomid, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_idpair_last(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  idpair *arg1 = (idpair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:idpair_last",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_idpair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "idpair_last" "', argument " "1"" of type '" "idpair const *""'"); 
  }
  arg1 = reinterpret_cast< idpair * >(argp1);
  result = ((idpair const *)arg1)->last();
  resultobj = SWIG_NewPointerObj((new atomid(static_cast< const atomid& >(result))), SWIGTYPE_p_atomid, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_idpair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  idpair *arg1 = (idpair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_idpair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_idpair, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_idpair" "', argument " "1"" of type '" "idpair *""'"); 
  }
  arg1 = reinterpret_cast< idpair * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *idpair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_idpair, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_atompair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  atom *arg2 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  atompair *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_atompair",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_atompair" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_atompair" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  result = (atompair *)new atompair(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atompair, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atompair_first(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atompair *arg1 = (atompair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atompair_first",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atompair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atompair_first" "', argument " "1"" of type '" "atompair const *""'"); 
  }
  arg1 = reinterpret_cast< atompair * >(argp1);
  result = (atom *) &((atompair const *)arg1)->first();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atompair_last(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atompair *arg1 = (atompair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atompair_last",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atompair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atompair_last" "', argument " "1"" of type '" "atompair const *""'"); 
  }
  arg1 = reinterpret_cast< atompair * >(argp1);
  result = (atom *) &((atompair const *)arg1)->last();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_atompair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atompair *arg1 = (atompair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_atompair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atompair, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_atompair" "', argument " "1"" of type '" "atompair *""'"); 
  }
  arg1 = reinterpret_cast< atompair * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *atompair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_atompair, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_atomgroup_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = (atomgroup *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  atom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomgroup_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomgroup_get" "', argument " "1"" of type '" "atomgroup *""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "atomgroup_get" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (atom *)(arg1)->get(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomgroup_get_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = (atomgroup *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  atomid result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomgroup_get_id",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomgroup_get_id" "', argument " "1"" of type '" "atomgroup *""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "atomgroup_get_id" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (arg1)->get_id(arg2);
  resultobj = SWIG_NewPointerObj((new atomid(static_cast< const atomid& >(result))), SWIGTYPE_p_atomid, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomgroup_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = (atomgroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomgroup_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomgroup_size" "', argument " "1"" of type '" "atomgroup const *""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  result = (uint)((atomgroup const *)arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomgroup_getmass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = (atomgroup *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomgroup_getmass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomgroup_getmass" "', argument " "1"" of type '" "atomgroup const *""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "atomgroup_getmass" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (flt)((atomgroup const *)arg1)->getmass(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomgroup_com(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = (atomgroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomgroup_com",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomgroup_com" "', argument " "1"" of type '" "atomgroup const *""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  result = ((atomgroup const *)arg1)->com();
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomgroup_comv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = (atomgroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomgroup_comv",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomgroup_comv" "', argument " "1"" of type '" "atomgroup const *""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  result = ((atomgroup const *)arg1)->comv();
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomgroup_mass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = (atomgroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomgroup_mass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomgroup_mass" "', argument " "1"" of type '" "atomgroup const *""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  result = (flt)((atomgroup const *)arg1)->mass();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomgroup_kinetic__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = (atomgroup *) 0 ;
  Vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomgroup_kinetic",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomgroup_kinetic" "', argument " "1"" of type '" "atomgroup const *""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atomgroup_kinetic" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "atomgroup_kinetic" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  result = (flt)((atomgroup const *)arg1)->kinetic((Vec const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomgroup_kinetic__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = (atomgroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomgroup_kinetic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomgroup_kinetic" "', argument " "1"" of type '" "atomgroup const *""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  result = (flt)((atomgroup const *)arg1)->kinetic();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomgroup_kinetic(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atomgroup, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_atomgroup_kinetic__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atomgroup, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vector2T_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_atomgroup_kinetic__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'atomgroup_kinetic'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    atomgroup::kinetic(Vec const &) const\n"
    "    atomgroup::kinetic() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_atomgroup_momentum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = (atomgroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomgroup_momentum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomgroup_momentum" "', argument " "1"" of type '" "atomgroup const *""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  result = ((atomgroup const *)arg1)->momentum();
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomgroup_moment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = (atomgroup *) 0 ;
  Vec *arg2 = 0 ;
  Box *arg3 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:atomgroup_moment",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomgroup_moment" "', argument " "1"" of type '" "atomgroup const *""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atomgroup_moment" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "atomgroup_moment" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "atomgroup_moment" "', argument " "3"" of type '" "Box *""'"); 
  }
  arg3 = reinterpret_cast< Box * >(argp3);
  result = (flt)((atomgroup const *)arg1)->moment((Vec const &)*arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomgroup_angmomentum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = (atomgroup *) 0 ;
  Vec *arg2 = 0 ;
  Box *arg3 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:atomgroup_angmomentum",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomgroup_angmomentum" "', argument " "1"" of type '" "atomgroup const *""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atomgroup_angmomentum" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "atomgroup_angmomentum" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "atomgroup_angmomentum" "', argument " "3"" of type '" "Box *""'"); 
  }
  arg3 = reinterpret_cast< Box * >(argp3);
  result = (flt)((atomgroup const *)arg1)->angmomentum((Vec const &)*arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomgroup_omega(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = (atomgroup *) 0 ;
  Vec *arg2 = 0 ;
  Box *arg3 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:atomgroup_omega",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomgroup_omega" "', argument " "1"" of type '" "atomgroup const *""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atomgroup_omega" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "atomgroup_omega" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "atomgroup_omega" "', argument " "3"" of type '" "Box *""'"); 
  }
  arg3 = reinterpret_cast< Box * >(argp3);
  result = (flt)((atomgroup const *)arg1)->omega((Vec const &)*arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomgroup_addOmega(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = (atomgroup *) 0 ;
  flt arg2 ;
  Vec arg3 ;
  Box *arg4 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:atomgroup_addOmega",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomgroup_addOmega" "', argument " "1"" of type '" "atomgroup *""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "atomgroup_addOmega" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "atomgroup_addOmega" "', argument " "3"" of type '" "Vec""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "atomgroup_addOmega" "', argument " "3"" of type '" "Vec""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "atomgroup_addOmega" "', argument " "4"" of type '" "Box *""'"); 
  }
  arg4 = reinterpret_cast< Box * >(argp4);
  (arg1)->addOmega(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomgroup_resetL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = (atomgroup *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomgroup_resetL",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomgroup_resetL" "', argument " "1"" of type '" "atomgroup *""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atomgroup_resetL" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->resetL(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomgroup_addv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = (atomgroup *) 0 ;
  Vec arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomgroup_addv",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomgroup_addv" "', argument " "1"" of type '" "atomgroup *""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atomgroup_addv" "', argument " "2"" of type '" "Vec""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "atomgroup_addv" "', argument " "2"" of type '" "Vec""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->addv(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomgroup_resetcomv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = (atomgroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomgroup_resetcomv",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomgroup_resetcomv" "', argument " "1"" of type '" "atomgroup *""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  (arg1)->resetcomv();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomgroup_resetForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = (atomgroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomgroup_resetForces",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomgroup_resetForces" "', argument " "1"" of type '" "atomgroup *""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  (arg1)->resetForces();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomgroup_setAccel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = (atomgroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomgroup_setAccel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomgroup_setAccel" "', argument " "1"" of type '" "atomgroup *""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  (arg1)->setAccel();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_atomgroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = (atomgroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_atomgroup",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomgroup, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_atomgroup" "', argument " "1"" of type '" "atomgroup *""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *atomgroup_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_atomgroup, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_atomvec__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< flt > arg1 ;
  PyObject * obj0 = 0 ;
  atomvec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_atomvec",&obj0)) SWIG_fail;
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    int res = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_atomvec" "', argument " "1"" of type '" "std::vector< flt >""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (atomvec *)new atomvec(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomvec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_atomvec__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomvec *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomvec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_atomvec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_atomvec,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_atomvec" "', argument " "1"" of type '" "atomvec &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_atomvec" "', argument " "1"" of type '" "atomvec &""'"); 
  }
  arg1 = reinterpret_cast< atomvec * >(argp1);
  result = (atomvec *)new atomvec(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomvec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_atomvec(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atomvec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_atomvec__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_atomvec__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_atomvec'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    atomvec::atomvec(std::vector< flt >)\n"
    "    atomvec::atomvec(atomvec &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_atomvec_get_id__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomvec *arg1 = (atomvec *) 0 ;
  atom *arg2 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  atomid result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomvec_get_id",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomvec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomvec_get_id" "', argument " "1"" of type '" "atomvec *""'"); 
  }
  arg1 = reinterpret_cast< atomvec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atomvec_get_id" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  result = (arg1)->get_id(arg2);
  resultobj = SWIG_NewPointerObj((new atomid(static_cast< const atomid& >(result))), SWIGTYPE_p_atomid, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomvec_get_id__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomvec *arg1 = (atomvec *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  atomid result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomvec_get_id",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomvec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomvec_get_id" "', argument " "1"" of type '" "atomvec *""'"); 
  }
  arg1 = reinterpret_cast< atomvec * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "atomvec_get_id" "', argument " "2"" of type '" "uint""'");
  } 
  arg2 = static_cast< uint >(val2);
  result = (arg1)->get_id(arg2);
  resultobj = SWIG_NewPointerObj((new atomid(static_cast< const atomid& >(result))), SWIGTYPE_p_atomid, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomvec_get_id(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atomvec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_atom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_atomvec_get_id__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atomvec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_atomvec_get_id__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'atomvec_get_id'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    atomvec::get_id(atom *)\n"
    "    atomvec::get_id(uint)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_atomvec_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomvec *arg1 = (atomvec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomvec_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomvec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomvec_size" "', argument " "1"" of type '" "atomvec const *""'"); 
  }
  arg1 = reinterpret_cast< atomvec * >(argp1);
  result = (uint)((atomvec const *)arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_atomvec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomvec *arg1 = (atomvec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_atomvec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomvec, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_atomvec" "', argument " "1"" of type '" "atomvec *""'"); 
  }
  arg1 = reinterpret_cast< atomvec * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *atomvec_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_atomvec, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_metagroup__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  metagroup *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_metagroup")) SWIG_fail;
  result = (metagroup *)new metagroup();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_metagroup, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_metagroup__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< atomgroup * > arg1 ;
  PyObject * obj0 = 0 ;
  metagroup *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_metagroup",&obj0)) SWIG_fail;
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_metagroup" "', argument " "1"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (metagroup *)new metagroup(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_metagroup, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_metagroup(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_metagroup__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_metagroup__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_metagroup'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    metagroup::metagroup()\n"
    "    metagroup::metagroup(std::vector< atomgroup * >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_metagroup_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  metagroup *arg1 = (metagroup *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  atom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:metagroup_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_metagroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "metagroup_get" "', argument " "1"" of type '" "metagroup *""'"); 
  }
  arg1 = reinterpret_cast< metagroup * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "metagroup_get" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (atom *)(arg1)->get(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_metagroup_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  metagroup *arg1 = (metagroup *) 0 ;
  atom *arg2 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:metagroup_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_metagroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "metagroup_add" "', argument " "1"" of type '" "metagroup *""'"); 
  }
  arg1 = reinterpret_cast< metagroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "metagroup_add" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  (arg1)->add(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_metagroup_get_id__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  metagroup *arg1 = (metagroup *) 0 ;
  atom *arg2 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  atomid result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:metagroup_get_id",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_metagroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "metagroup_get_id" "', argument " "1"" of type '" "metagroup *""'"); 
  }
  arg1 = reinterpret_cast< metagroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "metagroup_get_id" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  result = (arg1)->get_id(arg2);
  resultobj = SWIG_NewPointerObj((new atomid(static_cast< const atomid& >(result))), SWIGTYPE_p_atomid, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_metagroup_get_id__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  metagroup *arg1 = (metagroup *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  atomid result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:metagroup_get_id",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_metagroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "metagroup_get_id" "', argument " "1"" of type '" "metagroup *""'"); 
  }
  arg1 = reinterpret_cast< metagroup * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "metagroup_get_id" "', argument " "2"" of type '" "uint""'");
  } 
  arg2 = static_cast< uint >(val2);
  result = (arg1)->get_id(arg2);
  resultobj = SWIG_NewPointerObj((new atomid(static_cast< const atomid& >(result))), SWIGTYPE_p_atomid, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_metagroup_get_id(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_metagroup, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_atom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_metagroup_get_id__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_metagroup, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_metagroup_get_id__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'metagroup_get_id'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    metagroup::get_id(atom *)\n"
    "    metagroup::get_id(uint)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_metagroup_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  metagroup *arg1 = (metagroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:metagroup_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_metagroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "metagroup_size" "', argument " "1"" of type '" "metagroup const *""'"); 
  }
  arg1 = reinterpret_cast< metagroup * >(argp1);
  result = (uint)((metagroup const *)arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_metagroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  metagroup *arg1 = (metagroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_metagroup",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_metagroup, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_metagroup" "', argument " "1"" of type '" "metagroup *""'"); 
  }
  arg1 = reinterpret_cast< metagroup * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *metagroup_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_metagroup, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_interactpair_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  interactpair *arg1 = (interactpair *) 0 ;
  Vec arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:interactpair_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_interactpair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interactpair_energy" "', argument " "1"" of type '" "interactpair *""'"); 
  }
  arg1 = reinterpret_cast< interactpair * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "interactpair_energy" "', argument " "2"" of type '" "Vec const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interactpair_energy" "', argument " "2"" of type '" "Vec const""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_interactpair_forces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  interactpair *arg1 = (interactpair *) 0 ;
  Vec arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:interactpair_forces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_interactpair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interactpair_forces" "', argument " "1"" of type '" "interactpair *""'"); 
  }
  arg1 = reinterpret_cast< interactpair * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "interactpair_forces" "', argument " "2"" of type '" "Vec const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interactpair_forces" "', argument " "2"" of type '" "Vec const""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->forces(arg2);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_interactpair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  interactpair *arg1 = (interactpair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_interactpair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_interactpair, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_interactpair" "', argument " "1"" of type '" "interactpair *""'"); 
  }
  arg1 = reinterpret_cast< interactpair * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *interactpair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_interactpair, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_LJr0_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable LJr0 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_LJr0_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(LJr0));
  return pyobj;
}


SWIGINTERN int Swig_var_LJr0sq_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable LJr0sq is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_LJr0sq_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(LJr0sq));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_LJrepulsive(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  flt arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  LJrepulsive *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LJrepulsive",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LJrepulsive" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LJrepulsive" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  result = (LJrepulsive *)new LJrepulsive(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJrepulsive, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJrepulsive_energy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec arg1 ;
  flt arg2 ;
  flt arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJrepulsive_energy",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJrepulsive_energy" "', argument " "1"" of type '" "Vec const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJrepulsive_energy" "', argument " "1"" of type '" "Vec const""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJrepulsive_energy" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LJrepulsive_energy" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  result = (flt)LJrepulsive::energy(arg1,arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJrepulsive_energy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJrepulsive *arg1 = (LJrepulsive *) 0 ;
  Vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJrepulsive_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJrepulsive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJrepulsive_energy" "', argument " "1"" of type '" "LJrepulsive *""'"); 
  }
  arg1 = reinterpret_cast< LJrepulsive * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJrepulsive_energy" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJrepulsive_energy" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  result = (flt)(arg1)->energy((Vec const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJrepulsive_energy(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_LJrepulsive, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vector2T_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LJrepulsive_energy__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vector2T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LJrepulsive_energy__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LJrepulsive_energy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LJrepulsive::energy(Vec const,flt const,flt const)\n"
    "    LJrepulsive::energy(Vec const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LJrepulsive_forces__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec arg1 ;
  flt arg2 ;
  flt arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJrepulsive_forces",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJrepulsive_forces" "', argument " "1"" of type '" "Vec const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJrepulsive_forces" "', argument " "1"" of type '" "Vec const""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJrepulsive_forces" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LJrepulsive_forces" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  result = LJrepulsive::forces(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJrepulsive_forces__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJrepulsive *arg1 = (LJrepulsive *) 0 ;
  Vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJrepulsive_forces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJrepulsive, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJrepulsive_forces" "', argument " "1"" of type '" "LJrepulsive *""'"); 
  }
  arg1 = reinterpret_cast< LJrepulsive * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJrepulsive_forces" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJrepulsive_forces" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  result = (arg1)->forces((Vec const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJrepulsive_forces(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_LJrepulsive, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vector2T_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LJrepulsive_forces__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vector2T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LJrepulsive_forces__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LJrepulsive_forces'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LJrepulsive::forces(Vec const,flt const,flt const)\n"
    "    LJrepulsive::forces(Vec const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_LJrepulsive(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJrepulsive *arg1 = (LJrepulsive *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJrepulsive",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJrepulsive, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJrepulsive" "', argument " "1"" of type '" "LJrepulsive *""'"); 
  }
  arg1 = reinterpret_cast< LJrepulsive * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJrepulsive_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LJrepulsive, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LJattract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  flt arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  LJattract *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LJattract",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LJattract" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LJattract" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  result = (LJattract *)new LJattract(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJattract, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJattract_energy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec arg1 ;
  flt arg2 ;
  flt arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJattract_energy",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJattract_energy" "', argument " "1"" of type '" "Vec const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJattract_energy" "', argument " "1"" of type '" "Vec const""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJattract_energy" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LJattract_energy" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  result = (flt)LJattract::energy(arg1,arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJattract_energy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJattract_energy",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "LJattract_energy" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  result = (flt)LJattract::energy(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJattract_energy__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJattract *arg1 = (LJattract *) 0 ;
  Vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJattract_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJattract, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJattract_energy" "', argument " "1"" of type '" "LJattract *""'"); 
  }
  arg1 = reinterpret_cast< LJattract * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJattract_energy" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJattract_energy" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  result = (flt)(arg1)->energy((Vec const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJattract_energy(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_LJattract_energy__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_LJattract, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vector2T_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LJattract_energy__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vector2T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LJattract_energy__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LJattract_energy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LJattract::energy(Vec const,flt const,flt const)\n"
    "    LJattract::energy(flt const)\n"
    "    LJattract::energy(Vec const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LJattract_forces__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec arg1 ;
  flt arg2 ;
  flt arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJattract_forces",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJattract_forces" "', argument " "1"" of type '" "Vec const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJattract_forces" "', argument " "1"" of type '" "Vec const""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJattract_forces" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LJattract_forces" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  result = LJattract::forces(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJattract_forces__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJattract_forces",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "LJattract_forces" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  result = (flt)LJattract::forces(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJattract_forces__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJattract *arg1 = (LJattract *) 0 ;
  Vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJattract_forces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJattract, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJattract_forces" "', argument " "1"" of type '" "LJattract *""'"); 
  }
  arg1 = reinterpret_cast< LJattract * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJattract_forces" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJattract_forces" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  result = (arg1)->forces((Vec const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJattract_forces(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_LJattract_forces__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_LJattract, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vector2T_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LJattract_forces__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vector2T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LJattract_forces__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LJattract_forces'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LJattract::forces(Vec const,flt const,flt const)\n"
    "    LJattract::forces(flt const)\n"
    "    LJattract::forces(Vec const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_LJattract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJattract *arg1 = (LJattract *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJattract",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJattract, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJattract" "', argument " "1"" of type '" "LJattract *""'"); 
  }
  arg1 = reinterpret_cast< LJattract * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJattract_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LJattract, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LJattractCut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  flt arg2 ;
  flt arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  LJattractCut *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_LJattractCut",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LJattractCut" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LJattractCut" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LJattractCut" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  result = (LJattractCut *)new LJattractCut(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJattractCut, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJattractCut_energy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec arg1 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:LJattractCut_energy",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJattractCut_energy" "', argument " "1"" of type '" "Vec const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJattractCut_energy" "', argument " "1"" of type '" "Vec const""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJattractCut_energy" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LJattractCut_energy" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "LJattractCut_energy" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  result = (flt)LJattractCut::energy(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJattractCut_energy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJattractCut *arg1 = (LJattractCut *) 0 ;
  Vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJattractCut_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJattractCut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJattractCut_energy" "', argument " "1"" of type '" "LJattractCut *""'"); 
  }
  arg1 = reinterpret_cast< LJattractCut * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJattractCut_energy" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJattractCut_energy" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  result = (flt)(arg1)->energy((Vec const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJattractCut_energy(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_LJattractCut, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vector2T_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LJattractCut_energy__SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vector2T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_LJattractCut_energy__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LJattractCut_energy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LJattractCut::energy(Vec const,flt const,flt const,flt const)\n"
    "    LJattractCut::energy(Vec const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LJattractCut_forces__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec arg1 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:LJattractCut_forces",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJattractCut_forces" "', argument " "1"" of type '" "Vec const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJattractCut_forces" "', argument " "1"" of type '" "Vec const""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJattractCut_forces" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LJattractCut_forces" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "LJattractCut_forces" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  result = LJattractCut::forces(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJattractCut_forces__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJattractCut *arg1 = (LJattractCut *) 0 ;
  Vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJattractCut_forces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJattractCut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJattractCut_forces" "', argument " "1"" of type '" "LJattractCut *""'"); 
  }
  arg1 = reinterpret_cast< LJattractCut * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJattractCut_forces" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJattractCut_forces" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  result = (arg1)->forces((Vec const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJattractCut_forces(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_LJattractCut, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vector2T_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LJattractCut_forces__SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vector2T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_LJattractCut_forces__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LJattractCut_forces'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LJattractCut::forces(Vec const,flt const,flt const,flt const)\n"
    "    LJattractCut::forces(Vec const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_LJattractCut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJattractCut *arg1 = (LJattractCut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJattractCut",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJattractCut, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJattractCut" "', argument " "1"" of type '" "LJattractCut *""'"); 
  }
  arg1 = reinterpret_cast< LJattractCut * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJattractCut_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LJattractCut, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LJFullCut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  flt arg2 ;
  flt arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  LJFullCut *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_LJFullCut",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LJFullCut" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LJFullCut" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LJFullCut" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  result = (LJFullCut *)new LJFullCut(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJFullCut, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJFullCut_energy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec arg1 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:LJFullCut_energy",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJFullCut_energy" "', argument " "1"" of type '" "Vec const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJFullCut_energy" "', argument " "1"" of type '" "Vec const""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJFullCut_energy" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LJFullCut_energy" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "LJFullCut_energy" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  result = (flt)LJFullCut::energy(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJFullCut_energy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  flt arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJFullCut_energy",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "LJFullCut_energy" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJFullCut_energy" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  result = (flt)LJFullCut::energy(arg1,arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJFullCut_energy__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJFullCut *arg1 = (LJFullCut *) 0 ;
  Vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJFullCut_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJFullCut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJFullCut_energy" "', argument " "1"" of type '" "LJFullCut *""'"); 
  }
  arg1 = reinterpret_cast< LJFullCut * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJFullCut_energy" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJFullCut_energy" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  result = (flt)(arg1)->energy((Vec const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJFullCut_energy(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_LJFullCut, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vector2T_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LJFullCut_energy__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LJFullCut_energy__SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vector2T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_LJFullCut_energy__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LJFullCut_energy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LJFullCut::energy(Vec const,flt const,flt const,flt const)\n"
    "    LJFullCut::energy(flt const,flt const)\n"
    "    LJFullCut::energy(Vec const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LJFullCut_forces__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec arg1 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:LJFullCut_forces",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJFullCut_forces" "', argument " "1"" of type '" "Vec const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJFullCut_forces" "', argument " "1"" of type '" "Vec const""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJFullCut_forces" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LJFullCut_forces" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "LJFullCut_forces" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  result = LJFullCut::forces(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJFullCut_forces__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  flt arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJFullCut_forces",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "LJFullCut_forces" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJFullCut_forces" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  result = (flt)LJFullCut::forces(arg1,arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJFullCut_forces__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJFullCut *arg1 = (LJFullCut *) 0 ;
  Vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJFullCut_forces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJFullCut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJFullCut_forces" "', argument " "1"" of type '" "LJFullCut *""'"); 
  }
  arg1 = reinterpret_cast< LJFullCut * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJFullCut_forces" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJFullCut_forces" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  result = (arg1)->forces((Vec const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJFullCut_forces(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_LJFullCut, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vector2T_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LJFullCut_forces__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LJFullCut_forces__SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vector2T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_LJFullCut_forces__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LJFullCut_forces'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LJFullCut::forces(Vec const,flt const,flt const,flt const)\n"
    "    LJFullCut::forces(flt const,flt const)\n"
    "    LJFullCut::forces(Vec const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_LJFullCut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJFullCut *arg1 = (LJFullCut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJFullCut",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJFullCut, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJFullCut" "', argument " "1"" of type '" "LJFullCut *""'"); 
  }
  arg1 = reinterpret_cast< LJFullCut * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJFullCut_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LJFullCut, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_spring(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  flt arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  spring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_spring",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_spring" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_spring" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  result = (spring *)new spring(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_spring, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spring_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  spring *arg1 = (spring *) 0 ;
  Vec arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:spring_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_spring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spring_energy" "', argument " "1"" of type '" "spring *""'"); 
  }
  arg1 = reinterpret_cast< spring * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "spring_energy" "', argument " "2"" of type '" "Vec const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "spring_energy" "', argument " "2"" of type '" "Vec const""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spring_forces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  spring *arg1 = (spring *) 0 ;
  Vec arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:spring_forces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_spring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spring_forces" "', argument " "1"" of type '" "spring *""'"); 
  }
  arg1 = reinterpret_cast< spring * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "spring_forces" "', argument " "2"" of type '" "Vec const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "spring_forces" "', argument " "2"" of type '" "Vec const""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->forces(arg2);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_spring(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  spring *arg1 = (spring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_spring",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_spring, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_spring" "', argument " "1"" of type '" "spring *""'"); 
  }
  arg1 = reinterpret_cast< spring * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *spring_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_spring, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_bondangle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  flt arg2 ;
  bool arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bondangle *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_bondangle",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_bondangle" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_bondangle" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_bondangle" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bondangle *)new bondangle(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bondangle, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_bondangle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  flt arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bondangle *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_bondangle",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_bondangle" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_bondangle" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  result = (bondangle *)new bondangle(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bondangle, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_bondangle(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_bondangle__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_bondangle__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_bondangle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    bondangle::bondangle(flt const,flt const,bool const)\n"
    "    bondangle::bondangle(flt const,flt const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_bondangle_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bondangle *arg1 = (bondangle *) 0 ;
  Vec *arg2 = 0 ;
  Vec *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:bondangle_energy",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bondangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bondangle_energy" "', argument " "1"" of type '" "bondangle *""'"); 
  }
  arg1 = reinterpret_cast< bondangle * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bondangle_energy" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bondangle_energy" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "bondangle_energy" "', argument " "3"" of type '" "Vec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bondangle_energy" "', argument " "3"" of type '" "Vec const &""'"); 
  }
  arg3 = reinterpret_cast< Vec * >(argp3);
  result = (flt)(arg1)->energy((Vec const &)*arg2,(Vec const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bondangle_forces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bondangle *arg1 = (bondangle *) 0 ;
  Vec *arg2 = 0 ;
  Vec *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< Nvector< Vector2< double >,3 > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:bondangle_forces",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bondangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bondangle_forces" "', argument " "1"" of type '" "bondangle *""'"); 
  }
  arg1 = reinterpret_cast< bondangle * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bondangle_forces" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bondangle_forces" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "bondangle_forces" "', argument " "3"" of type '" "Vec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bondangle_forces" "', argument " "3"" of type '" "Vec const &""'"); 
  }
  arg3 = reinterpret_cast< Vec * >(argp3);
  result = (arg1)->forces((Vec const &)*arg2,(Vec const &)*arg3);
  resultobj = SWIG_NewPointerObj((new Nvector< Vec,3 >(static_cast< const Nvector< Vec,3 >& >(result))), SWIGTYPE_p_NvectorT_Vector2T_double_t_3_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_bondangle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bondangle *arg1 = (bondangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_bondangle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bondangle, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_bondangle" "', argument " "1"" of type '" "bondangle *""'"); 
  }
  arg1 = reinterpret_cast< bondangle * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *bondangle_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bondangle, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_electricScreened(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  electricScreened *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_electricScreened",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_electricScreened" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_electricScreened" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_electricScreened" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_electricScreened" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  result = (electricScreened *)new electricScreened(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_electricScreened, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_electricScreened_energy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  electricScreened *arg1 = (electricScreened *) 0 ;
  Vec arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:electricScreened_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_electricScreened, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "electricScreened_energy" "', argument " "1"" of type '" "electricScreened *""'"); 
  }
  arg1 = reinterpret_cast< electricScreened * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "electricScreened_energy" "', argument " "2"" of type '" "Vec const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "electricScreened_energy" "', argument " "2"" of type '" "Vec const""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_electricScreened_energy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:electricScreened_energy",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "electricScreened_energy" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "electricScreened_energy" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "electricScreened_energy" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "electricScreened_energy" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  result = (flt)electricScreened::energy(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_electricScreened_energy__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  flt arg2 ;
  flt arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:electricScreened_energy",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "electricScreened_energy" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "electricScreened_energy" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "electricScreened_energy" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  result = (flt)electricScreened::energy(arg1,arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_electricScreened_energy(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_electricScreened, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vector2T_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_electricScreened_energy__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_electricScreened_energy__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_electricScreened_energy__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'electricScreened_energy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    electricScreened::energy(Vec const)\n"
    "    electricScreened::energy(flt const,flt const,flt const,flt const)\n"
    "    electricScreened::energy(flt const,flt const,flt const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_electricScreened_forces__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  electricScreened *arg1 = (electricScreened *) 0 ;
  Vec arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:electricScreened_forces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_electricScreened, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "electricScreened_forces" "', argument " "1"" of type '" "electricScreened *""'"); 
  }
  arg1 = reinterpret_cast< electricScreened * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "electricScreened_forces" "', argument " "2"" of type '" "Vec const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "electricScreened_forces" "', argument " "2"" of type '" "Vec const""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->forces(arg2);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_electricScreened_forces__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec arg1 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:electricScreened_forces",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "electricScreened_forces" "', argument " "1"" of type '" "Vec const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "electricScreened_forces" "', argument " "1"" of type '" "Vec const""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "electricScreened_forces" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "electricScreened_forces" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "electricScreened_forces" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  result = electricScreened::forces(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_electricScreened_forces__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec arg1 ;
  flt arg2 ;
  flt arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:electricScreened_forces",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "electricScreened_forces" "', argument " "1"" of type '" "Vec const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "electricScreened_forces" "', argument " "1"" of type '" "Vec const""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "electricScreened_forces" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "electricScreened_forces" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  result = electricScreened::forces(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_electricScreened_forces(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_electricScreened, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vector2T_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_electricScreened_forces__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vector2T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_electricScreened_forces__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vector2T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_electricScreened_forces__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'electricScreened_forces'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    electricScreened::forces(Vec const)\n"
    "    electricScreened::forces(Vec const,flt const,flt const,flt const)\n"
    "    electricScreened::forces(Vec const,flt const,flt const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_electricScreened(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  electricScreened *arg1 = (electricScreened *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_electricScreened",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_electricScreened, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_electricScreened" "', argument " "1"" of type '" "electricScreened *""'"); 
  }
  arg1 = reinterpret_cast< electricScreened * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *electricScreened_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_electricScreened, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_fixedForceAtom_F_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedForceAtom *arg1 = (fixedForceAtom *) 0 ;
  Vec *arg2 = (Vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fixedForceAtom_F_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedForceAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedForceAtom_F_set" "', argument " "1"" of type '" "fixedForceAtom *""'"); 
  }
  arg1 = reinterpret_cast< fixedForceAtom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fixedForceAtom_F_set" "', argument " "2"" of type '" "Vec *""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  if (arg1) (arg1)->F = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedForceAtom_F_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedForceAtom *arg1 = (fixedForceAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fixedForceAtom_F_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedForceAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedForceAtom_F_get" "', argument " "1"" of type '" "fixedForceAtom *""'"); 
  }
  arg1 = reinterpret_cast< fixedForceAtom * >(argp1);
  result = (Vec *)& ((arg1)->F);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedForceAtom_a_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedForceAtom *arg1 = (fixedForceAtom *) 0 ;
  atom *arg2 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fixedForceAtom_a_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedForceAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedForceAtom_a_set" "', argument " "1"" of type '" "fixedForceAtom *""'"); 
  }
  arg1 = reinterpret_cast< fixedForceAtom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fixedForceAtom_a_set" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  if (arg1) (arg1)->a = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedForceAtom_a_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedForceAtom *arg1 = (fixedForceAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fixedForceAtom_a_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedForceAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedForceAtom_a_get" "', argument " "1"" of type '" "fixedForceAtom *""'"); 
  }
  arg1 = reinterpret_cast< fixedForceAtom * >(argp1);
  result = (atom *) ((arg1)->a);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fixedForceAtom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec arg1 ;
  atom *arg2 = (atom *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fixedForceAtom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_fixedForceAtom",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_fixedForceAtom" "', argument " "1"" of type '" "Vec""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_fixedForceAtom" "', argument " "1"" of type '" "Vec""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_fixedForceAtom" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  result = (fixedForceAtom *)new fixedForceAtom(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fixedForceAtom, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedForceAtom_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedForceAtom *arg1 = (fixedForceAtom *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fixedForceAtom_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedForceAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedForceAtom_energy" "', argument " "1"" of type '" "fixedForceAtom *""'"); 
  }
  arg1 = reinterpret_cast< fixedForceAtom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fixedForceAtom_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedForceAtom_setForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedForceAtom *arg1 = (fixedForceAtom *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fixedForceAtom_setForce",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedForceAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedForceAtom_setForce" "', argument " "1"" of type '" "fixedForceAtom *""'"); 
  }
  arg1 = reinterpret_cast< fixedForceAtom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fixedForceAtom_setForce" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->setForce(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_fixedForceAtom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedForceAtom *arg1 = (fixedForceAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_fixedForceAtom",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedForceAtom, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_fixedForceAtom" "', argument " "1"" of type '" "fixedForceAtom *""'"); 
  }
  arg1 = reinterpret_cast< fixedForceAtom * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *fixedForceAtom_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fixedForceAtom, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_fixedForce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::vector< fixedForceAtom > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fixedForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_fixedForce",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_fixedForceAtom_std__allocatorT_fixedForceAtom_t_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_fixedForce" "', argument " "1"" of type '" "std::vector< fixedForceAtom >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_fixedForce" "', argument " "1"" of type '" "std::vector< fixedForceAtom >""'");
    } else {
      std::vector< fixedForceAtom > * temp = reinterpret_cast< std::vector< fixedForceAtom > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (fixedForce *)new fixedForce(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fixedForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fixedForce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedForce *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_fixedForce")) SWIG_fail;
  result = (fixedForce *)new fixedForce();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fixedForce, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fixedForce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_fixedForce__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_fixedForceAtom_std__allocatorT_fixedForceAtom_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_fixedForce__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_fixedForce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fixedForce::fixedForce(std::vector< fixedForceAtom >)\n"
    "    fixedForce::fixedForce()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fixedForce_add__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedForce *arg1 = (fixedForce *) 0 ;
  SwigValueWrapper< fixedForceAtom > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fixedForce_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedForce_add" "', argument " "1"" of type '" "fixedForce *""'"); 
  }
  arg1 = reinterpret_cast< fixedForce * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fixedForceAtom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fixedForce_add" "', argument " "2"" of type '" "fixedForceAtom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fixedForce_add" "', argument " "2"" of type '" "fixedForceAtom""'");
    } else {
      fixedForceAtom * temp = reinterpret_cast< fixedForceAtom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->add(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedForce_add__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedForce *arg1 = (fixedForce *) 0 ;
  Vec arg2 ;
  atom *arg3 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fixedForce_add",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedForce_add" "', argument " "1"" of type '" "fixedForce *""'"); 
  }
  arg1 = reinterpret_cast< fixedForce * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fixedForce_add" "', argument " "2"" of type '" "Vec""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fixedForce_add" "', argument " "2"" of type '" "Vec""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fixedForce_add" "', argument " "3"" of type '" "atom *""'"); 
  }
  arg3 = reinterpret_cast< atom * >(argp3);
  (arg1)->add(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedForce_add__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedForce *arg1 = (fixedForce *) 0 ;
  flt arg2 ;
  flt arg3 ;
  atom *arg4 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fixedForce_add",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedForce_add" "', argument " "1"" of type '" "fixedForce *""'"); 
  }
  arg1 = reinterpret_cast< fixedForce * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fixedForce_add" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fixedForce_add" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fixedForce_add" "', argument " "4"" of type '" "atom *""'"); 
  }
  arg4 = reinterpret_cast< atom * >(argp4);
  (arg1)->add(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedForce_add(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fixedForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fixedForceAtom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_fixedForce_add__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fixedForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vector2T_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_atom, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_fixedForce_add__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fixedForce, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_atom, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_fixedForce_add__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fixedForce_add'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fixedForce::add(fixedForceAtom)\n"
    "    fixedForce::add(Vec,atom *)\n"
    "    fixedForce::add(flt,flt,atom *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fixedForce_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedForce *arg1 = (fixedForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fixedForce_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedForce_size" "', argument " "1"" of type '" "fixedForce const *""'"); 
  }
  arg1 = reinterpret_cast< fixedForce * >(argp1);
  result = (uint)((fixedForce const *)arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedForce_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedForce *arg1 = (fixedForce *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fixedForce_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedForce_energy" "', argument " "1"" of type '" "fixedForce *""'"); 
  }
  arg1 = reinterpret_cast< fixedForce * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fixedForce_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedForce_setForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedForce *arg1 = (fixedForce *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fixedForce_setForces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedForce_setForces" "', argument " "1"" of type '" "fixedForce *""'"); 
  }
  arg1 = reinterpret_cast< fixedForce * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fixedForce_setForces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->setForces(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedForce_pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedForce *arg1 = (fixedForce *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fixedForce_pressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedForce, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedForce_pressure" "', argument " "1"" of type '" "fixedForce *""'"); 
  }
  arg1 = reinterpret_cast< fixedForce * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fixedForce_pressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->pressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_fixedForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedForce *arg1 = (fixedForce *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_fixedForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedForce, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_fixedForce" "', argument " "1"" of type '" "fixedForce *""'"); 
  }
  arg1 = reinterpret_cast< fixedForce * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *fixedForce_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fixedForce, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_fixedSpringAtom_loc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedSpringAtom *arg1 = (fixedSpringAtom *) 0 ;
  Vec *arg2 = (Vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fixedSpringAtom_loc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedSpringAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedSpringAtom_loc_set" "', argument " "1"" of type '" "fixedSpringAtom *""'"); 
  }
  arg1 = reinterpret_cast< fixedSpringAtom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fixedSpringAtom_loc_set" "', argument " "2"" of type '" "Vec *""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  if (arg1) (arg1)->loc = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedSpringAtom_loc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedSpringAtom *arg1 = (fixedSpringAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fixedSpringAtom_loc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedSpringAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedSpringAtom_loc_get" "', argument " "1"" of type '" "fixedSpringAtom *""'"); 
  }
  arg1 = reinterpret_cast< fixedSpringAtom * >(argp1);
  result = (Vec *)& ((arg1)->loc);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedSpringAtom_k_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedSpringAtom *arg1 = (fixedSpringAtom *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fixedSpringAtom_k_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedSpringAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedSpringAtom_k_set" "', argument " "1"" of type '" "fixedSpringAtom *""'"); 
  }
  arg1 = reinterpret_cast< fixedSpringAtom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fixedSpringAtom_k_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->k = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedSpringAtom_k_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedSpringAtom *arg1 = (fixedSpringAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fixedSpringAtom_k_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedSpringAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedSpringAtom_k_get" "', argument " "1"" of type '" "fixedSpringAtom *""'"); 
  }
  arg1 = reinterpret_cast< fixedSpringAtom * >(argp1);
  result = (flt) ((arg1)->k);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedSpringAtom_usecoord_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedSpringAtom *arg1 = (fixedSpringAtom *) 0 ;
  bool *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fixedSpringAtom_usecoord_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedSpringAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedSpringAtom_usecoord_set" "', argument " "1"" of type '" "fixedSpringAtom *""'"); 
  }
  arg1 = reinterpret_cast< fixedSpringAtom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fixedSpringAtom_usecoord_set" "', argument " "2"" of type '" "bool [3]""'"); 
  } 
  arg2 = reinterpret_cast< bool * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)3; ++ii) arg1->usecoord[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""usecoord""' of type '""bool [3]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedSpringAtom_usecoord_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedSpringAtom *arg1 = (fixedSpringAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fixedSpringAtom_usecoord_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedSpringAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedSpringAtom_usecoord_get" "', argument " "1"" of type '" "fixedSpringAtom *""'"); 
  }
  arg1 = reinterpret_cast< fixedSpringAtom * >(argp1);
  result = (bool *)(bool *) ((arg1)->usecoord);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bool, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedSpringAtom_a_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedSpringAtom *arg1 = (fixedSpringAtom *) 0 ;
  atom *arg2 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fixedSpringAtom_a_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedSpringAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedSpringAtom_a_set" "', argument " "1"" of type '" "fixedSpringAtom *""'"); 
  }
  arg1 = reinterpret_cast< fixedSpringAtom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fixedSpringAtom_a_set" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  if (arg1) (arg1)->a = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedSpringAtom_a_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedSpringAtom *arg1 = (fixedSpringAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fixedSpringAtom_a_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedSpringAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedSpringAtom_a_get" "', argument " "1"" of type '" "fixedSpringAtom *""'"); 
  }
  arg1 = reinterpret_cast< fixedSpringAtom * >(argp1);
  result = (atom *) ((arg1)->a);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fixedSpringAtom__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  Vec arg2 ;
  flt arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  fixedSpringAtom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_fixedSpringAtom",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_fixedSpringAtom" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_fixedSpringAtom" "', argument " "2"" of type '" "Vec""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_fixedSpringAtom" "', argument " "2"" of type '" "Vec""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_fixedSpringAtom" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_fixedSpringAtom" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_fixedSpringAtom" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_fixedSpringAtom" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  result = (fixedSpringAtom *)new fixedSpringAtom(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fixedSpringAtom, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fixedSpringAtom__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  Vec arg2 ;
  flt arg3 ;
  bool arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  fixedSpringAtom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_fixedSpringAtom",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_fixedSpringAtom" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_fixedSpringAtom" "', argument " "2"" of type '" "Vec""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_fixedSpringAtom" "', argument " "2"" of type '" "Vec""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_fixedSpringAtom" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_fixedSpringAtom" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_fixedSpringAtom" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (fixedSpringAtom *)new fixedSpringAtom(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fixedSpringAtom, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fixedSpringAtom__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  Vec arg2 ;
  flt arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fixedSpringAtom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_fixedSpringAtom",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_fixedSpringAtom" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_fixedSpringAtom" "', argument " "2"" of type '" "Vec""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_fixedSpringAtom" "', argument " "2"" of type '" "Vec""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_fixedSpringAtom" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_fixedSpringAtom" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (fixedSpringAtom *)new fixedSpringAtom(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fixedSpringAtom, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fixedSpringAtom__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  Vec arg2 ;
  flt arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fixedSpringAtom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_fixedSpringAtom",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_fixedSpringAtom" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_fixedSpringAtom" "', argument " "2"" of type '" "Vec""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_fixedSpringAtom" "', argument " "2"" of type '" "Vec""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_fixedSpringAtom" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  result = (fixedSpringAtom *)new fixedSpringAtom(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fixedSpringAtom, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fixedSpringAtom(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vector2T_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_fixedSpringAtom__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vector2T_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_fixedSpringAtom__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vector2T_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_fixedSpringAtom__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vector2T_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_fixedSpringAtom__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_fixedSpringAtom'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fixedSpringAtom::fixedSpringAtom(atom *,Vec,flt,bool,bool,bool)\n"
    "    fixedSpringAtom::fixedSpringAtom(atom *,Vec,flt,bool,bool)\n"
    "    fixedSpringAtom::fixedSpringAtom(atom *,Vec,flt,bool)\n"
    "    fixedSpringAtom::fixedSpringAtom(atom *,Vec,flt)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fixedSpringAtom_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedSpringAtom *arg1 = (fixedSpringAtom *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fixedSpringAtom_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedSpringAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedSpringAtom_energy" "', argument " "1"" of type '" "fixedSpringAtom *""'"); 
  }
  arg1 = reinterpret_cast< fixedSpringAtom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fixedSpringAtom_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedSpringAtom_setForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedSpringAtom *arg1 = (fixedSpringAtom *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fixedSpringAtom_setForce",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedSpringAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedSpringAtom_setForce" "', argument " "1"" of type '" "fixedSpringAtom *""'"); 
  }
  arg1 = reinterpret_cast< fixedSpringAtom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fixedSpringAtom_setForce" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->setForce(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_fixedSpringAtom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedSpringAtom *arg1 = (fixedSpringAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_fixedSpringAtom",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedSpringAtom, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_fixedSpringAtom" "', argument " "1"" of type '" "fixedSpringAtom *""'"); 
  }
  arg1 = reinterpret_cast< fixedSpringAtom * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *fixedSpringAtom_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fixedSpringAtom, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_fixedSpring__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::vector< fixedSpringAtom > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fixedSpring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_fixedSpring",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_fixedSpringAtom_std__allocatorT_fixedSpringAtom_t_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_fixedSpring" "', argument " "1"" of type '" "std::vector< fixedSpringAtom >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_fixedSpring" "', argument " "1"" of type '" "std::vector< fixedSpringAtom >""'");
    } else {
      std::vector< fixedSpringAtom > * temp = reinterpret_cast< std::vector< fixedSpringAtom > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (fixedSpring *)new fixedSpring(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fixedSpring, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fixedSpring__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedSpring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_fixedSpring")) SWIG_fail;
  result = (fixedSpring *)new fixedSpring();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fixedSpring, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fixedSpring(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_fixedSpring__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_fixedSpringAtom_std__allocatorT_fixedSpringAtom_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_fixedSpring__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_fixedSpring'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fixedSpring::fixedSpring(std::vector< fixedSpringAtom >)\n"
    "    fixedSpring::fixedSpring()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fixedSpring_add__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedSpring *arg1 = (fixedSpring *) 0 ;
  SwigValueWrapper< fixedSpringAtom > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fixedSpring_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedSpring_add" "', argument " "1"" of type '" "fixedSpring *""'"); 
  }
  arg1 = reinterpret_cast< fixedSpring * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fixedSpringAtom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fixedSpring_add" "', argument " "2"" of type '" "fixedSpringAtom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fixedSpring_add" "', argument " "2"" of type '" "fixedSpringAtom""'");
    } else {
      fixedSpringAtom * temp = reinterpret_cast< fixedSpringAtom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->add(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedSpring_add__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedSpring *arg1 = (fixedSpring *) 0 ;
  atom *arg2 = (atom *) 0 ;
  Vec arg3 ;
  flt arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:fixedSpring_add",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedSpring_add" "', argument " "1"" of type '" "fixedSpring *""'"); 
  }
  arg1 = reinterpret_cast< fixedSpring * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fixedSpring_add" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fixedSpring_add" "', argument " "3"" of type '" "Vec""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fixedSpring_add" "', argument " "3"" of type '" "Vec""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fixedSpring_add" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fixedSpring_add" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fixedSpring_add" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fixedSpring_add" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  (arg1)->add(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedSpring_add__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedSpring *arg1 = (fixedSpring *) 0 ;
  atom *arg2 = (atom *) 0 ;
  Vec arg3 ;
  flt arg4 ;
  bool arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:fixedSpring_add",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedSpring_add" "', argument " "1"" of type '" "fixedSpring *""'"); 
  }
  arg1 = reinterpret_cast< fixedSpring * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fixedSpring_add" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fixedSpring_add" "', argument " "3"" of type '" "Vec""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fixedSpring_add" "', argument " "3"" of type '" "Vec""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fixedSpring_add" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fixedSpring_add" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fixedSpring_add" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  (arg1)->add(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedSpring_add__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedSpring *arg1 = (fixedSpring *) 0 ;
  atom *arg2 = (atom *) 0 ;
  Vec arg3 ;
  flt arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:fixedSpring_add",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedSpring_add" "', argument " "1"" of type '" "fixedSpring *""'"); 
  }
  arg1 = reinterpret_cast< fixedSpring * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fixedSpring_add" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fixedSpring_add" "', argument " "3"" of type '" "Vec""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fixedSpring_add" "', argument " "3"" of type '" "Vec""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fixedSpring_add" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fixedSpring_add" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  (arg1)->add(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedSpring_add__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedSpring *arg1 = (fixedSpring *) 0 ;
  atom *arg2 = (atom *) 0 ;
  Vec arg3 ;
  flt arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fixedSpring_add",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedSpring_add" "', argument " "1"" of type '" "fixedSpring *""'"); 
  }
  arg1 = reinterpret_cast< fixedSpring * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fixedSpring_add" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fixedSpring_add" "', argument " "3"" of type '" "Vec""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fixedSpring_add" "', argument " "3"" of type '" "Vec""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fixedSpring_add" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  (arg1)->add(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedSpring_add(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fixedSpring, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fixedSpringAtom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_fixedSpring_add__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fixedSpring, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_atom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Vector2T_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_fixedSpring_add__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fixedSpring, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_atom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Vector2T_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_fixedSpring_add__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fixedSpring, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_atom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Vector2T_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_fixedSpring_add__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fixedSpring, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_atom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Vector2T_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_fixedSpring_add__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fixedSpring_add'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fixedSpring::add(fixedSpringAtom)\n"
    "    fixedSpring::add(atom *,Vec,flt,bool,bool,bool)\n"
    "    fixedSpring::add(atom *,Vec,flt,bool,bool)\n"
    "    fixedSpring::add(atom *,Vec,flt,bool)\n"
    "    fixedSpring::add(atom *,Vec,flt)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fixedSpring_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedSpring *arg1 = (fixedSpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fixedSpring_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedSpring_size" "', argument " "1"" of type '" "fixedSpring const *""'"); 
  }
  arg1 = reinterpret_cast< fixedSpring * >(argp1);
  result = (uint)((fixedSpring const *)arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedSpring_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedSpring *arg1 = (fixedSpring *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fixedSpring_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedSpring_energy" "', argument " "1"" of type '" "fixedSpring *""'"); 
  }
  arg1 = reinterpret_cast< fixedSpring * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fixedSpring_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedSpring_setForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedSpring *arg1 = (fixedSpring *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fixedSpring_setForces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedSpring_setForces" "', argument " "1"" of type '" "fixedSpring *""'"); 
  }
  arg1 = reinterpret_cast< fixedSpring * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fixedSpring_setForces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->setForces(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fixedSpring_pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedSpring *arg1 = (fixedSpring *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fixedSpring_pressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fixedSpring_pressure" "', argument " "1"" of type '" "fixedSpring *""'"); 
  }
  arg1 = reinterpret_cast< fixedSpring * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fixedSpring_pressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->pressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_fixedSpring(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fixedSpring *arg1 = (fixedSpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_fixedSpring",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fixedSpring, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_fixedSpring" "', argument " "1"" of type '" "fixedSpring *""'"); 
  }
  arg1 = reinterpret_cast< fixedSpring * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *fixedSpring_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fixedSpring, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_COMSpring__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = (atomgroup *) 0 ;
  atomgroup *arg2 = (atomgroup *) 0 ;
  flt arg3 ;
  flt arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  COMSpring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_COMSpring",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_COMSpring" "', argument " "1"" of type '" "atomgroup *""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_COMSpring" "', argument " "2"" of type '" "atomgroup *""'"); 
  }
  arg2 = reinterpret_cast< atomgroup * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_COMSpring" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_COMSpring" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  result = (COMSpring *)new COMSpring(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_COMSpring, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_COMSpring__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = (atomgroup *) 0 ;
  atomgroup *arg2 = (atomgroup *) 0 ;
  flt arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  COMSpring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_COMSpring",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_COMSpring" "', argument " "1"" of type '" "atomgroup *""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_COMSpring" "', argument " "2"" of type '" "atomgroup *""'"); 
  }
  arg2 = reinterpret_cast< atomgroup * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_COMSpring" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  result = (COMSpring *)new COMSpring(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_COMSpring, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_COMSpring(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atomgroup, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_atomgroup, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_COMSpring__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atomgroup, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_atomgroup, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_COMSpring__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_COMSpring'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    COMSpring::COMSpring(atomgroup *,atomgroup *,flt,flt)\n"
    "    COMSpring::COMSpring(atomgroup *,atomgroup *,flt)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_COMSpring_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  COMSpring *arg1 = (COMSpring *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:COMSpring_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_COMSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "COMSpring_energy" "', argument " "1"" of type '" "COMSpring *""'"); 
  }
  arg1 = reinterpret_cast< COMSpring * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "COMSpring_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_COMSpring_setForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  COMSpring *arg1 = (COMSpring *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:COMSpring_setForces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_COMSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "COMSpring_setForces" "', argument " "1"" of type '" "COMSpring *""'"); 
  }
  arg1 = reinterpret_cast< COMSpring * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "COMSpring_setForces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->setForces(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_COMSpring_pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  COMSpring *arg1 = (COMSpring *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:COMSpring_pressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_COMSpring, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "COMSpring_pressure" "', argument " "1"" of type '" "COMSpring *""'"); 
  }
  arg1 = reinterpret_cast< COMSpring * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "COMSpring_pressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->pressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_COMSpring(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  COMSpring *arg1 = (COMSpring *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_COMSpring",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_COMSpring, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_COMSpring" "', argument " "1"" of type '" "COMSpring *""'"); 
  }
  arg1 = reinterpret_cast< COMSpring * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *COMSpring_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_COMSpring, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_bondgrouping_k_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bondgrouping *arg1 = (bondgrouping *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:bondgrouping_k_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bondgrouping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bondgrouping_k_set" "', argument " "1"" of type '" "bondgrouping *""'"); 
  }
  arg1 = reinterpret_cast< bondgrouping * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bondgrouping_k_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->k = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bondgrouping_k_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bondgrouping *arg1 = (bondgrouping *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:bondgrouping_k_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bondgrouping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bondgrouping_k_get" "', argument " "1"" of type '" "bondgrouping *""'"); 
  }
  arg1 = reinterpret_cast< bondgrouping * >(argp1);
  result = (flt) ((arg1)->k);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bondgrouping_x0_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bondgrouping *arg1 = (bondgrouping *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:bondgrouping_x0_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bondgrouping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bondgrouping_x0_set" "', argument " "1"" of type '" "bondgrouping *""'"); 
  }
  arg1 = reinterpret_cast< bondgrouping * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bondgrouping_x0_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->x0 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bondgrouping_x0_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bondgrouping *arg1 = (bondgrouping *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:bondgrouping_x0_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bondgrouping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bondgrouping_x0_get" "', argument " "1"" of type '" "bondgrouping *""'"); 
  }
  arg1 = reinterpret_cast< bondgrouping * >(argp1);
  result = (flt) ((arg1)->x0);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bondgrouping_a1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bondgrouping *arg1 = (bondgrouping *) 0 ;
  atom *arg2 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:bondgrouping_a1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bondgrouping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bondgrouping_a1_set" "', argument " "1"" of type '" "bondgrouping *""'"); 
  }
  arg1 = reinterpret_cast< bondgrouping * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bondgrouping_a1_set" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  if (arg1) (arg1)->a1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bondgrouping_a1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bondgrouping *arg1 = (bondgrouping *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:bondgrouping_a1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bondgrouping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bondgrouping_a1_get" "', argument " "1"" of type '" "bondgrouping *""'"); 
  }
  arg1 = reinterpret_cast< bondgrouping * >(argp1);
  result = (atom *) ((arg1)->a1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bondgrouping_a2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bondgrouping *arg1 = (bondgrouping *) 0 ;
  atom *arg2 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:bondgrouping_a2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bondgrouping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bondgrouping_a2_set" "', argument " "1"" of type '" "bondgrouping *""'"); 
  }
  arg1 = reinterpret_cast< bondgrouping * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bondgrouping_a2_set" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  if (arg1) (arg1)->a2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bondgrouping_a2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bondgrouping *arg1 = (bondgrouping *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:bondgrouping_a2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bondgrouping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bondgrouping_a2_get" "', argument " "1"" of type '" "bondgrouping *""'"); 
  }
  arg1 = reinterpret_cast< bondgrouping * >(argp1);
  result = (atom *) ((arg1)->a2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_bondgrouping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  flt arg2 ;
  atom *arg3 = (atom *) 0 ;
  atom *arg4 = (atom *) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bondgrouping *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_bondgrouping",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_bondgrouping" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_bondgrouping" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_bondgrouping" "', argument " "3"" of type '" "atom *""'"); 
  }
  arg3 = reinterpret_cast< atom * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_bondgrouping" "', argument " "4"" of type '" "atom *""'"); 
  }
  arg4 = reinterpret_cast< atom * >(argp4);
  result = (bondgrouping *)new bondgrouping(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bondgrouping, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_bondgrouping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bondgrouping *arg1 = (bondgrouping *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_bondgrouping",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bondgrouping, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_bondgrouping" "', argument " "1"" of type '" "bondgrouping *""'"); 
  }
  arg1 = reinterpret_cast< bondgrouping * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *bondgrouping_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bondgrouping, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_bondpairs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::vector< bondgrouping > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bondpairs *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_bondpairs",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_bondgrouping_std__allocatorT_bondgrouping_t_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_bondpairs" "', argument " "1"" of type '" "std::vector< bondgrouping >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_bondpairs" "', argument " "1"" of type '" "std::vector< bondgrouping >""'");
    } else {
      std::vector< bondgrouping > * temp = reinterpret_cast< std::vector< bondgrouping > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (bondpairs *)new bondpairs(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bondpairs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_bondpairs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bondpairs *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_bondpairs")) SWIG_fail;
  result = (bondpairs *)new bondpairs();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bondpairs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_bondpairs(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_bondpairs__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_bondgrouping_std__allocatorT_bondgrouping_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_bondpairs__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_bondpairs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    bondpairs::bondpairs(std::vector< bondgrouping >)\n"
    "    bondpairs::bondpairs()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_bondpairs_add__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bondpairs *arg1 = (bondpairs *) 0 ;
  SwigValueWrapper< bondgrouping > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:bondpairs_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bondpairs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bondpairs_add" "', argument " "1"" of type '" "bondpairs *""'"); 
  }
  arg1 = reinterpret_cast< bondpairs * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bondgrouping,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bondpairs_add" "', argument " "2"" of type '" "bondgrouping""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bondpairs_add" "', argument " "2"" of type '" "bondgrouping""'");
    } else {
      bondgrouping * temp = reinterpret_cast< bondgrouping * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->add(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bondpairs_add__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bondpairs *arg1 = (bondpairs *) 0 ;
  flt arg2 ;
  flt arg3 ;
  atom *arg4 = (atom *) 0 ;
  atom *arg5 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:bondpairs_add",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bondpairs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bondpairs_add" "', argument " "1"" of type '" "bondpairs *""'"); 
  }
  arg1 = reinterpret_cast< bondpairs * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bondpairs_add" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "bondpairs_add" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "bondpairs_add" "', argument " "4"" of type '" "atom *""'"); 
  }
  arg4 = reinterpret_cast< atom * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "bondpairs_add" "', argument " "5"" of type '" "atom *""'"); 
  }
  arg5 = reinterpret_cast< atom * >(argp5);
  (arg1)->add(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bondpairs_add(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_bondpairs, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_bondgrouping, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_bondpairs_add__SWIG_0(self, args);
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_bondpairs, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_atom, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_atom, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_bondpairs_add__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'bondpairs_add'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    bondpairs::add(bondgrouping)\n"
    "    bondpairs::add(flt,flt,atom *,atom *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_bondpairs_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bondpairs *arg1 = (bondpairs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:bondpairs_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bondpairs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bondpairs_size" "', argument " "1"" of type '" "bondpairs const *""'"); 
  }
  arg1 = reinterpret_cast< bondpairs * >(argp1);
  result = (uint)((bondpairs const *)arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bondpairs_mean_dists(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bondpairs *arg1 = (bondpairs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:bondpairs_mean_dists",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bondpairs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bondpairs_mean_dists" "', argument " "1"" of type '" "bondpairs const *""'"); 
  }
  arg1 = reinterpret_cast< bondpairs * >(argp1);
  result = (flt)((bondpairs const *)arg1)->mean_dists();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bondpairs_std_dists(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bondpairs *arg1 = (bondpairs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:bondpairs_std_dists",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bondpairs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bondpairs_std_dists" "', argument " "1"" of type '" "bondpairs const *""'"); 
  }
  arg1 = reinterpret_cast< bondpairs * >(argp1);
  result = (flt)((bondpairs const *)arg1)->std_dists();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bondpairs_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bondpairs *arg1 = (bondpairs *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:bondpairs_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bondpairs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bondpairs_energy" "', argument " "1"" of type '" "bondpairs *""'"); 
  }
  arg1 = reinterpret_cast< bondpairs * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bondpairs_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bondpairs_setForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bondpairs *arg1 = (bondpairs *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:bondpairs_setForces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bondpairs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bondpairs_setForces" "', argument " "1"" of type '" "bondpairs *""'"); 
  }
  arg1 = reinterpret_cast< bondpairs * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bondpairs_setForces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->setForces(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bondpairs_pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bondpairs *arg1 = (bondpairs *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:bondpairs_pressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bondpairs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bondpairs_pressure" "', argument " "1"" of type '" "bondpairs *""'"); 
  }
  arg1 = reinterpret_cast< bondpairs * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bondpairs_pressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->pressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_bondpairs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bondpairs *arg1 = (bondpairs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_bondpairs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bondpairs, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_bondpairs" "', argument " "1"" of type '" "bondpairs *""'"); 
  }
  arg1 = reinterpret_cast< bondpairs * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *bondpairs_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bondpairs, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_anglegrouping_k_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  anglegrouping *arg1 = (anglegrouping *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:anglegrouping_k_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_anglegrouping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "anglegrouping_k_set" "', argument " "1"" of type '" "anglegrouping *""'"); 
  }
  arg1 = reinterpret_cast< anglegrouping * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "anglegrouping_k_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->k = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_anglegrouping_k_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  anglegrouping *arg1 = (anglegrouping *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:anglegrouping_k_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_anglegrouping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "anglegrouping_k_get" "', argument " "1"" of type '" "anglegrouping *""'"); 
  }
  arg1 = reinterpret_cast< anglegrouping * >(argp1);
  result = (flt) ((arg1)->k);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_anglegrouping_x0_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  anglegrouping *arg1 = (anglegrouping *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:anglegrouping_x0_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_anglegrouping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "anglegrouping_x0_set" "', argument " "1"" of type '" "anglegrouping *""'"); 
  }
  arg1 = reinterpret_cast< anglegrouping * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "anglegrouping_x0_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->x0 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_anglegrouping_x0_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  anglegrouping *arg1 = (anglegrouping *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:anglegrouping_x0_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_anglegrouping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "anglegrouping_x0_get" "', argument " "1"" of type '" "anglegrouping *""'"); 
  }
  arg1 = reinterpret_cast< anglegrouping * >(argp1);
  result = (flt) ((arg1)->x0);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_anglegrouping_a1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  anglegrouping *arg1 = (anglegrouping *) 0 ;
  atom *arg2 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:anglegrouping_a1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_anglegrouping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "anglegrouping_a1_set" "', argument " "1"" of type '" "anglegrouping *""'"); 
  }
  arg1 = reinterpret_cast< anglegrouping * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "anglegrouping_a1_set" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  if (arg1) (arg1)->a1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_anglegrouping_a1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  anglegrouping *arg1 = (anglegrouping *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:anglegrouping_a1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_anglegrouping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "anglegrouping_a1_get" "', argument " "1"" of type '" "anglegrouping *""'"); 
  }
  arg1 = reinterpret_cast< anglegrouping * >(argp1);
  result = (atom *) ((arg1)->a1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_anglegrouping_a2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  anglegrouping *arg1 = (anglegrouping *) 0 ;
  atom *arg2 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:anglegrouping_a2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_anglegrouping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "anglegrouping_a2_set" "', argument " "1"" of type '" "anglegrouping *""'"); 
  }
  arg1 = reinterpret_cast< anglegrouping * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "anglegrouping_a2_set" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  if (arg1) (arg1)->a2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_anglegrouping_a2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  anglegrouping *arg1 = (anglegrouping *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:anglegrouping_a2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_anglegrouping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "anglegrouping_a2_get" "', argument " "1"" of type '" "anglegrouping *""'"); 
  }
  arg1 = reinterpret_cast< anglegrouping * >(argp1);
  result = (atom *) ((arg1)->a2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_anglegrouping_a3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  anglegrouping *arg1 = (anglegrouping *) 0 ;
  atom *arg2 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:anglegrouping_a3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_anglegrouping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "anglegrouping_a3_set" "', argument " "1"" of type '" "anglegrouping *""'"); 
  }
  arg1 = reinterpret_cast< anglegrouping * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "anglegrouping_a3_set" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  if (arg1) (arg1)->a3 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_anglegrouping_a3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  anglegrouping *arg1 = (anglegrouping *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:anglegrouping_a3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_anglegrouping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "anglegrouping_a3_get" "', argument " "1"" of type '" "anglegrouping *""'"); 
  }
  arg1 = reinterpret_cast< anglegrouping * >(argp1);
  result = (atom *) ((arg1)->a3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_anglegrouping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  flt arg2 ;
  atom *arg3 = (atom *) 0 ;
  atom *arg4 = (atom *) 0 ;
  atom *arg5 = (atom *) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  anglegrouping *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_anglegrouping",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_anglegrouping" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_anglegrouping" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_anglegrouping" "', argument " "3"" of type '" "atom *""'"); 
  }
  arg3 = reinterpret_cast< atom * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_anglegrouping" "', argument " "4"" of type '" "atom *""'"); 
  }
  arg4 = reinterpret_cast< atom * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_anglegrouping" "', argument " "5"" of type '" "atom *""'"); 
  }
  arg5 = reinterpret_cast< atom * >(argp5);
  result = (anglegrouping *)new anglegrouping(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_anglegrouping, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_anglegrouping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  anglegrouping *arg1 = (anglegrouping *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_anglegrouping",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_anglegrouping, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_anglegrouping" "', argument " "1"" of type '" "anglegrouping *""'"); 
  }
  arg1 = reinterpret_cast< anglegrouping * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *anglegrouping_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_anglegrouping, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_angletriples__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::vector< anglegrouping > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  angletriples *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_angletriples",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_anglegrouping_std__allocatorT_anglegrouping_t_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_angletriples" "', argument " "1"" of type '" "std::vector< anglegrouping >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_angletriples" "', argument " "1"" of type '" "std::vector< anglegrouping >""'");
    } else {
      std::vector< anglegrouping > * temp = reinterpret_cast< std::vector< anglegrouping > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (angletriples *)new angletriples(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_angletriples, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_angletriples__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  angletriples *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_angletriples")) SWIG_fail;
  result = (angletriples *)new angletriples();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_angletriples, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_angletriples(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_angletriples__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_anglegrouping_std__allocatorT_anglegrouping_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_angletriples__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_angletriples'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    angletriples::angletriples(std::vector< anglegrouping >)\n"
    "    angletriples::angletriples()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_angletriples_add__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  angletriples *arg1 = (angletriples *) 0 ;
  SwigValueWrapper< anglegrouping > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:angletriples_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_angletriples, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "angletriples_add" "', argument " "1"" of type '" "angletriples *""'"); 
  }
  arg1 = reinterpret_cast< angletriples * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_anglegrouping,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "angletriples_add" "', argument " "2"" of type '" "anglegrouping""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "angletriples_add" "', argument " "2"" of type '" "anglegrouping""'");
    } else {
      anglegrouping * temp = reinterpret_cast< anglegrouping * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->add(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_angletriples_add__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  angletriples *arg1 = (angletriples *) 0 ;
  flt arg2 ;
  flt arg3 ;
  atom *arg4 = (atom *) 0 ;
  atom *arg5 = (atom *) 0 ;
  atom *arg6 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:angletriples_add",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_angletriples, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "angletriples_add" "', argument " "1"" of type '" "angletriples *""'"); 
  }
  arg1 = reinterpret_cast< angletriples * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "angletriples_add" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "angletriples_add" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "angletriples_add" "', argument " "4"" of type '" "atom *""'"); 
  }
  arg4 = reinterpret_cast< atom * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "angletriples_add" "', argument " "5"" of type '" "atom *""'"); 
  }
  arg5 = reinterpret_cast< atom * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "angletriples_add" "', argument " "6"" of type '" "atom *""'"); 
  }
  arg6 = reinterpret_cast< atom * >(argp6);
  (arg1)->add(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_angletriples_add(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_angletriples, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_anglegrouping, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_angletriples_add__SWIG_0(self, args);
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_angletriples, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_atom, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_atom, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_atom, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_angletriples_add__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'angletriples_add'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    angletriples::add(anglegrouping)\n"
    "    angletriples::add(flt,flt,atom *,atom *,atom *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_angletriples_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  angletriples *arg1 = (angletriples *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:angletriples_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_angletriples, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "angletriples_energy" "', argument " "1"" of type '" "angletriples *""'"); 
  }
  arg1 = reinterpret_cast< angletriples * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "angletriples_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_angletriples_pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  angletriples *arg1 = (angletriples *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:angletriples_pressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_angletriples, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "angletriples_pressure" "', argument " "1"" of type '" "angletriples *""'"); 
  }
  arg1 = reinterpret_cast< angletriples * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "angletriples_pressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->pressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_angletriples_setForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  angletriples *arg1 = (angletriples *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:angletriples_setForces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_angletriples, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "angletriples_setForces" "', argument " "1"" of type '" "angletriples *""'"); 
  }
  arg1 = reinterpret_cast< angletriples * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "angletriples_setForces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->setForces(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_angletriples_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  angletriples *arg1 = (angletriples *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:angletriples_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_angletriples, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "angletriples_size" "', argument " "1"" of type '" "angletriples const *""'"); 
  }
  arg1 = reinterpret_cast< angletriples * >(argp1);
  result = (uint)((angletriples const *)arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_angletriples_mean_dists(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  angletriples *arg1 = (angletriples *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:angletriples_mean_dists",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_angletriples, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "angletriples_mean_dists" "', argument " "1"" of type '" "angletriples const *""'"); 
  }
  arg1 = reinterpret_cast< angletriples * >(argp1);
  result = (flt)((angletriples const *)arg1)->mean_dists();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_angletriples_std_dists(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  angletriples *arg1 = (angletriples *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:angletriples_std_dists",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_angletriples, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "angletriples_std_dists" "', argument " "1"" of type '" "angletriples const *""'"); 
  }
  arg1 = reinterpret_cast< angletriples * >(argp1);
  result = (flt)((angletriples const *)arg1)->std_dists();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_angletriples(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  angletriples *arg1 = (angletriples *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_angletriples",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_angletriples, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_angletriples" "', argument " "1"" of type '" "angletriples *""'"); 
  }
  arg1 = reinterpret_cast< angletriples * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *angletriples_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_angletriples, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_forcepair_a1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  forcepair *arg1 = (forcepair *) 0 ;
  atom *arg2 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:forcepair_a1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_forcepair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "forcepair_a1_set" "', argument " "1"" of type '" "forcepair *""'"); 
  }
  arg1 = reinterpret_cast< forcepair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "forcepair_a1_set" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  if (arg1) (arg1)->a1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_forcepair_a1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  forcepair *arg1 = (forcepair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:forcepair_a1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_forcepair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "forcepair_a1_get" "', argument " "1"" of type '" "forcepair *""'"); 
  }
  arg1 = reinterpret_cast< forcepair * >(argp1);
  result = (atom *) ((arg1)->a1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_forcepair_a2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  forcepair *arg1 = (forcepair *) 0 ;
  atom *arg2 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:forcepair_a2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_forcepair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "forcepair_a2_set" "', argument " "1"" of type '" "forcepair *""'"); 
  }
  arg1 = reinterpret_cast< forcepair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "forcepair_a2_set" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  if (arg1) (arg1)->a2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_forcepair_a2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  forcepair *arg1 = (forcepair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:forcepair_a2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_forcepair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "forcepair_a2_get" "', argument " "1"" of type '" "forcepair *""'"); 
  }
  arg1 = reinterpret_cast< forcepair * >(argp1);
  result = (atom *) ((arg1)->a2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_forcepair_fij_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  forcepair *arg1 = (forcepair *) 0 ;
  Vec *arg2 = (Vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:forcepair_fij_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_forcepair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "forcepair_fij_set" "', argument " "1"" of type '" "forcepair *""'"); 
  }
  arg1 = reinterpret_cast< forcepair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "forcepair_fij_set" "', argument " "2"" of type '" "Vec *""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  if (arg1) (arg1)->fij = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_forcepair_fij_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  forcepair *arg1 = (forcepair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:forcepair_fij_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_forcepair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "forcepair_fij_get" "', argument " "1"" of type '" "forcepair *""'"); 
  }
  arg1 = reinterpret_cast< forcepair * >(argp1);
  result = (Vec *)& ((arg1)->fij);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_forcepair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  forcepair *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_forcepair")) SWIG_fail;
  result = (forcepair *)new forcepair();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_forcepair, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_forcepair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  forcepair *arg1 = (forcepair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_forcepair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_forcepair, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_forcepair" "', argument " "1"" of type '" "forcepair *""'"); 
  }
  arg1 = reinterpret_cast< forcepair * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *forcepair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_forcepair, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_forcepairx_a1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  forcepairx *arg1 = (forcepairx *) 0 ;
  atom *arg2 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:forcepairx_a1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_forcepairx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "forcepairx_a1_set" "', argument " "1"" of type '" "forcepairx *""'"); 
  }
  arg1 = reinterpret_cast< forcepairx * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "forcepairx_a1_set" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  if (arg1) (arg1)->a1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_forcepairx_a1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  forcepairx *arg1 = (forcepairx *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:forcepairx_a1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_forcepairx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "forcepairx_a1_get" "', argument " "1"" of type '" "forcepairx *""'"); 
  }
  arg1 = reinterpret_cast< forcepairx * >(argp1);
  result = (atom *) ((arg1)->a1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_forcepairx_a2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  forcepairx *arg1 = (forcepairx *) 0 ;
  atom *arg2 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:forcepairx_a2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_forcepairx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "forcepairx_a2_set" "', argument " "1"" of type '" "forcepairx *""'"); 
  }
  arg1 = reinterpret_cast< forcepairx * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "forcepairx_a2_set" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  if (arg1) (arg1)->a2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_forcepairx_a2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  forcepairx *arg1 = (forcepairx *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:forcepairx_a2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_forcepairx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "forcepairx_a2_get" "', argument " "1"" of type '" "forcepairx *""'"); 
  }
  arg1 = reinterpret_cast< forcepairx * >(argp1);
  result = (atom *) ((arg1)->a2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_forcepairx_xij_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  forcepairx *arg1 = (forcepairx *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:forcepairx_xij_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_forcepairx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "forcepairx_xij_set" "', argument " "1"" of type '" "forcepairx *""'"); 
  }
  arg1 = reinterpret_cast< forcepairx * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "forcepairx_xij_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->xij = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_forcepairx_xij_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  forcepairx *arg1 = (forcepairx *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:forcepairx_xij_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_forcepairx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "forcepairx_xij_get" "', argument " "1"" of type '" "forcepairx *""'"); 
  }
  arg1 = reinterpret_cast< forcepairx * >(argp1);
  result = (flt) ((arg1)->xij);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_forcepairx_fij_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  forcepairx *arg1 = (forcepairx *) 0 ;
  Vec *arg2 = (Vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:forcepairx_fij_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_forcepairx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "forcepairx_fij_set" "', argument " "1"" of type '" "forcepairx *""'"); 
  }
  arg1 = reinterpret_cast< forcepairx * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "forcepairx_fij_set" "', argument " "2"" of type '" "Vec *""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  if (arg1) (arg1)->fij = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_forcepairx_fij_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  forcepairx *arg1 = (forcepairx *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:forcepairx_fij_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_forcepairx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "forcepairx_fij_get" "', argument " "1"" of type '" "forcepairx *""'"); 
  }
  arg1 = reinterpret_cast< forcepairx * >(argp1);
  result = (Vec *)& ((arg1)->fij);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_forcepairx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  forcepairx *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_forcepairx")) SWIG_fail;
  result = (forcepairx *)new forcepairx();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_forcepairx, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_forcepairx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  forcepairx *arg1 = (forcepairx *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_forcepairx",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_forcepairx, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_forcepairx" "', argument " "1"" of type '" "forcepairx *""'"); 
  }
  arg1 = reinterpret_cast< forcepairx * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *forcepairx_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_forcepairx, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_fpairxFunct_run(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fpairxFunct *arg1 = (fpairxFunct *) 0 ;
  forcepairx *arg2 = (forcepairx *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fpairxFunct_run",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fpairxFunct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fpairxFunct_run" "', argument " "1"" of type '" "fpairxFunct *""'"); 
  }
  arg1 = reinterpret_cast< fpairxFunct * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_forcepairx, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fpairxFunct_run" "', argument " "2"" of type '" "forcepairx *""'"); 
  }
  arg2 = reinterpret_cast< forcepairx * >(argp2);
  (arg1)->run(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_fpairxFunct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fpairxFunct *arg1 = (fpairxFunct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_fpairxFunct",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fpairxFunct, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_fpairxFunct" "', argument " "1"" of type '" "fpairxFunct *""'"); 
  }
  arg1 = reinterpret_cast< fpairxFunct * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *fpairxFunct_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fpairxFunct, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_interactionpairsx_setForces__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  interactionpairsx *arg1 = (interactionpairsx *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:interactionpairsx_setForces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_interactionpairsx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interactionpairsx_setForces" "', argument " "1"" of type '" "interactionpairsx *""'"); 
  }
  arg1 = reinterpret_cast< interactionpairsx * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "interactionpairsx_setForces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->setForces(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_interactionpairsx_setForces__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  interactionpairsx *arg1 = (interactionpairsx *) 0 ;
  Box *arg2 = (Box *) 0 ;
  fpairxFunct *arg3 = (fpairxFunct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:interactionpairsx_setForces",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_interactionpairsx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interactionpairsx_setForces" "', argument " "1"" of type '" "interactionpairsx *""'"); 
  }
  arg1 = reinterpret_cast< interactionpairsx * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "interactionpairsx_setForces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_fpairxFunct, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "interactionpairsx_setForces" "', argument " "3"" of type '" "fpairxFunct *""'"); 
  }
  arg3 = reinterpret_cast< fpairxFunct * >(argp3);
  (arg1)->setForces(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_interactionpairsx_setForces(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_interactionpairsx, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_interactionpairsx_setForces__SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_interactionpairsx, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_fpairxFunct, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_interactionpairsx_setForces__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'interactionpairsx_setForces'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setForces(Box *)\n"
    "    interactionpairsx::setForces(Box *,fpairxFunct *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_interactionpairsx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  interactionpairsx *arg1 = (interactionpairsx *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_interactionpairsx",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_interactionpairsx, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_interactionpairsx" "', argument " "1"" of type '" "interactionpairsx *""'"); 
  }
  arg1 = reinterpret_cast< interactionpairsx * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *interactionpairsx_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_interactionpairsx, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_atompaircomp___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atompaircomp *arg1 = (atompaircomp *) 0 ;
  atompair *arg2 = 0 ;
  atompair *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:atompaircomp___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atompaircomp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atompaircomp___call__" "', argument " "1"" of type '" "atompaircomp const *""'"); 
  }
  arg1 = reinterpret_cast< atompaircomp * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_atompair,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atompaircomp___call__" "', argument " "2"" of type '" "atompair const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "atompaircomp___call__" "', argument " "2"" of type '" "atompair const &""'"); 
  }
  arg2 = reinterpret_cast< atompair * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_atompair,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "atompaircomp___call__" "', argument " "3"" of type '" "atompair const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "atompaircomp___call__" "', argument " "3"" of type '" "atompair const &""'"); 
  }
  arg3 = reinterpret_cast< atompair * >(argp3);
  result = (bool)((atompaircomp const *)arg1)->operator ()((atompair const &)*arg2,(atompair const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_atompaircomp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atompaircomp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_atompaircomp")) SWIG_fail;
  result = (atompaircomp *)new atompaircomp();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atompaircomp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_atompaircomp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atompaircomp *arg1 = (atompaircomp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_atompaircomp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atompaircomp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_atompaircomp" "', argument " "1"" of type '" "atompaircomp *""'"); 
  }
  arg1 = reinterpret_cast< atompaircomp * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *atompaircomp_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_atompaircomp, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_pairlist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pairlist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_pairlist")) SWIG_fail;
  result = (pairlist *)new pairlist();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pairlist, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pairlist_ensure__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pairlist *arg1 = (pairlist *) 0 ;
  atomid arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pairlist_ensure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pairlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pairlist_ensure" "', argument " "1"" of type '" "pairlist *""'"); 
  }
  arg1 = reinterpret_cast< pairlist * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pairlist_ensure" "', argument " "2"" of type '" "atomid const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pairlist_ensure" "', argument " "2"" of type '" "atomid const""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->ensure(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pairlist_ensure__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pairlist *arg1 = (pairlist *) 0 ;
  SwigValueWrapper< std::vector< atomid > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pairlist_ensure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pairlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pairlist_ensure" "', argument " "1"" of type '" "pairlist *""'"); 
  }
  arg1 = reinterpret_cast< pairlist * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_atomid_std__allocatorT_atomid_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pairlist_ensure" "', argument " "2"" of type '" "std::vector< atomid >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pairlist_ensure" "', argument " "2"" of type '" "std::vector< atomid >""'");
    } else {
      std::vector< atomid > * temp = reinterpret_cast< std::vector< atomid > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->ensure(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pairlist_ensure__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pairlist *arg1 = (pairlist *) 0 ;
  atomgroup *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pairlist_ensure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pairlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pairlist_ensure" "', argument " "1"" of type '" "pairlist *""'"); 
  }
  arg1 = reinterpret_cast< pairlist * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_atomgroup,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pairlist_ensure" "', argument " "2"" of type '" "atomgroup &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pairlist_ensure" "', argument " "2"" of type '" "atomgroup &""'"); 
  }
  arg2 = reinterpret_cast< atomgroup * >(argp2);
  (arg1)->ensure(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pairlist_ensure(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pairlist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_atomid, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pairlist_ensure__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pairlist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_atomid_std__allocatorT_atomid_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pairlist_ensure__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pairlist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_atomgroup, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pairlist_ensure__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'pairlist_ensure'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pairlist::ensure(atomid const)\n"
    "    pairlist::ensure(std::vector< atomid >)\n"
    "    pairlist::ensure(atomgroup &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_pairlist_has_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pairlist *arg1 = (pairlist *) 0 ;
  atomid arg2 ;
  atomid arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:pairlist_has_pair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pairlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pairlist_has_pair" "', argument " "1"" of type '" "pairlist *""'"); 
  }
  arg1 = reinterpret_cast< pairlist * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pairlist_has_pair" "', argument " "2"" of type '" "atomid""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pairlist_has_pair" "', argument " "2"" of type '" "atomid""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "pairlist_has_pair" "', argument " "3"" of type '" "atomid""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pairlist_has_pair" "', argument " "3"" of type '" "atomid""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (bool)(arg1)->has_pair(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pairlist_add_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pairlist *arg1 = (pairlist *) 0 ;
  atomid arg2 ;
  atomid arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:pairlist_add_pair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pairlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pairlist_add_pair" "', argument " "1"" of type '" "pairlist *""'"); 
  }
  arg1 = reinterpret_cast< pairlist * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pairlist_add_pair" "', argument " "2"" of type '" "atomid""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pairlist_add_pair" "', argument " "2"" of type '" "atomid""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "pairlist_add_pair" "', argument " "3"" of type '" "atomid""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pairlist_add_pair" "', argument " "3"" of type '" "atomid""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->add_pair(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pairlist_erase_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pairlist *arg1 = (pairlist *) 0 ;
  atomid arg2 ;
  atomid arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:pairlist_erase_pair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pairlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pairlist_erase_pair" "', argument " "1"" of type '" "pairlist *""'"); 
  }
  arg1 = reinterpret_cast< pairlist * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pairlist_erase_pair" "', argument " "2"" of type '" "atomid""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pairlist_erase_pair" "', argument " "2"" of type '" "atomid""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "pairlist_erase_pair" "', argument " "3"" of type '" "atomid""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pairlist_erase_pair" "', argument " "3"" of type '" "atomid""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->erase_pair(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pairlist_get_pairs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pairlist *arg1 = (pairlist *) 0 ;
  atomid arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< set< atomid > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pairlist_get_pairs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pairlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pairlist_get_pairs" "', argument " "1"" of type '" "pairlist *""'"); 
  }
  arg1 = reinterpret_cast< pairlist * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pairlist_get_pairs" "', argument " "2"" of type '" "atomid const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pairlist_get_pairs" "', argument " "2"" of type '" "atomid const""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->get_pairs(arg2);
  resultobj = SWIG_NewPointerObj((new set< atomid >(static_cast< const set< atomid >& >(result))), SWIGTYPE_p_setT_atomid_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pairlist_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pairlist *arg1 = (pairlist *) 0 ;
  atomid arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< set< atomid >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pairlist_begin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pairlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pairlist_begin" "', argument " "1"" of type '" "pairlist *""'"); 
  }
  arg1 = reinterpret_cast< pairlist * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pairlist_begin" "', argument " "2"" of type '" "atomid const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pairlist_begin" "', argument " "2"" of type '" "atomid const""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->begin(arg2);
  resultobj = SWIG_NewPointerObj((new set< atomid >::iterator(static_cast< const set< atomid >::iterator& >(result))), SWIGTYPE_p_setT_atomid_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pairlist_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pairlist *arg1 = (pairlist *) 0 ;
  atomid arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< set< atomid >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pairlist_end",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pairlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pairlist_end" "', argument " "1"" of type '" "pairlist *""'"); 
  }
  arg1 = reinterpret_cast< pairlist * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pairlist_end" "', argument " "2"" of type '" "atomid const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pairlist_end" "', argument " "2"" of type '" "atomid const""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->end(arg2);
  resultobj = SWIG_NewPointerObj((new set< atomid >::iterator(static_cast< const set< atomid >::iterator& >(result))), SWIGTYPE_p_setT_atomid_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pairlist_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pairlist *arg1 = (pairlist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pairlist_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pairlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pairlist_size" "', argument " "1"" of type '" "pairlist const *""'"); 
  }
  arg1 = reinterpret_cast< pairlist * >(argp1);
  result = (uint)((pairlist const *)arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pairlist_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pairlist *arg1 = (pairlist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pairlist_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pairlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pairlist_clear" "', argument " "1"" of type '" "pairlist *""'"); 
  }
  arg1 = reinterpret_cast< pairlist * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_pairlist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pairlist *arg1 = (pairlist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_pairlist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pairlist, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pairlist" "', argument " "1"" of type '" "pairlist *""'"); 
  }
  arg1 = reinterpret_cast< pairlist * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *pairlist_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pairlist, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_neighborlist__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  flt arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  neighborlist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_neighborlist",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_neighborlist" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_neighborlist" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_neighborlist" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  result = (neighborlist *)new neighborlist(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_neighborlist, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_neighborlist__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  atomgroup *arg2 = 0 ;
  flt arg3 ;
  flt arg4 ;
  pairlist arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  neighborlist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_neighborlist",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_neighborlist" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_atomgroup,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_neighborlist" "', argument " "2"" of type '" "atomgroup &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_neighborlist" "', argument " "2"" of type '" "atomgroup &""'"); 
  }
  arg2 = reinterpret_cast< atomgroup * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_neighborlist" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_neighborlist" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_pairlist,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_neighborlist" "', argument " "5"" of type '" "pairlist""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_neighborlist" "', argument " "5"" of type '" "pairlist""'");
    } else {
      pairlist * temp = reinterpret_cast< pairlist * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = (neighborlist *)new neighborlist(arg1,*arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_neighborlist, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_neighborlist__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  atomgroup *arg2 = 0 ;
  flt arg3 ;
  flt arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  neighborlist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_neighborlist",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_neighborlist" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_atomgroup,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_neighborlist" "', argument " "2"" of type '" "atomgroup &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_neighborlist" "', argument " "2"" of type '" "atomgroup &""'"); 
  }
  arg2 = reinterpret_cast< atomgroup * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_neighborlist" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_neighborlist" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  result = (neighborlist *)new neighborlist(arg1,*arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_neighborlist, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_neighborlist(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_neighborlist__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_atomgroup, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_neighborlist__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_atomgroup, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_pairlist, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_neighborlist__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_neighborlist'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    neighborlist::neighborlist(Box *,flt const,flt const)\n"
    "    neighborlist::neighborlist(Box *,atomgroup &,flt const,flt const,pairlist)\n"
    "    neighborlist::neighborlist(Box *,atomgroup &,flt const,flt const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_neighborlist_update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:neighborlist_update",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "neighborlist_update" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "neighborlist_update" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->update(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_neighborlist_update_list__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:neighborlist_update_list",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "neighborlist_update_list" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "neighborlist_update_list" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->update_list(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_neighborlist_update_list__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:neighborlist_update_list",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "neighborlist_update_list" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  result = (bool)(arg1)->update_list();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_neighborlist_update_list(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_neighborlist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_neighborlist_update_list__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_neighborlist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_neighborlist_update_list__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'neighborlist_update_list'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    neighborlist::update_list(bool)\n"
    "    neighborlist::update_list()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_neighborlist_which(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:neighborlist_which",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "neighborlist_which" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  result = (uint)(arg1)->which();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_neighborlist_numpairs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:neighborlist_numpairs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "neighborlist_numpairs" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  result = (uint)(arg1)->numpairs();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_neighborlist_ignore__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  atomid arg2 ;
  atomid arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:neighborlist_ignore",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "neighborlist_ignore" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "neighborlist_ignore" "', argument " "2"" of type '" "atomid""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "neighborlist_ignore" "', argument " "2"" of type '" "atomid""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "neighborlist_ignore" "', argument " "3"" of type '" "atomid""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "neighborlist_ignore" "', argument " "3"" of type '" "atomid""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->ignore(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_neighborlist_ignore__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  atom *arg2 = (atom *) 0 ;
  atom *arg3 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:neighborlist_ignore",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "neighborlist_ignore" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "neighborlist_ignore" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "neighborlist_ignore" "', argument " "3"" of type '" "atom *""'"); 
  }
  arg3 = reinterpret_cast< atom * >(argp3);
  (arg1)->ignore(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_neighborlist_ignore(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_neighborlist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_atomid, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_atomid, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_neighborlist_ignore__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_neighborlist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_atom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_atom, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_neighborlist_ignore__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'neighborlist_ignore'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    neighborlist::ignore(atomid,atomid)\n"
    "    neighborlist::ignore(atom *,atom *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_neighborlist_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  atom *arg2 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  atomid result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:neighborlist_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "neighborlist_add" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "neighborlist_add" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  result = (arg1)->add(arg2);
  resultobj = SWIG_NewPointerObj((new atomid(static_cast< const atomid& >(result))), SWIGTYPE_p_atomid, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_neighborlist_changesize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  flt arg2 ;
  flt arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:neighborlist_changesize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "neighborlist_changesize" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "neighborlist_changesize" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "neighborlist_changesize" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  (arg1)->changesize(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_neighborlist_changesize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:neighborlist_changesize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "neighborlist_changesize" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "neighborlist_changesize" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  (arg1)->changesize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_neighborlist_changesize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_neighborlist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_neighborlist_changesize__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_neighborlist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_neighborlist_changesize__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'neighborlist_changesize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    neighborlist::changesize(flt,flt)\n"
    "    neighborlist::changesize(flt)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_neighborlist_ignore_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:neighborlist_ignore_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "neighborlist_ignore_size" "', argument " "1"" of type '" "neighborlist const *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  result = (uint)((neighborlist const *)arg1)->ignore_size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_neighborlist_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:neighborlist_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "neighborlist_size" "', argument " "1"" of type '" "neighborlist const *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  result = (uint)((neighborlist const *)arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_neighborlist_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< idpair,std::allocator< idpair > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:neighborlist_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "neighborlist_begin" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj((new std::vector< idpair,std::allocator< idpair > >::iterator(static_cast< const std::vector< idpair,std::allocator< idpair > >::iterator& >(result))), SWIGTYPE_p_std__vectorT_idpair_std__allocatorT_idpair_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_neighborlist_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< idpair,std::allocator< idpair > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:neighborlist_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "neighborlist_end" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj((new std::vector< idpair,std::allocator< idpair > >::iterator(static_cast< const std::vector< idpair,std::allocator< idpair > >::iterator& >(result))), SWIGTYPE_p_std__vectorT_idpair_std__allocatorT_idpair_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_neighborlist_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< idpair > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:neighborlist_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "neighborlist_get" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "neighborlist_get" "', argument " "2"" of type '" "uint""'");
  } 
  arg2 = static_cast< uint >(val2);
  result = (arg1)->get(arg2);
  resultobj = SWIG_NewPointerObj((new idpair(static_cast< const idpair& >(result))), SWIGTYPE_p_idpair, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_neighborlist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_neighborlist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_neighborlist" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_neighborlist___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< idpair > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:neighborlist___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "neighborlist___getitem__" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "neighborlist___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    assert(!myErr);
    result = neighborlist___getitem__(arg1,arg2);
    if (myErr) {
      myErr = 0; // clear flag for next time
      // You could also check the value in resultobj, but it's a PyObject here
      SWIG_exception(SWIG_IndexError, "Index out of bounds");
    }
  }
  resultobj = SWIG_NewPointerObj((new idpair(static_cast< const idpair& >(result))), SWIGTYPE_p_idpair, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *neighborlist_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_neighborlist, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Charged_q_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Charged *arg1 = (Charged *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Charged_q_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Charged, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Charged_q_set" "', argument " "1"" of type '" "Charged *""'"); 
  }
  arg1 = reinterpret_cast< Charged * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Charged_q_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->q = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Charged_q_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Charged *arg1 = (Charged *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Charged_q_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Charged, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Charged_q_get" "', argument " "1"" of type '" "Charged *""'"); 
  }
  arg1 = reinterpret_cast< Charged * >(argp1);
  result = (flt) ((arg1)->q);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Charged__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Charged *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Charged")) SWIG_fail;
  result = (Charged *)new Charged();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Charged, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Charged__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  atom *arg2 = (atom *) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Charged *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Charged",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Charged" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Charged" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  result = (Charged *)new Charged(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Charged, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Charged(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Charged__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_atom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Charged__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Charged'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Charged::Charged()\n"
    "    Charged::Charged(flt,atom *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Charged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Charged *arg1 = (Charged *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Charged",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Charged, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Charged" "', argument " "1"" of type '" "Charged *""'"); 
  }
  arg1 = reinterpret_cast< Charged * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Charged_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Charged, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ChargePair_q1q2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ChargePair *arg1 = (ChargePair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ChargePair_q1q2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ChargePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChargePair_q1q2_set" "', argument " "1"" of type '" "ChargePair *""'"); 
  }
  arg1 = reinterpret_cast< ChargePair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ChargePair_q1q2_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->q1q2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChargePair_q1q2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ChargePair *arg1 = (ChargePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ChargePair_q1q2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ChargePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChargePair_q1q2_get" "', argument " "1"" of type '" "ChargePair *""'"); 
  }
  arg1 = reinterpret_cast< ChargePair * >(argp1);
  result = (flt) ((arg1)->q1q2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChargePair_atom1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ChargePair *arg1 = (ChargePair *) 0 ;
  atomid *arg2 = (atomid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ChargePair_atom1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ChargePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChargePair_atom1_set" "', argument " "1"" of type '" "ChargePair *""'"); 
  }
  arg1 = reinterpret_cast< ChargePair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChargePair_atom1_set" "', argument " "2"" of type '" "atomid *""'"); 
  }
  arg2 = reinterpret_cast< atomid * >(argp2);
  if (arg1) (arg1)->atom1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChargePair_atom1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ChargePair *arg1 = (ChargePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ChargePair_atom1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ChargePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChargePair_atom1_get" "', argument " "1"" of type '" "ChargePair *""'"); 
  }
  arg1 = reinterpret_cast< ChargePair * >(argp1);
  result = (atomid *)& ((arg1)->atom1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChargePair_atom2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ChargePair *arg1 = (ChargePair *) 0 ;
  atomid *arg2 = (atomid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ChargePair_atom2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ChargePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChargePair_atom2_set" "', argument " "1"" of type '" "ChargePair *""'"); 
  }
  arg1 = reinterpret_cast< ChargePair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChargePair_atom2_set" "', argument " "2"" of type '" "atomid *""'"); 
  }
  arg2 = reinterpret_cast< atomid * >(argp2);
  if (arg1) (arg1)->atom2 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChargePair_atom2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ChargePair *arg1 = (ChargePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ChargePair_atom2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ChargePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChargePair_atom2_get" "', argument " "1"" of type '" "ChargePair *""'"); 
  }
  arg1 = reinterpret_cast< ChargePair * >(argp1);
  result = (atomid *)& ((arg1)->atom2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ChargePair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Charged arg1 ;
  Charged arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ChargePair *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ChargePair",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Charged,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ChargePair" "', argument " "1"" of type '" "Charged""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ChargePair" "', argument " "1"" of type '" "Charged""'");
    } else {
      Charged * temp = reinterpret_cast< Charged * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Charged,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ChargePair" "', argument " "2"" of type '" "Charged""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ChargePair" "', argument " "2"" of type '" "Charged""'");
    } else {
      Charged * temp = reinterpret_cast< Charged * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (ChargePair *)new ChargePair(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ChargePair, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ChargePair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ChargePair *arg1 = (ChargePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ChargePair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ChargePair, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ChargePair" "', argument " "1"" of type '" "ChargePair *""'"); 
  }
  arg1 = reinterpret_cast< ChargePair * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ChargePair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ChargePair, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LJatom_epsilon_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJatom *arg1 = (LJatom *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJatom_epsilon_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJatom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJatom_epsilon_set" "', argument " "1"" of type '" "LJatom *""'"); 
  }
  arg1 = reinterpret_cast< LJatom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJatom_epsilon_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->epsilon = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJatom_epsilon_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJatom *arg1 = (LJatom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJatom_epsilon_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJatom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJatom_epsilon_get" "', argument " "1"" of type '" "LJatom *""'"); 
  }
  arg1 = reinterpret_cast< LJatom * >(argp1);
  result = (flt) ((arg1)->epsilon);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJatom_sigma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJatom *arg1 = (LJatom *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJatom_sigma_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJatom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJatom_sigma_set" "', argument " "1"" of type '" "LJatom *""'"); 
  }
  arg1 = reinterpret_cast< LJatom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJatom_sigma_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->sigma = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJatom_sigma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJatom *arg1 = (LJatom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJatom_sigma_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJatom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJatom_sigma_get" "', argument " "1"" of type '" "LJatom *""'"); 
  }
  arg1 = reinterpret_cast< LJatom * >(argp1);
  result = (flt) ((arg1)->sigma);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJatom__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  flt arg2 ;
  atom *arg3 = (atom *) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  LJatom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_LJatom",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LJatom" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LJatom" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_LJatom" "', argument " "3"" of type '" "atom *""'"); 
  }
  arg3 = reinterpret_cast< atom * >(argp3);
  result = (LJatom *)new LJatom(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJatom, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJatom__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomid arg1 ;
  SwigValueWrapper< LJatom > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  LJatom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LJatom",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LJatom" "', argument " "1"" of type '" "atomid""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJatom" "', argument " "1"" of type '" "atomid""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJatom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LJatom" "', argument " "2"" of type '" "LJatom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJatom" "', argument " "2"" of type '" "LJatom""'");
    } else {
      LJatom * temp = reinterpret_cast< LJatom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (LJatom *)new LJatom(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJatom, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJatom(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_atomid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_LJatom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LJatom__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_atom, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_LJatom__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LJatom'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LJatom::LJatom(flt,flt,atom *)\n"
    "    LJatom::LJatom(atomid,LJatom)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_LJatom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJatom *arg1 = (LJatom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJatom",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJatom, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJatom" "', argument " "1"" of type '" "LJatom *""'"); 
  }
  arg1 = reinterpret_cast< LJatom * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJatom_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LJatom, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LJpair_epsilon_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJpair *arg1 = (LJpair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJpair_epsilon_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJpair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJpair_epsilon_set" "', argument " "1"" of type '" "LJpair *""'"); 
  }
  arg1 = reinterpret_cast< LJpair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJpair_epsilon_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->epsilon = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJpair_epsilon_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJpair *arg1 = (LJpair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJpair_epsilon_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJpair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJpair_epsilon_get" "', argument " "1"" of type '" "LJpair *""'"); 
  }
  arg1 = reinterpret_cast< LJpair * >(argp1);
  result = (flt) ((arg1)->epsilon);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJpair_sigma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJpair *arg1 = (LJpair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJpair_sigma_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJpair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJpair_sigma_set" "', argument " "1"" of type '" "LJpair *""'"); 
  }
  arg1 = reinterpret_cast< LJpair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJpair_sigma_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->sigma = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJpair_sigma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJpair *arg1 = (LJpair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJpair_sigma_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJpair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJpair_sigma_get" "', argument " "1"" of type '" "LJpair *""'"); 
  }
  arg1 = reinterpret_cast< LJpair * >(argp1);
  result = (flt) ((arg1)->sigma);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJpair_atom1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJpair *arg1 = (LJpair *) 0 ;
  atomid *arg2 = (atomid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJpair_atom1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJpair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJpair_atom1_set" "', argument " "1"" of type '" "LJpair *""'"); 
  }
  arg1 = reinterpret_cast< LJpair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJpair_atom1_set" "', argument " "2"" of type '" "atomid *""'"); 
  }
  arg2 = reinterpret_cast< atomid * >(argp2);
  if (arg1) (arg1)->atom1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJpair_atom1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJpair *arg1 = (LJpair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJpair_atom1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJpair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJpair_atom1_get" "', argument " "1"" of type '" "LJpair *""'"); 
  }
  arg1 = reinterpret_cast< LJpair * >(argp1);
  result = (atomid *)& ((arg1)->atom1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJpair_atom2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJpair *arg1 = (LJpair *) 0 ;
  atomid *arg2 = (atomid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJpair_atom2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJpair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJpair_atom2_set" "', argument " "1"" of type '" "LJpair *""'"); 
  }
  arg1 = reinterpret_cast< LJpair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJpair_atom2_set" "', argument " "2"" of type '" "atomid *""'"); 
  }
  arg2 = reinterpret_cast< atomid * >(argp2);
  if (arg1) (arg1)->atom2 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJpair_atom2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJpair *arg1 = (LJpair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJpair_atom2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJpair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJpair_atom2_get" "', argument " "1"" of type '" "LJpair *""'"); 
  }
  arg1 = reinterpret_cast< LJpair * >(argp1);
  result = (atomid *)& ((arg1)->atom2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJpair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< LJatom > arg1 ;
  SwigValueWrapper< LJatom > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  LJpair *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LJpair",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_LJatom,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LJpair" "', argument " "1"" of type '" "LJatom""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJpair" "', argument " "1"" of type '" "LJatom""'");
    } else {
      LJatom * temp = reinterpret_cast< LJatom * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJatom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LJpair" "', argument " "2"" of type '" "LJatom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJpair" "', argument " "2"" of type '" "LJatom""'");
    } else {
      LJatom * temp = reinterpret_cast< LJatom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (LJpair *)new LJpair(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJpair, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJpair_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJpair *arg1 = (LJpair *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJpair_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJpair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJpair_energy" "', argument " "1"" of type '" "LJpair *""'"); 
  }
  arg1 = reinterpret_cast< LJpair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJpair_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJpair_forces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJpair *arg1 = (LJpair *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJpair_forces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJpair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJpair_forces" "', argument " "1"" of type '" "LJpair *""'"); 
  }
  arg1 = reinterpret_cast< LJpair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJpair_forces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (arg1)->forces(arg2);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LJpair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJpair *arg1 = (LJpair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJpair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJpair, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJpair" "', argument " "1"" of type '" "LJpair *""'"); 
  }
  arg1 = reinterpret_cast< LJpair * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJpair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LJpair, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LJatomcut_sigcut_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJatomcut *arg1 = (LJatomcut *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJatomcut_sigcut_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJatomcut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJatomcut_sigcut_set" "', argument " "1"" of type '" "LJatomcut *""'"); 
  }
  arg1 = reinterpret_cast< LJatomcut * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJatomcut_sigcut_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->sigcut = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJatomcut_sigcut_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJatomcut *arg1 = (LJatomcut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJatomcut_sigcut_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJatomcut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJatomcut_sigcut_get" "', argument " "1"" of type '" "LJatomcut *""'"); 
  }
  arg1 = reinterpret_cast< LJatomcut * >(argp1);
  result = (flt) ((arg1)->sigcut);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJatomcut__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  flt arg2 ;
  atom *arg3 = (atom *) 0 ;
  flt arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  LJatomcut *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_LJatomcut",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LJatomcut" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LJatomcut" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_LJatomcut" "', argument " "3"" of type '" "atom *""'"); 
  }
  arg3 = reinterpret_cast< atom * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_LJatomcut" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  result = (LJatomcut *)new LJatomcut(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJatomcut, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJatomcut__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomid arg1 ;
  SwigValueWrapper< LJatomcut > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  LJatomcut *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LJatomcut",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LJatomcut" "', argument " "1"" of type '" "atomid""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJatomcut" "', argument " "1"" of type '" "atomid""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJatomcut,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LJatomcut" "', argument " "2"" of type '" "LJatomcut""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJatomcut" "', argument " "2"" of type '" "LJatomcut""'");
    } else {
      LJatomcut * temp = reinterpret_cast< LJatomcut * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (LJatomcut *)new LJatomcut(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJatomcut, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJatomcut(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_atomid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_LJatomcut, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LJatomcut__SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_atom, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_LJatomcut__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LJatomcut'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LJatomcut::LJatomcut(flt,flt,atom *,flt)\n"
    "    LJatomcut::LJatomcut(atomid,LJatomcut)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_LJatomcut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJatomcut *arg1 = (LJatomcut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJatomcut",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJatomcut, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJatomcut" "', argument " "1"" of type '" "LJatomcut *""'"); 
  }
  arg1 = reinterpret_cast< LJatomcut * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJatomcut_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LJatomcut, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LJAttractPair_inter_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractPair *arg1 = (LJAttractPair *) 0 ;
  LJattractCut *arg2 = (LJattractCut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractPair_inter_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractPair_inter_set" "', argument " "1"" of type '" "LJAttractPair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_LJattractCut, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractPair_inter_set" "', argument " "2"" of type '" "LJattractCut *""'"); 
  }
  arg2 = reinterpret_cast< LJattractCut * >(argp2);
  if (arg1) (arg1)->inter = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractPair_inter_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractPair *arg1 = (LJAttractPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  LJattractCut *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractPair_inter_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractPair_inter_get" "', argument " "1"" of type '" "LJAttractPair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractPair * >(argp1);
  result = (LJattractCut *)& ((arg1)->inter);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJattractCut, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractPair_atom1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractPair *arg1 = (LJAttractPair *) 0 ;
  atomid *arg2 = (atomid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractPair_atom1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractPair_atom1_set" "', argument " "1"" of type '" "LJAttractPair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractPair_atom1_set" "', argument " "2"" of type '" "atomid *""'"); 
  }
  arg2 = reinterpret_cast< atomid * >(argp2);
  if (arg1) (arg1)->atom1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractPair_atom1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractPair *arg1 = (LJAttractPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractPair_atom1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractPair_atom1_get" "', argument " "1"" of type '" "LJAttractPair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractPair * >(argp1);
  result = (atomid *)& ((arg1)->atom1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractPair_atom2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractPair *arg1 = (LJAttractPair *) 0 ;
  atomid *arg2 = (atomid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractPair_atom2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractPair_atom2_set" "', argument " "1"" of type '" "LJAttractPair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractPair_atom2_set" "', argument " "2"" of type '" "atomid *""'"); 
  }
  arg2 = reinterpret_cast< atomid * >(argp2);
  if (arg1) (arg1)->atom2 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractPair_atom2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractPair *arg1 = (LJAttractPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractPair_atom2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractPair_atom2_get" "', argument " "1"" of type '" "LJAttractPair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractPair * >(argp1);
  result = (atomid *)& ((arg1)->atom2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJAttractPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< LJatomcut > arg1 ;
  SwigValueWrapper< LJatomcut > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  LJAttractPair *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LJAttractPair",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_LJatomcut,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LJAttractPair" "', argument " "1"" of type '" "LJatomcut""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJAttractPair" "', argument " "1"" of type '" "LJatomcut""'");
    } else {
      LJatomcut * temp = reinterpret_cast< LJatomcut * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJatomcut,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LJAttractPair" "', argument " "2"" of type '" "LJatomcut""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJAttractPair" "', argument " "2"" of type '" "LJatomcut""'");
    } else {
      LJatomcut * temp = reinterpret_cast< LJatomcut * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (LJAttractPair *)new LJAttractPair(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJAttractPair, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractPair_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractPair *arg1 = (LJAttractPair *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractPair_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractPair_energy" "', argument " "1"" of type '" "LJAttractPair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractPair_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractPair_forces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractPair *arg1 = (LJAttractPair *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractPair_forces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractPair_forces" "', argument " "1"" of type '" "LJAttractPair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractPair_forces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (arg1)->forces(arg2);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LJAttractPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractPair *arg1 = (LJAttractPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJAttractPair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractPair, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJAttractPair" "', argument " "1"" of type '" "LJAttractPair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractPair * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJAttractPair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LJAttractPair, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_HydroAtom_epsilons_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HydroAtom *arg1 = (HydroAtom *) 0 ;
  std::vector< flt > *arg2 = (std::vector< flt > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HydroAtom_epsilons_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HydroAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HydroAtom_epsilons_set" "', argument " "1"" of type '" "HydroAtom *""'"); 
  }
  arg1 = reinterpret_cast< HydroAtom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HydroAtom_epsilons_set" "', argument " "2"" of type '" "std::vector< flt > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< flt > * >(argp2);
  if (arg1) (arg1)->epsilons = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HydroAtom_epsilons_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HydroAtom *arg1 = (HydroAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< flt > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HydroAtom_epsilons_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HydroAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HydroAtom_epsilons_get" "', argument " "1"" of type '" "HydroAtom *""'"); 
  }
  arg1 = reinterpret_cast< HydroAtom * >(argp1);
  result = (std::vector< flt > *)& ((arg1)->epsilons);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HydroAtom_indx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HydroAtom *arg1 = (HydroAtom *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HydroAtom_indx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HydroAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HydroAtom_indx_set" "', argument " "1"" of type '" "HydroAtom *""'"); 
  }
  arg1 = reinterpret_cast< HydroAtom * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HydroAtom_indx_set" "', argument " "2"" of type '" "uint""'");
  } 
  arg2 = static_cast< uint >(val2);
  if (arg1) (arg1)->indx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HydroAtom_indx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HydroAtom *arg1 = (HydroAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HydroAtom_indx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HydroAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HydroAtom_indx_get" "', argument " "1"" of type '" "HydroAtom *""'"); 
  }
  arg1 = reinterpret_cast< HydroAtom * >(argp1);
  result = (uint) ((arg1)->indx);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HydroAtom_sigma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HydroAtom *arg1 = (HydroAtom *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HydroAtom_sigma_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HydroAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HydroAtom_sigma_set" "', argument " "1"" of type '" "HydroAtom *""'"); 
  }
  arg1 = reinterpret_cast< HydroAtom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HydroAtom_sigma_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->sigma = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HydroAtom_sigma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HydroAtom *arg1 = (HydroAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HydroAtom_sigma_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HydroAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HydroAtom_sigma_get" "', argument " "1"" of type '" "HydroAtom *""'"); 
  }
  arg1 = reinterpret_cast< HydroAtom * >(argp1);
  result = (flt) ((arg1)->sigma);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HydroAtom_sigcut_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HydroAtom *arg1 = (HydroAtom *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HydroAtom_sigcut_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HydroAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HydroAtom_sigcut_set" "', argument " "1"" of type '" "HydroAtom *""'"); 
  }
  arg1 = reinterpret_cast< HydroAtom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HydroAtom_sigcut_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->sigcut = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HydroAtom_sigcut_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HydroAtom *arg1 = (HydroAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HydroAtom_sigcut_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HydroAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HydroAtom_sigcut_get" "', argument " "1"" of type '" "HydroAtom *""'"); 
  }
  arg1 = reinterpret_cast< HydroAtom * >(argp1);
  result = (flt) ((arg1)->sigcut);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HydroAtom__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< flt > arg1 ;
  uint arg2 ;
  flt arg3 ;
  atom *arg4 = (atom *) 0 ;
  flt arg5 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HydroAtom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_HydroAtom",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    int res = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HydroAtom" "', argument " "1"" of type '" "std::vector< flt >""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_HydroAtom" "', argument " "2"" of type '" "uint""'");
  } 
  arg2 = static_cast< uint >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_HydroAtom" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_HydroAtom" "', argument " "4"" of type '" "atom *""'"); 
  }
  arg4 = reinterpret_cast< atom * >(argp4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_HydroAtom" "', argument " "5"" of type '" "flt""'");
  } 
  arg5 = static_cast< flt >(val5);
  result = (HydroAtom *)new HydroAtom(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HydroAtom, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HydroAtom__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomid arg1 ;
  SwigValueWrapper< HydroAtom > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HydroAtom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_HydroAtom",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HydroAtom" "', argument " "1"" of type '" "atomid""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HydroAtom" "', argument " "1"" of type '" "atomid""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HydroAtom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HydroAtom" "', argument " "2"" of type '" "HydroAtom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HydroAtom" "', argument " "2"" of type '" "HydroAtom""'");
    } else {
      HydroAtom * temp = reinterpret_cast< HydroAtom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (HydroAtom *)new HydroAtom(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HydroAtom, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HydroAtom(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_atomid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_HydroAtom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_HydroAtom__SWIG_1(self, args);
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_atom, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_HydroAtom__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_HydroAtom'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    HydroAtom::HydroAtom(std::vector< flt >,uint,flt,atom *,flt)\n"
    "    HydroAtom::HydroAtom(atomid,HydroAtom)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HydroAtom_getEpsilon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HydroAtom *arg1 = (HydroAtom *) 0 ;
  HydroAtom *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HydroAtom_getEpsilon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HydroAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HydroAtom_getEpsilon" "', argument " "1"" of type '" "HydroAtom *""'"); 
  }
  arg1 = reinterpret_cast< HydroAtom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HydroAtom,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HydroAtom_getEpsilon" "', argument " "2"" of type '" "HydroAtom &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HydroAtom_getEpsilon" "', argument " "2"" of type '" "HydroAtom &""'"); 
  }
  arg2 = reinterpret_cast< HydroAtom * >(argp2);
  result = (flt)(arg1)->getEpsilon(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HydroAtom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HydroAtom *arg1 = (HydroAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_HydroAtom",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HydroAtom, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HydroAtom" "', argument " "1"" of type '" "HydroAtom *""'"); 
  }
  arg1 = reinterpret_cast< HydroAtom * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HydroAtom_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HydroAtom, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_HydroPair_inter_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HydroPair *arg1 = (HydroPair *) 0 ;
  LJattractCut *arg2 = (LJattractCut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HydroPair_inter_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HydroPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HydroPair_inter_set" "', argument " "1"" of type '" "HydroPair *""'"); 
  }
  arg1 = reinterpret_cast< HydroPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_LJattractCut, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HydroPair_inter_set" "', argument " "2"" of type '" "LJattractCut *""'"); 
  }
  arg2 = reinterpret_cast< LJattractCut * >(argp2);
  if (arg1) (arg1)->inter = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HydroPair_inter_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HydroPair *arg1 = (HydroPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  LJattractCut *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HydroPair_inter_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HydroPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HydroPair_inter_get" "', argument " "1"" of type '" "HydroPair *""'"); 
  }
  arg1 = reinterpret_cast< HydroPair * >(argp1);
  result = (LJattractCut *)& ((arg1)->inter);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJattractCut, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HydroPair_atom1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HydroPair *arg1 = (HydroPair *) 0 ;
  atomid *arg2 = (atomid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HydroPair_atom1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HydroPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HydroPair_atom1_set" "', argument " "1"" of type '" "HydroPair *""'"); 
  }
  arg1 = reinterpret_cast< HydroPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HydroPair_atom1_set" "', argument " "2"" of type '" "atomid *""'"); 
  }
  arg2 = reinterpret_cast< atomid * >(argp2);
  if (arg1) (arg1)->atom1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HydroPair_atom1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HydroPair *arg1 = (HydroPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HydroPair_atom1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HydroPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HydroPair_atom1_get" "', argument " "1"" of type '" "HydroPair *""'"); 
  }
  arg1 = reinterpret_cast< HydroPair * >(argp1);
  result = (atomid *)& ((arg1)->atom1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HydroPair_atom2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HydroPair *arg1 = (HydroPair *) 0 ;
  atomid *arg2 = (atomid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HydroPair_atom2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HydroPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HydroPair_atom2_set" "', argument " "1"" of type '" "HydroPair *""'"); 
  }
  arg1 = reinterpret_cast< HydroPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HydroPair_atom2_set" "', argument " "2"" of type '" "atomid *""'"); 
  }
  arg2 = reinterpret_cast< atomid * >(argp2);
  if (arg1) (arg1)->atom2 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HydroPair_atom2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HydroPair *arg1 = (HydroPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HydroPair_atom2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HydroPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HydroPair_atom2_get" "', argument " "1"" of type '" "HydroPair *""'"); 
  }
  arg1 = reinterpret_cast< HydroPair * >(argp1);
  result = (atomid *)& ((arg1)->atom2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HydroPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< HydroAtom > arg1 ;
  SwigValueWrapper< HydroAtom > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HydroPair *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_HydroPair",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HydroAtom,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HydroPair" "', argument " "1"" of type '" "HydroAtom""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HydroPair" "', argument " "1"" of type '" "HydroAtom""'");
    } else {
      HydroAtom * temp = reinterpret_cast< HydroAtom * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HydroAtom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HydroPair" "', argument " "2"" of type '" "HydroAtom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HydroPair" "', argument " "2"" of type '" "HydroAtom""'");
    } else {
      HydroAtom * temp = reinterpret_cast< HydroAtom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (HydroPair *)new HydroPair(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HydroPair, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HydroPair_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HydroPair *arg1 = (HydroPair *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HydroPair_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HydroPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HydroPair_energy" "', argument " "1"" of type '" "HydroPair *""'"); 
  }
  arg1 = reinterpret_cast< HydroPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HydroPair_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HydroPair_forces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HydroPair *arg1 = (HydroPair *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HydroPair_forces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HydroPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HydroPair_forces" "', argument " "1"" of type '" "HydroPair *""'"); 
  }
  arg1 = reinterpret_cast< HydroPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HydroPair_forces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (arg1)->forces(arg2);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HydroPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HydroPair *arg1 = (HydroPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_HydroPair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HydroPair, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HydroPair" "', argument " "1"" of type '" "HydroPair *""'"); 
  }
  arg1 = reinterpret_cast< HydroPair * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HydroPair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HydroPair, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LJAtomIndexed_epsilons_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAtomIndexed *arg1 = (LJAtomIndexed *) 0 ;
  std::vector< flt > *arg2 = (std::vector< flt > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAtomIndexed_epsilons_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAtomIndexed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAtomIndexed_epsilons_set" "', argument " "1"" of type '" "LJAtomIndexed *""'"); 
  }
  arg1 = reinterpret_cast< LJAtomIndexed * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAtomIndexed_epsilons_set" "', argument " "2"" of type '" "std::vector< flt > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< flt > * >(argp2);
  if (arg1) (arg1)->epsilons = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAtomIndexed_epsilons_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAtomIndexed *arg1 = (LJAtomIndexed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< flt > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAtomIndexed_epsilons_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAtomIndexed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAtomIndexed_epsilons_get" "', argument " "1"" of type '" "LJAtomIndexed *""'"); 
  }
  arg1 = reinterpret_cast< LJAtomIndexed * >(argp1);
  result = (std::vector< flt > *)& ((arg1)->epsilons);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAtomIndexed_sigmas_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAtomIndexed *arg1 = (LJAtomIndexed *) 0 ;
  std::vector< flt > *arg2 = (std::vector< flt > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAtomIndexed_sigmas_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAtomIndexed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAtomIndexed_sigmas_set" "', argument " "1"" of type '" "LJAtomIndexed *""'"); 
  }
  arg1 = reinterpret_cast< LJAtomIndexed * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAtomIndexed_sigmas_set" "', argument " "2"" of type '" "std::vector< flt > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< flt > * >(argp2);
  if (arg1) (arg1)->sigmas = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAtomIndexed_sigmas_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAtomIndexed *arg1 = (LJAtomIndexed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< flt > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAtomIndexed_sigmas_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAtomIndexed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAtomIndexed_sigmas_get" "', argument " "1"" of type '" "LJAtomIndexed *""'"); 
  }
  arg1 = reinterpret_cast< LJAtomIndexed * >(argp1);
  result = (std::vector< flt > *)& ((arg1)->sigmas);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAtomIndexed_indx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAtomIndexed *arg1 = (LJAtomIndexed *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAtomIndexed_indx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAtomIndexed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAtomIndexed_indx_set" "', argument " "1"" of type '" "LJAtomIndexed *""'"); 
  }
  arg1 = reinterpret_cast< LJAtomIndexed * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJAtomIndexed_indx_set" "', argument " "2"" of type '" "uint""'");
  } 
  arg2 = static_cast< uint >(val2);
  if (arg1) (arg1)->indx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAtomIndexed_indx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAtomIndexed *arg1 = (LJAtomIndexed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAtomIndexed_indx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAtomIndexed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAtomIndexed_indx_get" "', argument " "1"" of type '" "LJAtomIndexed *""'"); 
  }
  arg1 = reinterpret_cast< LJAtomIndexed * >(argp1);
  result = (uint) ((arg1)->indx);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAtomIndexed_sigcut_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAtomIndexed *arg1 = (LJAtomIndexed *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAtomIndexed_sigcut_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAtomIndexed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAtomIndexed_sigcut_set" "', argument " "1"" of type '" "LJAtomIndexed *""'"); 
  }
  arg1 = reinterpret_cast< LJAtomIndexed * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJAtomIndexed_sigcut_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->sigcut = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAtomIndexed_sigcut_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAtomIndexed *arg1 = (LJAtomIndexed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAtomIndexed_sigcut_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAtomIndexed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAtomIndexed_sigcut_get" "', argument " "1"" of type '" "LJAtomIndexed *""'"); 
  }
  arg1 = reinterpret_cast< LJAtomIndexed * >(argp1);
  result = (flt) ((arg1)->sigcut);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJAtomIndexed__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< flt > arg1 ;
  std::vector< flt > arg2 ;
  uint arg3 ;
  atom *arg4 = (atom *) 0 ;
  flt arg5 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  LJAtomIndexed *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_LJAtomIndexed",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    int res = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_LJAtomIndexed" "', argument " "1"" of type '" "std::vector< flt >""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_LJAtomIndexed" "', argument " "2"" of type '" "std::vector< flt >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LJAtomIndexed" "', argument " "3"" of type '" "uint""'");
  } 
  arg3 = static_cast< uint >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_LJAtomIndexed" "', argument " "4"" of type '" "atom *""'"); 
  }
  arg4 = reinterpret_cast< atom * >(argp4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_LJAtomIndexed" "', argument " "5"" of type '" "flt""'");
  } 
  arg5 = static_cast< flt >(val5);
  result = (LJAtomIndexed *)new LJAtomIndexed(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJAtomIndexed, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJAtomIndexed__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomid arg1 ;
  SwigValueWrapper< LJAtomIndexed > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  LJAtomIndexed *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LJAtomIndexed",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LJAtomIndexed" "', argument " "1"" of type '" "atomid""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJAtomIndexed" "', argument " "1"" of type '" "atomid""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJAtomIndexed,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LJAtomIndexed" "', argument " "2"" of type '" "LJAtomIndexed""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJAtomIndexed" "', argument " "2"" of type '" "LJAtomIndexed""'");
    } else {
      LJAtomIndexed * temp = reinterpret_cast< LJAtomIndexed * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (LJAtomIndexed *)new LJAtomIndexed(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJAtomIndexed, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJAtomIndexed(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_atomid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_LJAtomIndexed, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LJAtomIndexed__SWIG_1(self, args);
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_atom, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_LJAtomIndexed__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LJAtomIndexed'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LJAtomIndexed::LJAtomIndexed(std::vector< flt >,std::vector< flt >,uint,atom *,flt)\n"
    "    LJAtomIndexed::LJAtomIndexed(atomid,LJAtomIndexed)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LJAtomIndexed_getEpsilon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAtomIndexed *arg1 = (LJAtomIndexed *) 0 ;
  LJAtomIndexed *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAtomIndexed_getEpsilon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAtomIndexed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAtomIndexed_getEpsilon" "', argument " "1"" of type '" "LJAtomIndexed *""'"); 
  }
  arg1 = reinterpret_cast< LJAtomIndexed * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJAtomIndexed,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAtomIndexed_getEpsilon" "', argument " "2"" of type '" "LJAtomIndexed &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJAtomIndexed_getEpsilon" "', argument " "2"" of type '" "LJAtomIndexed &""'"); 
  }
  arg2 = reinterpret_cast< LJAtomIndexed * >(argp2);
  result = (flt)(arg1)->getEpsilon(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAtomIndexed_getSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAtomIndexed *arg1 = (LJAtomIndexed *) 0 ;
  LJAtomIndexed *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAtomIndexed_getSigma",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAtomIndexed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAtomIndexed_getSigma" "', argument " "1"" of type '" "LJAtomIndexed *""'"); 
  }
  arg1 = reinterpret_cast< LJAtomIndexed * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJAtomIndexed,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAtomIndexed_getSigma" "', argument " "2"" of type '" "LJAtomIndexed &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJAtomIndexed_getSigma" "', argument " "2"" of type '" "LJAtomIndexed &""'"); 
  }
  arg2 = reinterpret_cast< LJAtomIndexed * >(argp2);
  result = (flt)(arg1)->getSigma(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LJAtomIndexed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAtomIndexed *arg1 = (LJAtomIndexed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJAtomIndexed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAtomIndexed, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJAtomIndexed" "', argument " "1"" of type '" "LJAtomIndexed *""'"); 
  }
  arg1 = reinterpret_cast< LJAtomIndexed * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJAtomIndexed_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LJAtomIndexed, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LJFullPair_inter_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJFullPair *arg1 = (LJFullPair *) 0 ;
  LJattractCut *arg2 = (LJattractCut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJFullPair_inter_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJFullPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJFullPair_inter_set" "', argument " "1"" of type '" "LJFullPair *""'"); 
  }
  arg1 = reinterpret_cast< LJFullPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_LJattractCut, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJFullPair_inter_set" "', argument " "2"" of type '" "LJattractCut *""'"); 
  }
  arg2 = reinterpret_cast< LJattractCut * >(argp2);
  if (arg1) (arg1)->inter = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJFullPair_inter_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJFullPair *arg1 = (LJFullPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  LJattractCut *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJFullPair_inter_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJFullPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJFullPair_inter_get" "', argument " "1"" of type '" "LJFullPair *""'"); 
  }
  arg1 = reinterpret_cast< LJFullPair * >(argp1);
  result = (LJattractCut *)& ((arg1)->inter);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJattractCut, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJFullPair_atom1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJFullPair *arg1 = (LJFullPair *) 0 ;
  atomid *arg2 = (atomid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJFullPair_atom1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJFullPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJFullPair_atom1_set" "', argument " "1"" of type '" "LJFullPair *""'"); 
  }
  arg1 = reinterpret_cast< LJFullPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJFullPair_atom1_set" "', argument " "2"" of type '" "atomid *""'"); 
  }
  arg2 = reinterpret_cast< atomid * >(argp2);
  if (arg1) (arg1)->atom1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJFullPair_atom1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJFullPair *arg1 = (LJFullPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJFullPair_atom1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJFullPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJFullPair_atom1_get" "', argument " "1"" of type '" "LJFullPair *""'"); 
  }
  arg1 = reinterpret_cast< LJFullPair * >(argp1);
  result = (atomid *)& ((arg1)->atom1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJFullPair_atom2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJFullPair *arg1 = (LJFullPair *) 0 ;
  atomid *arg2 = (atomid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJFullPair_atom2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJFullPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJFullPair_atom2_set" "', argument " "1"" of type '" "LJFullPair *""'"); 
  }
  arg1 = reinterpret_cast< LJFullPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJFullPair_atom2_set" "', argument " "2"" of type '" "atomid *""'"); 
  }
  arg2 = reinterpret_cast< atomid * >(argp2);
  if (arg1) (arg1)->atom2 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJFullPair_atom2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJFullPair *arg1 = (LJFullPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJFullPair_atom2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJFullPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJFullPair_atom2_get" "', argument " "1"" of type '" "LJFullPair *""'"); 
  }
  arg1 = reinterpret_cast< LJFullPair * >(argp1);
  result = (atomid *)& ((arg1)->atom2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJFullPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< LJAtomIndexed > arg1 ;
  SwigValueWrapper< LJAtomIndexed > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  LJFullPair *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LJFullPair",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_LJAtomIndexed,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LJFullPair" "', argument " "1"" of type '" "LJAtomIndexed""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJFullPair" "', argument " "1"" of type '" "LJAtomIndexed""'");
    } else {
      LJAtomIndexed * temp = reinterpret_cast< LJAtomIndexed * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJAtomIndexed,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LJFullPair" "', argument " "2"" of type '" "LJAtomIndexed""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJFullPair" "', argument " "2"" of type '" "LJAtomIndexed""'");
    } else {
      LJAtomIndexed * temp = reinterpret_cast< LJAtomIndexed * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (LJFullPair *)new LJFullPair(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJFullPair, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJFullPair_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJFullPair *arg1 = (LJFullPair *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJFullPair_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJFullPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJFullPair_energy" "', argument " "1"" of type '" "LJFullPair *""'"); 
  }
  arg1 = reinterpret_cast< LJFullPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJFullPair_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJFullPair_forces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJFullPair *arg1 = (LJFullPair *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJFullPair_forces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJFullPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJFullPair_forces" "', argument " "1"" of type '" "LJFullPair *""'"); 
  }
  arg1 = reinterpret_cast< LJFullPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJFullPair_forces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (arg1)->forces(arg2);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LJFullPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJFullPair *arg1 = (LJFullPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJFullPair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJFullPair, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJFullPair" "', argument " "1"" of type '" "LJFullPair *""'"); 
  }
  arg1 = reinterpret_cast< LJFullPair * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJFullPair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LJFullPair, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LJishAtom_epsilons_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishAtom *arg1 = (LJishAtom *) 0 ;
  std::vector< flt > *arg2 = (std::vector< flt > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJishAtom_epsilons_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishAtom_epsilons_set" "', argument " "1"" of type '" "LJishAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJishAtom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJishAtom_epsilons_set" "', argument " "2"" of type '" "std::vector< flt > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< flt > * >(argp2);
  if (arg1) (arg1)->epsilons = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishAtom_epsilons_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishAtom *arg1 = (LJishAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< flt > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJishAtom_epsilons_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishAtom_epsilons_get" "', argument " "1"" of type '" "LJishAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJishAtom * >(argp1);
  result = (std::vector< flt > *)& ((arg1)->epsilons);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishAtom_repeps_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishAtom *arg1 = (LJishAtom *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJishAtom_repeps_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishAtom_repeps_set" "', argument " "1"" of type '" "LJishAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJishAtom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJishAtom_repeps_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->repeps = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishAtom_repeps_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishAtom *arg1 = (LJishAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJishAtom_repeps_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishAtom_repeps_get" "', argument " "1"" of type '" "LJishAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJishAtom * >(argp1);
  result = (flt) ((arg1)->repeps);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishAtom_sigma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishAtom *arg1 = (LJishAtom *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJishAtom_sigma_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishAtom_sigma_set" "', argument " "1"" of type '" "LJishAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJishAtom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJishAtom_sigma_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->sigma = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishAtom_sigma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishAtom *arg1 = (LJishAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJishAtom_sigma_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishAtom_sigma_get" "', argument " "1"" of type '" "LJishAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJishAtom * >(argp1);
  result = (flt) ((arg1)->sigma);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishAtom_exponent_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishAtom *arg1 = (LJishAtom *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJishAtom_exponent_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishAtom_exponent_set" "', argument " "1"" of type '" "LJishAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJishAtom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJishAtom_exponent_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->exponent = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishAtom_exponent_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishAtom *arg1 = (LJishAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJishAtom_exponent_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishAtom_exponent_get" "', argument " "1"" of type '" "LJishAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJishAtom * >(argp1);
  result = (flt) ((arg1)->exponent);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishAtom_indx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishAtom *arg1 = (LJishAtom *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJishAtom_indx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishAtom_indx_set" "', argument " "1"" of type '" "LJishAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJishAtom * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJishAtom_indx_set" "', argument " "2"" of type '" "uint""'");
  } 
  arg2 = static_cast< uint >(val2);
  if (arg1) (arg1)->indx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishAtom_indx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishAtom *arg1 = (LJishAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJishAtom_indx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishAtom_indx_get" "', argument " "1"" of type '" "LJishAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJishAtom * >(argp1);
  result = (uint) ((arg1)->indx);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishAtom_sigcut_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishAtom *arg1 = (LJishAtom *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJishAtom_sigcut_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishAtom_sigcut_set" "', argument " "1"" of type '" "LJishAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJishAtom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJishAtom_sigcut_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->sigcut = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishAtom_sigcut_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishAtom *arg1 = (LJishAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJishAtom_sigcut_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishAtom_sigcut_get" "', argument " "1"" of type '" "LJishAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJishAtom * >(argp1);
  result = (flt) ((arg1)->sigcut);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJishAtom__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  std::vector< flt > arg2 ;
  flt arg3 ;
  flt arg4 ;
  flt arg5 ;
  uint arg6 ;
  flt arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  LJishAtom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_LJishAtom",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LJishAtom" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_LJishAtom" "', argument " "2"" of type '" "std::vector< flt >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LJishAtom" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_LJishAtom" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_LJishAtom" "', argument " "5"" of type '" "flt""'");
  } 
  arg5 = static_cast< flt >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_LJishAtom" "', argument " "6"" of type '" "uint""'");
  } 
  arg6 = static_cast< uint >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_LJishAtom" "', argument " "7"" of type '" "flt""'");
  } 
  arg7 = static_cast< flt >(val7);
  result = (LJishAtom *)new LJishAtom(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJishAtom, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJishAtom__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomid arg1 ;
  SwigValueWrapper< LJishAtom > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  LJishAtom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LJishAtom",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LJishAtom" "', argument " "1"" of type '" "atomid""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJishAtom" "', argument " "1"" of type '" "atomid""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJishAtom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LJishAtom" "', argument " "2"" of type '" "LJishAtom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJishAtom" "', argument " "2"" of type '" "LJishAtom""'");
    } else {
      LJishAtom * temp = reinterpret_cast< LJishAtom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (LJishAtom *)new LJishAtom(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJishAtom, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJishAtom(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_atomid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_LJishAtom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LJishAtom__SWIG_1(self, args);
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_LJishAtom__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LJishAtom'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LJishAtom::LJishAtom(atom *,std::vector< flt >,flt,flt,flt,uint,flt)\n"
    "    LJishAtom::LJishAtom(atomid,LJishAtom)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LJishAtom_getEpsilon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishAtom *arg1 = (LJishAtom *) 0 ;
  LJishAtom *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJishAtom_getEpsilon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishAtom_getEpsilon" "', argument " "1"" of type '" "LJishAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJishAtom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJishAtom,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJishAtom_getEpsilon" "', argument " "2"" of type '" "LJishAtom &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJishAtom_getEpsilon" "', argument " "2"" of type '" "LJishAtom &""'"); 
  }
  arg2 = reinterpret_cast< LJishAtom * >(argp2);
  result = (flt)(arg1)->getEpsilon(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishAtom_getSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishAtom *arg1 = (LJishAtom *) 0 ;
  LJishAtom *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJishAtom_getSigma",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishAtom_getSigma" "', argument " "1"" of type '" "LJishAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJishAtom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJishAtom,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJishAtom_getSigma" "', argument " "2"" of type '" "LJishAtom &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJishAtom_getSigma" "', argument " "2"" of type '" "LJishAtom &""'"); 
  }
  arg2 = reinterpret_cast< LJishAtom * >(argp2);
  result = (flt)(arg1)->getSigma(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LJishAtom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishAtom *arg1 = (LJishAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJishAtom",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishAtom, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJishAtom" "', argument " "1"" of type '" "LJishAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJishAtom * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJishAtom_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LJishAtom, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LJishPair_epsilon_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishPair *arg1 = (LJishPair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJishPair_epsilon_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishPair_epsilon_set" "', argument " "1"" of type '" "LJishPair *""'"); 
  }
  arg1 = reinterpret_cast< LJishPair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJishPair_epsilon_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->epsilon = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishPair_epsilon_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishPair *arg1 = (LJishPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJishPair_epsilon_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishPair_epsilon_get" "', argument " "1"" of type '" "LJishPair *""'"); 
  }
  arg1 = reinterpret_cast< LJishPair * >(argp1);
  result = (flt) ((arg1)->epsilon);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishPair_repeps_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishPair *arg1 = (LJishPair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJishPair_repeps_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishPair_repeps_set" "', argument " "1"" of type '" "LJishPair *""'"); 
  }
  arg1 = reinterpret_cast< LJishPair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJishPair_repeps_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->repeps = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishPair_repeps_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishPair *arg1 = (LJishPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJishPair_repeps_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishPair_repeps_get" "', argument " "1"" of type '" "LJishPair *""'"); 
  }
  arg1 = reinterpret_cast< LJishPair * >(argp1);
  result = (flt) ((arg1)->repeps);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishPair_sigma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishPair *arg1 = (LJishPair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJishPair_sigma_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishPair_sigma_set" "', argument " "1"" of type '" "LJishPair *""'"); 
  }
  arg1 = reinterpret_cast< LJishPair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJishPair_sigma_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->sigma = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishPair_sigma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishPair *arg1 = (LJishPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJishPair_sigma_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishPair_sigma_get" "', argument " "1"" of type '" "LJishPair *""'"); 
  }
  arg1 = reinterpret_cast< LJishPair * >(argp1);
  result = (flt) ((arg1)->sigma);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishPair_n_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishPair *arg1 = (LJishPair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJishPair_n_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishPair_n_set" "', argument " "1"" of type '" "LJishPair *""'"); 
  }
  arg1 = reinterpret_cast< LJishPair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJishPair_n_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->n = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishPair_n_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishPair *arg1 = (LJishPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJishPair_n_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishPair_n_get" "', argument " "1"" of type '" "LJishPair *""'"); 
  }
  arg1 = reinterpret_cast< LJishPair * >(argp1);
  result = (flt) ((arg1)->n);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishPair_cutR_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishPair *arg1 = (LJishPair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJishPair_cutR_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishPair_cutR_set" "', argument " "1"" of type '" "LJishPair *""'"); 
  }
  arg1 = reinterpret_cast< LJishPair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJishPair_cutR_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->cutR = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishPair_cutR_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishPair *arg1 = (LJishPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJishPair_cutR_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishPair_cutR_get" "', argument " "1"" of type '" "LJishPair *""'"); 
  }
  arg1 = reinterpret_cast< LJishPair * >(argp1);
  result = (flt) ((arg1)->cutR);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishPair_cutE_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishPair *arg1 = (LJishPair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJishPair_cutE_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishPair_cutE_set" "', argument " "1"" of type '" "LJishPair *""'"); 
  }
  arg1 = reinterpret_cast< LJishPair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJishPair_cutE_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->cutE = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishPair_cutE_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishPair *arg1 = (LJishPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJishPair_cutE_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishPair_cutE_get" "', argument " "1"" of type '" "LJishPair *""'"); 
  }
  arg1 = reinterpret_cast< LJishPair * >(argp1);
  result = (flt) ((arg1)->cutE);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishPair_atom1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishPair *arg1 = (LJishPair *) 0 ;
  atomid *arg2 = (atomid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJishPair_atom1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishPair_atom1_set" "', argument " "1"" of type '" "LJishPair *""'"); 
  }
  arg1 = reinterpret_cast< LJishPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJishPair_atom1_set" "', argument " "2"" of type '" "atomid *""'"); 
  }
  arg2 = reinterpret_cast< atomid * >(argp2);
  if (arg1) (arg1)->atom1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishPair_atom1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishPair *arg1 = (LJishPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJishPair_atom1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishPair_atom1_get" "', argument " "1"" of type '" "LJishPair *""'"); 
  }
  arg1 = reinterpret_cast< LJishPair * >(argp1);
  result = (atomid *)& ((arg1)->atom1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishPair_atom2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishPair *arg1 = (LJishPair *) 0 ;
  atomid *arg2 = (atomid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJishPair_atom2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishPair_atom2_set" "', argument " "1"" of type '" "LJishPair *""'"); 
  }
  arg1 = reinterpret_cast< LJishPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJishPair_atom2_set" "', argument " "2"" of type '" "atomid *""'"); 
  }
  arg2 = reinterpret_cast< atomid * >(argp2);
  if (arg1) (arg1)->atom2 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishPair_atom2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishPair *arg1 = (LJishPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJishPair_atom2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishPair_atom2_get" "', argument " "1"" of type '" "LJishPair *""'"); 
  }
  arg1 = reinterpret_cast< LJishPair * >(argp1);
  result = (atomid *)& ((arg1)->atom2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJishPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< LJishAtom > arg1 ;
  SwigValueWrapper< LJishAtom > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  LJishPair *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LJishPair",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_LJishAtom,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LJishPair" "', argument " "1"" of type '" "LJishAtom""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJishPair" "', argument " "1"" of type '" "LJishAtom""'");
    } else {
      LJishAtom * temp = reinterpret_cast< LJishAtom * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJishAtom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LJishPair" "', argument " "2"" of type '" "LJishAtom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJishPair" "', argument " "2"" of type '" "LJishAtom""'");
    } else {
      LJishAtom * temp = reinterpret_cast< LJishAtom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (LJishPair *)new LJishPair(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJishPair, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishPair_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishPair *arg1 = (LJishPair *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJishPair_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishPair_energy" "', argument " "1"" of type '" "LJishPair *""'"); 
  }
  arg1 = reinterpret_cast< LJishPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJishPair_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJishPair_forces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishPair *arg1 = (LJishPair *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJishPair_forces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJishPair_forces" "', argument " "1"" of type '" "LJishPair *""'"); 
  }
  arg1 = reinterpret_cast< LJishPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJishPair_forces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (arg1)->forces(arg2);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LJishPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJishPair *arg1 = (LJishPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJishPair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJishPair, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJishPair" "', argument " "1"" of type '" "LJishPair *""'"); 
  }
  arg1 = reinterpret_cast< LJishPair * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJishPair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LJishPair, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LJAttractRepulseAtom_epsilons_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractRepulseAtom *arg1 = (LJAttractRepulseAtom *) 0 ;
  std::vector< flt > *arg2 = (std::vector< flt > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractRepulseAtom_epsilons_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractRepulseAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulseAtom_epsilons_set" "', argument " "1"" of type '" "LJAttractRepulseAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractRepulseAtom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractRepulseAtom_epsilons_set" "', argument " "2"" of type '" "std::vector< flt > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< flt > * >(argp2);
  if (arg1) (arg1)->epsilons = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulseAtom_epsilons_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractRepulseAtom *arg1 = (LJAttractRepulseAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< flt > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractRepulseAtom_epsilons_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractRepulseAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulseAtom_epsilons_get" "', argument " "1"" of type '" "LJAttractRepulseAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractRepulseAtom * >(argp1);
  result = (std::vector< flt > *)& ((arg1)->epsilons);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulseAtom_sig_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractRepulseAtom *arg1 = (LJAttractRepulseAtom *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractRepulseAtom_sig_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractRepulseAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulseAtom_sig_set" "', argument " "1"" of type '" "LJAttractRepulseAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractRepulseAtom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJAttractRepulseAtom_sig_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->sig = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulseAtom_sig_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractRepulseAtom *arg1 = (LJAttractRepulseAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractRepulseAtom_sig_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractRepulseAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulseAtom_sig_get" "', argument " "1"" of type '" "LJAttractRepulseAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractRepulseAtom * >(argp1);
  result = (flt) ((arg1)->sig);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulseAtom_indx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractRepulseAtom *arg1 = (LJAttractRepulseAtom *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractRepulseAtom_indx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractRepulseAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulseAtom_indx_set" "', argument " "1"" of type '" "LJAttractRepulseAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractRepulseAtom * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJAttractRepulseAtom_indx_set" "', argument " "2"" of type '" "uint""'");
  } 
  arg2 = static_cast< uint >(val2);
  if (arg1) (arg1)->indx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulseAtom_indx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractRepulseAtom *arg1 = (LJAttractRepulseAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractRepulseAtom_indx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractRepulseAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulseAtom_indx_get" "', argument " "1"" of type '" "LJAttractRepulseAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractRepulseAtom * >(argp1);
  result = (uint) ((arg1)->indx);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulseAtom_sigcut_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractRepulseAtom *arg1 = (LJAttractRepulseAtom *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractRepulseAtom_sigcut_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractRepulseAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulseAtom_sigcut_set" "', argument " "1"" of type '" "LJAttractRepulseAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractRepulseAtom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJAttractRepulseAtom_sigcut_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->sigcut = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulseAtom_sigcut_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractRepulseAtom *arg1 = (LJAttractRepulseAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractRepulseAtom_sigcut_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractRepulseAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulseAtom_sigcut_get" "', argument " "1"" of type '" "LJAttractRepulseAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractRepulseAtom * >(argp1);
  result = (flt) ((arg1)->sigcut);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJAttractRepulseAtom__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  std::vector< flt > arg2 ;
  flt arg3 ;
  uint arg4 ;
  flt arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  LJAttractRepulseAtom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_LJAttractRepulseAtom",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LJAttractRepulseAtom" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_LJAttractRepulseAtom" "', argument " "2"" of type '" "std::vector< flt >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LJAttractRepulseAtom" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_LJAttractRepulseAtom" "', argument " "4"" of type '" "uint""'");
  } 
  arg4 = static_cast< uint >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_LJAttractRepulseAtom" "', argument " "5"" of type '" "flt""'");
  } 
  arg5 = static_cast< flt >(val5);
  result = (LJAttractRepulseAtom *)new LJAttractRepulseAtom(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJAttractRepulseAtom, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJAttractRepulseAtom__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomid arg1 ;
  SwigValueWrapper< LJAttractRepulseAtom > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  LJAttractRepulseAtom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LJAttractRepulseAtom",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LJAttractRepulseAtom" "', argument " "1"" of type '" "atomid""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJAttractRepulseAtom" "', argument " "1"" of type '" "atomid""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJAttractRepulseAtom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LJAttractRepulseAtom" "', argument " "2"" of type '" "LJAttractRepulseAtom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJAttractRepulseAtom" "', argument " "2"" of type '" "LJAttractRepulseAtom""'");
    } else {
      LJAttractRepulseAtom * temp = reinterpret_cast< LJAttractRepulseAtom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (LJAttractRepulseAtom *)new LJAttractRepulseAtom(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJAttractRepulseAtom, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJAttractRepulseAtom(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_atomid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_LJAttractRepulseAtom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LJAttractRepulseAtom__SWIG_1(self, args);
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_LJAttractRepulseAtom__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LJAttractRepulseAtom'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LJAttractRepulseAtom::LJAttractRepulseAtom(atom *,std::vector< flt >,flt,uint,flt)\n"
    "    LJAttractRepulseAtom::LJAttractRepulseAtom(atomid,LJAttractRepulseAtom)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulseAtom_getEpsilon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractRepulseAtom *arg1 = (LJAttractRepulseAtom *) 0 ;
  LJAttractRepulseAtom *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractRepulseAtom_getEpsilon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractRepulseAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulseAtom_getEpsilon" "', argument " "1"" of type '" "LJAttractRepulseAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractRepulseAtom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJAttractRepulseAtom,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractRepulseAtom_getEpsilon" "', argument " "2"" of type '" "LJAttractRepulseAtom &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJAttractRepulseAtom_getEpsilon" "', argument " "2"" of type '" "LJAttractRepulseAtom &""'"); 
  }
  arg2 = reinterpret_cast< LJAttractRepulseAtom * >(argp2);
  result = (flt)(arg1)->getEpsilon(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LJAttractRepulseAtom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractRepulseAtom *arg1 = (LJAttractRepulseAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJAttractRepulseAtom",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractRepulseAtom, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJAttractRepulseAtom" "', argument " "1"" of type '" "LJAttractRepulseAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractRepulseAtom * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJAttractRepulseAtom_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LJAttractRepulseAtom, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LJAttractRepulsePair_eps_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractRepulsePair *arg1 = (LJAttractRepulsePair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractRepulsePair_eps_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulsePair_eps_set" "', argument " "1"" of type '" "LJAttractRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractRepulsePair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJAttractRepulsePair_eps_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->eps = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulsePair_eps_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractRepulsePair *arg1 = (LJAttractRepulsePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractRepulsePair_eps_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulsePair_eps_get" "', argument " "1"" of type '" "LJAttractRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractRepulsePair * >(argp1);
  result = (flt) ((arg1)->eps);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulsePair_sig_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractRepulsePair *arg1 = (LJAttractRepulsePair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractRepulsePair_sig_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulsePair_sig_set" "', argument " "1"" of type '" "LJAttractRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractRepulsePair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJAttractRepulsePair_sig_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->sig = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulsePair_sig_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractRepulsePair *arg1 = (LJAttractRepulsePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractRepulsePair_sig_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulsePair_sig_get" "', argument " "1"" of type '" "LJAttractRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractRepulsePair * >(argp1);
  result = (flt) ((arg1)->sig);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulsePair_cutR_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractRepulsePair *arg1 = (LJAttractRepulsePair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractRepulsePair_cutR_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulsePair_cutR_set" "', argument " "1"" of type '" "LJAttractRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractRepulsePair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJAttractRepulsePair_cutR_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->cutR = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulsePair_cutR_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractRepulsePair *arg1 = (LJAttractRepulsePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractRepulsePair_cutR_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulsePair_cutR_get" "', argument " "1"" of type '" "LJAttractRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractRepulsePair * >(argp1);
  result = (flt) ((arg1)->cutR);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulsePair_cutE_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractRepulsePair *arg1 = (LJAttractRepulsePair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractRepulsePair_cutE_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulsePair_cutE_set" "', argument " "1"" of type '" "LJAttractRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractRepulsePair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJAttractRepulsePair_cutE_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->cutE = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulsePair_cutE_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractRepulsePair *arg1 = (LJAttractRepulsePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractRepulsePair_cutE_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulsePair_cutE_get" "', argument " "1"" of type '" "LJAttractRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractRepulsePair * >(argp1);
  result = (flt) ((arg1)->cutE);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulsePair_atom1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractRepulsePair *arg1 = (LJAttractRepulsePair *) 0 ;
  atomid *arg2 = (atomid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractRepulsePair_atom1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulsePair_atom1_set" "', argument " "1"" of type '" "LJAttractRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractRepulsePair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractRepulsePair_atom1_set" "', argument " "2"" of type '" "atomid *""'"); 
  }
  arg2 = reinterpret_cast< atomid * >(argp2);
  if (arg1) (arg1)->atom1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulsePair_atom1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractRepulsePair *arg1 = (LJAttractRepulsePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractRepulsePair_atom1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulsePair_atom1_get" "', argument " "1"" of type '" "LJAttractRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractRepulsePair * >(argp1);
  result = (atomid *)& ((arg1)->atom1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulsePair_atom2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractRepulsePair *arg1 = (LJAttractRepulsePair *) 0 ;
  atomid *arg2 = (atomid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractRepulsePair_atom2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulsePair_atom2_set" "', argument " "1"" of type '" "LJAttractRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractRepulsePair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractRepulsePair_atom2_set" "', argument " "2"" of type '" "atomid *""'"); 
  }
  arg2 = reinterpret_cast< atomid * >(argp2);
  if (arg1) (arg1)->atom2 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulsePair_atom2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractRepulsePair *arg1 = (LJAttractRepulsePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractRepulsePair_atom2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulsePair_atom2_get" "', argument " "1"" of type '" "LJAttractRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractRepulsePair * >(argp1);
  result = (atomid *)& ((arg1)->atom2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJAttractRepulsePair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< LJAttractRepulseAtom > arg1 ;
  SwigValueWrapper< LJAttractRepulseAtom > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  LJAttractRepulsePair *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LJAttractRepulsePair",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_LJAttractRepulseAtom,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LJAttractRepulsePair" "', argument " "1"" of type '" "LJAttractRepulseAtom""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJAttractRepulsePair" "', argument " "1"" of type '" "LJAttractRepulseAtom""'");
    } else {
      LJAttractRepulseAtom * temp = reinterpret_cast< LJAttractRepulseAtom * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJAttractRepulseAtom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LJAttractRepulsePair" "', argument " "2"" of type '" "LJAttractRepulseAtom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJAttractRepulsePair" "', argument " "2"" of type '" "LJAttractRepulseAtom""'");
    } else {
      LJAttractRepulseAtom * temp = reinterpret_cast< LJAttractRepulseAtom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (LJAttractRepulsePair *)new LJAttractRepulsePair(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJAttractRepulsePair, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulsePair_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractRepulsePair *arg1 = (LJAttractRepulsePair *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractRepulsePair_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulsePair_energy" "', argument " "1"" of type '" "LJAttractRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractRepulsePair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractRepulsePair_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulsePair_forces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractRepulsePair *arg1 = (LJAttractRepulsePair *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractRepulsePair_forces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulsePair_forces" "', argument " "1"" of type '" "LJAttractRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractRepulsePair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractRepulsePair_forces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (arg1)->forces(arg2);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LJAttractRepulsePair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractRepulsePair *arg1 = (LJAttractRepulsePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJAttractRepulsePair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractRepulsePair, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJAttractRepulsePair" "', argument " "1"" of type '" "LJAttractRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractRepulsePair * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJAttractRepulsePair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LJAttractRepulsePair, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LJAttractFixedRepulseAtom_epsilons_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulseAtom *arg1 = (LJAttractFixedRepulseAtom *) 0 ;
  std::vector< flt > *arg2 = (std::vector< flt > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractFixedRepulseAtom_epsilons_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulseAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulseAtom_epsilons_set" "', argument " "1"" of type '" "LJAttractFixedRepulseAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulseAtom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractFixedRepulseAtom_epsilons_set" "', argument " "2"" of type '" "std::vector< flt > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< flt > * >(argp2);
  if (arg1) (arg1)->epsilons = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulseAtom_epsilons_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulseAtom *arg1 = (LJAttractFixedRepulseAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< flt > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractFixedRepulseAtom_epsilons_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulseAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulseAtom_epsilons_get" "', argument " "1"" of type '" "LJAttractFixedRepulseAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulseAtom * >(argp1);
  result = (std::vector< flt > *)& ((arg1)->epsilons);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulseAtom_repeps_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulseAtom *arg1 = (LJAttractFixedRepulseAtom *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractFixedRepulseAtom_repeps_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulseAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulseAtom_repeps_set" "', argument " "1"" of type '" "LJAttractFixedRepulseAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulseAtom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJAttractFixedRepulseAtom_repeps_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->repeps = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulseAtom_repeps_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulseAtom *arg1 = (LJAttractFixedRepulseAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractFixedRepulseAtom_repeps_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulseAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulseAtom_repeps_get" "', argument " "1"" of type '" "LJAttractFixedRepulseAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulseAtom * >(argp1);
  result = (flt) ((arg1)->repeps);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulseAtom_sig_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulseAtom *arg1 = (LJAttractFixedRepulseAtom *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractFixedRepulseAtom_sig_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulseAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulseAtom_sig_set" "', argument " "1"" of type '" "LJAttractFixedRepulseAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulseAtom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJAttractFixedRepulseAtom_sig_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->sig = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulseAtom_sig_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulseAtom *arg1 = (LJAttractFixedRepulseAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractFixedRepulseAtom_sig_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulseAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulseAtom_sig_get" "', argument " "1"" of type '" "LJAttractFixedRepulseAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulseAtom * >(argp1);
  result = (flt) ((arg1)->sig);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulseAtom_indx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulseAtom *arg1 = (LJAttractFixedRepulseAtom *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractFixedRepulseAtom_indx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulseAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulseAtom_indx_set" "', argument " "1"" of type '" "LJAttractFixedRepulseAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulseAtom * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJAttractFixedRepulseAtom_indx_set" "', argument " "2"" of type '" "uint""'");
  } 
  arg2 = static_cast< uint >(val2);
  if (arg1) (arg1)->indx = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulseAtom_indx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulseAtom *arg1 = (LJAttractFixedRepulseAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractFixedRepulseAtom_indx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulseAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulseAtom_indx_get" "', argument " "1"" of type '" "LJAttractFixedRepulseAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulseAtom * >(argp1);
  result = (uint) ((arg1)->indx);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulseAtom_sigcut_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulseAtom *arg1 = (LJAttractFixedRepulseAtom *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractFixedRepulseAtom_sigcut_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulseAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulseAtom_sigcut_set" "', argument " "1"" of type '" "LJAttractFixedRepulseAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulseAtom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJAttractFixedRepulseAtom_sigcut_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->sigcut = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulseAtom_sigcut_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulseAtom *arg1 = (LJAttractFixedRepulseAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractFixedRepulseAtom_sigcut_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulseAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulseAtom_sigcut_get" "', argument " "1"" of type '" "LJAttractFixedRepulseAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulseAtom * >(argp1);
  result = (flt) ((arg1)->sigcut);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJAttractFixedRepulseAtom__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  std::vector< flt > arg2 ;
  flt arg3 ;
  flt arg4 ;
  uint arg5 ;
  flt arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  LJAttractFixedRepulseAtom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_LJAttractFixedRepulseAtom",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LJAttractFixedRepulseAtom" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_LJAttractFixedRepulseAtom" "', argument " "2"" of type '" "std::vector< flt >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LJAttractFixedRepulseAtom" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_LJAttractFixedRepulseAtom" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_LJAttractFixedRepulseAtom" "', argument " "5"" of type '" "uint""'");
  } 
  arg5 = static_cast< uint >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_LJAttractFixedRepulseAtom" "', argument " "6"" of type '" "flt""'");
  } 
  arg6 = static_cast< flt >(val6);
  result = (LJAttractFixedRepulseAtom *)new LJAttractFixedRepulseAtom(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJAttractFixedRepulseAtom, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJAttractFixedRepulseAtom__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomid arg1 ;
  SwigValueWrapper< LJAttractFixedRepulseAtom > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  LJAttractFixedRepulseAtom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LJAttractFixedRepulseAtom",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LJAttractFixedRepulseAtom" "', argument " "1"" of type '" "atomid""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJAttractFixedRepulseAtom" "', argument " "1"" of type '" "atomid""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJAttractFixedRepulseAtom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LJAttractFixedRepulseAtom" "', argument " "2"" of type '" "LJAttractFixedRepulseAtom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJAttractFixedRepulseAtom" "', argument " "2"" of type '" "LJAttractFixedRepulseAtom""'");
    } else {
      LJAttractFixedRepulseAtom * temp = reinterpret_cast< LJAttractFixedRepulseAtom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (LJAttractFixedRepulseAtom *)new LJAttractFixedRepulseAtom(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJAttractFixedRepulseAtom, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJAttractFixedRepulseAtom(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_atomid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_LJAttractFixedRepulseAtom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LJAttractFixedRepulseAtom__SWIG_1(self, args);
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_LJAttractFixedRepulseAtom__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LJAttractFixedRepulseAtom'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LJAttractFixedRepulseAtom::LJAttractFixedRepulseAtom(atom *,std::vector< flt >,flt,flt,uint,flt)\n"
    "    LJAttractFixedRepulseAtom::LJAttractFixedRepulseAtom(atomid,LJAttractFixedRepulseAtom)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulseAtom_getEpsilon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulseAtom *arg1 = (LJAttractFixedRepulseAtom *) 0 ;
  LJAttractFixedRepulseAtom *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractFixedRepulseAtom_getEpsilon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulseAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulseAtom_getEpsilon" "', argument " "1"" of type '" "LJAttractFixedRepulseAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulseAtom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJAttractFixedRepulseAtom,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractFixedRepulseAtom_getEpsilon" "', argument " "2"" of type '" "LJAttractFixedRepulseAtom &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJAttractFixedRepulseAtom_getEpsilon" "', argument " "2"" of type '" "LJAttractFixedRepulseAtom &""'"); 
  }
  arg2 = reinterpret_cast< LJAttractFixedRepulseAtom * >(argp2);
  result = (flt)(arg1)->getEpsilon(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LJAttractFixedRepulseAtom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulseAtom *arg1 = (LJAttractFixedRepulseAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJAttractFixedRepulseAtom",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulseAtom, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJAttractFixedRepulseAtom" "', argument " "1"" of type '" "LJAttractFixedRepulseAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulseAtom * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJAttractFixedRepulseAtom_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LJAttractFixedRepulseAtom, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LJAttractFixedRepulsePair_eps_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulsePair *arg1 = (LJAttractFixedRepulsePair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractFixedRepulsePair_eps_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulsePair_eps_set" "', argument " "1"" of type '" "LJAttractFixedRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulsePair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJAttractFixedRepulsePair_eps_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->eps = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulsePair_eps_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulsePair *arg1 = (LJAttractFixedRepulsePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractFixedRepulsePair_eps_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulsePair_eps_get" "', argument " "1"" of type '" "LJAttractFixedRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulsePair * >(argp1);
  result = (flt) ((arg1)->eps);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulsePair_repeps_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulsePair *arg1 = (LJAttractFixedRepulsePair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractFixedRepulsePair_repeps_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulsePair_repeps_set" "', argument " "1"" of type '" "LJAttractFixedRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulsePair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJAttractFixedRepulsePair_repeps_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->repeps = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulsePair_repeps_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulsePair *arg1 = (LJAttractFixedRepulsePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractFixedRepulsePair_repeps_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulsePair_repeps_get" "', argument " "1"" of type '" "LJAttractFixedRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulsePair * >(argp1);
  result = (flt) ((arg1)->repeps);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulsePair_sig_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulsePair *arg1 = (LJAttractFixedRepulsePair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractFixedRepulsePair_sig_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulsePair_sig_set" "', argument " "1"" of type '" "LJAttractFixedRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulsePair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJAttractFixedRepulsePair_sig_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->sig = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulsePair_sig_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulsePair *arg1 = (LJAttractFixedRepulsePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractFixedRepulsePair_sig_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulsePair_sig_get" "', argument " "1"" of type '" "LJAttractFixedRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulsePair * >(argp1);
  result = (flt) ((arg1)->sig);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulsePair_cutR_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulsePair *arg1 = (LJAttractFixedRepulsePair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractFixedRepulsePair_cutR_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulsePair_cutR_set" "', argument " "1"" of type '" "LJAttractFixedRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulsePair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJAttractFixedRepulsePair_cutR_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->cutR = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulsePair_cutR_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulsePair *arg1 = (LJAttractFixedRepulsePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractFixedRepulsePair_cutR_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulsePair_cutR_get" "', argument " "1"" of type '" "LJAttractFixedRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulsePair * >(argp1);
  result = (flt) ((arg1)->cutR);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulsePair_cutE_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulsePair *arg1 = (LJAttractFixedRepulsePair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractFixedRepulsePair_cutE_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulsePair_cutE_set" "', argument " "1"" of type '" "LJAttractFixedRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulsePair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJAttractFixedRepulsePair_cutE_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->cutE = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulsePair_cutE_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulsePair *arg1 = (LJAttractFixedRepulsePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractFixedRepulsePair_cutE_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulsePair_cutE_get" "', argument " "1"" of type '" "LJAttractFixedRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulsePair * >(argp1);
  result = (flt) ((arg1)->cutE);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulsePair_attract_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulsePair *arg1 = (LJAttractFixedRepulsePair *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractFixedRepulsePair_attract_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulsePair_attract_set" "', argument " "1"" of type '" "LJAttractFixedRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulsePair * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJAttractFixedRepulsePair_attract_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->attract = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulsePair_attract_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulsePair *arg1 = (LJAttractFixedRepulsePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractFixedRepulsePair_attract_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulsePair_attract_get" "', argument " "1"" of type '" "LJAttractFixedRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulsePair * >(argp1);
  result = (bool) ((arg1)->attract);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulsePair_atom1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulsePair *arg1 = (LJAttractFixedRepulsePair *) 0 ;
  atomid *arg2 = (atomid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractFixedRepulsePair_atom1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulsePair_atom1_set" "', argument " "1"" of type '" "LJAttractFixedRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulsePair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractFixedRepulsePair_atom1_set" "', argument " "2"" of type '" "atomid *""'"); 
  }
  arg2 = reinterpret_cast< atomid * >(argp2);
  if (arg1) (arg1)->atom1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulsePair_atom1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulsePair *arg1 = (LJAttractFixedRepulsePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractFixedRepulsePair_atom1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulsePair_atom1_get" "', argument " "1"" of type '" "LJAttractFixedRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulsePair * >(argp1);
  result = (atomid *)& ((arg1)->atom1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulsePair_atom2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulsePair *arg1 = (LJAttractFixedRepulsePair *) 0 ;
  atomid *arg2 = (atomid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractFixedRepulsePair_atom2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulsePair_atom2_set" "', argument " "1"" of type '" "LJAttractFixedRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulsePair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractFixedRepulsePair_atom2_set" "', argument " "2"" of type '" "atomid *""'"); 
  }
  arg2 = reinterpret_cast< atomid * >(argp2);
  if (arg1) (arg1)->atom2 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulsePair_atom2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulsePair *arg1 = (LJAttractFixedRepulsePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractFixedRepulsePair_atom2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulsePair_atom2_get" "', argument " "1"" of type '" "LJAttractFixedRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulsePair * >(argp1);
  result = (atomid *)& ((arg1)->atom2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJAttractFixedRepulsePair__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulsePair *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_LJAttractFixedRepulsePair")) SWIG_fail;
  result = (LJAttractFixedRepulsePair *)new LJAttractFixedRepulsePair();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJAttractFixedRepulsePair, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJAttractFixedRepulsePair__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< LJAttractFixedRepulseAtom > arg1 ;
  SwigValueWrapper< LJAttractFixedRepulseAtom > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  LJAttractFixedRepulsePair *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LJAttractFixedRepulsePair",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_LJAttractFixedRepulseAtom,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LJAttractFixedRepulsePair" "', argument " "1"" of type '" "LJAttractFixedRepulseAtom""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJAttractFixedRepulsePair" "', argument " "1"" of type '" "LJAttractFixedRepulseAtom""'");
    } else {
      LJAttractFixedRepulseAtom * temp = reinterpret_cast< LJAttractFixedRepulseAtom * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJAttractFixedRepulseAtom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LJAttractFixedRepulsePair" "', argument " "2"" of type '" "LJAttractFixedRepulseAtom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJAttractFixedRepulsePair" "', argument " "2"" of type '" "LJAttractFixedRepulseAtom""'");
    } else {
      LJAttractFixedRepulseAtom * temp = reinterpret_cast< LJAttractFixedRepulseAtom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (LJAttractFixedRepulsePair *)new LJAttractFixedRepulsePair(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJAttractFixedRepulsePair, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJAttractFixedRepulsePair(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_LJAttractFixedRepulsePair__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_LJAttractFixedRepulseAtom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_LJAttractFixedRepulseAtom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LJAttractFixedRepulsePair__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LJAttractFixedRepulsePair'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LJAttractFixedRepulsePair::LJAttractFixedRepulsePair()\n"
    "    LJAttractFixedRepulsePair::LJAttractFixedRepulsePair(LJAttractFixedRepulseAtom,LJAttractFixedRepulseAtom)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulsePair_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulsePair *arg1 = (LJAttractFixedRepulsePair *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractFixedRepulsePair_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulsePair_energy" "', argument " "1"" of type '" "LJAttractFixedRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulsePair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractFixedRepulsePair_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulsePair_forces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulsePair *arg1 = (LJAttractFixedRepulsePair *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractFixedRepulsePair_forces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulsePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulsePair_forces" "', argument " "1"" of type '" "LJAttractFixedRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulsePair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractFixedRepulsePair_forces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (arg1)->forces(arg2);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LJAttractFixedRepulsePair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJAttractFixedRepulsePair *arg1 = (LJAttractFixedRepulsePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJAttractFixedRepulsePair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJAttractFixedRepulsePair, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJAttractFixedRepulsePair" "', argument " "1"" of type '" "LJAttractFixedRepulsePair *""'"); 
  }
  arg1 = reinterpret_cast< LJAttractFixedRepulsePair * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJAttractFixedRepulsePair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LJAttractFixedRepulsePair, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LJDoubleAtom_epsrep_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJDoubleAtom *arg1 = (LJDoubleAtom *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJDoubleAtom_epsrep_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJDoubleAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDoubleAtom_epsrep_set" "', argument " "1"" of type '" "LJDoubleAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJDoubleAtom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJDoubleAtom_epsrep_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->epsrep = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDoubleAtom_epsrep_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJDoubleAtom *arg1 = (LJDoubleAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJDoubleAtom_epsrep_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJDoubleAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDoubleAtom_epsrep_get" "', argument " "1"" of type '" "LJDoubleAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJDoubleAtom * >(argp1);
  result = (flt) ((arg1)->epsrep);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDoubleAtom_sigcut_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJDoubleAtom *arg1 = (LJDoubleAtom *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJDoubleAtom_sigcut_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJDoubleAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDoubleAtom_sigcut_set" "', argument " "1"" of type '" "LJDoubleAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJDoubleAtom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJDoubleAtom_sigcut_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->sigcut = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDoubleAtom_sigcut_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJDoubleAtom *arg1 = (LJDoubleAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJDoubleAtom_sigcut_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJDoubleAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDoubleAtom_sigcut_get" "', argument " "1"" of type '" "LJDoubleAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJDoubleAtom * >(argp1);
  result = (flt) ((arg1)->sigcut);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJDoubleAtom__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  flt arg2 ;
  flt arg3 ;
  atom *arg4 = (atom *) 0 ;
  flt arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  LJDoubleAtom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_LJDoubleAtom",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LJDoubleAtom" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LJDoubleAtom" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LJDoubleAtom" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_LJDoubleAtom" "', argument " "4"" of type '" "atom *""'"); 
  }
  arg4 = reinterpret_cast< atom * >(argp4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_LJDoubleAtom" "', argument " "5"" of type '" "flt""'");
  } 
  arg5 = static_cast< flt >(val5);
  result = (LJDoubleAtom *)new LJDoubleAtom(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJDoubleAtom, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJDoubleAtom__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomid arg1 ;
  SwigValueWrapper< LJDoubleAtom > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  LJDoubleAtom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LJDoubleAtom",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LJDoubleAtom" "', argument " "1"" of type '" "atomid""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJDoubleAtom" "', argument " "1"" of type '" "atomid""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJDoubleAtom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LJDoubleAtom" "', argument " "2"" of type '" "LJDoubleAtom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJDoubleAtom" "', argument " "2"" of type '" "LJDoubleAtom""'");
    } else {
      LJDoubleAtom * temp = reinterpret_cast< LJDoubleAtom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (LJDoubleAtom *)new LJDoubleAtom(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJDoubleAtom, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJDoubleAtom(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_atomid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_LJDoubleAtom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LJDoubleAtom__SWIG_1(self, args);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_atom, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_LJDoubleAtom__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LJDoubleAtom'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LJDoubleAtom::LJDoubleAtom(flt,flt,flt,atom *,flt)\n"
    "    LJDoubleAtom::LJDoubleAtom(atomid,LJDoubleAtom)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_LJDoubleAtom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJDoubleAtom *arg1 = (LJDoubleAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJDoubleAtom",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJDoubleAtom, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJDoubleAtom" "', argument " "1"" of type '" "LJDoubleAtom *""'"); 
  }
  arg1 = reinterpret_cast< LJDoubleAtom * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJDoubleAtom_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LJDoubleAtom, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LJDoublePair_eps_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJDoublePair *arg1 = (LJDoublePair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJDoublePair_eps_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJDoublePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDoublePair_eps_set" "', argument " "1"" of type '" "LJDoublePair *""'"); 
  }
  arg1 = reinterpret_cast< LJDoublePair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJDoublePair_eps_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->eps = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDoublePair_eps_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJDoublePair *arg1 = (LJDoublePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJDoublePair_eps_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJDoublePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDoublePair_eps_get" "', argument " "1"" of type '" "LJDoublePair *""'"); 
  }
  arg1 = reinterpret_cast< LJDoublePair * >(argp1);
  result = (flt) ((arg1)->eps);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDoublePair_repeps_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJDoublePair *arg1 = (LJDoublePair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJDoublePair_repeps_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJDoublePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDoublePair_repeps_set" "', argument " "1"" of type '" "LJDoublePair *""'"); 
  }
  arg1 = reinterpret_cast< LJDoublePair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJDoublePair_repeps_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->repeps = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDoublePair_repeps_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJDoublePair *arg1 = (LJDoublePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJDoublePair_repeps_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJDoublePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDoublePair_repeps_get" "', argument " "1"" of type '" "LJDoublePair *""'"); 
  }
  arg1 = reinterpret_cast< LJDoublePair * >(argp1);
  result = (flt) ((arg1)->repeps);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDoublePair_sig_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJDoublePair *arg1 = (LJDoublePair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJDoublePair_sig_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJDoublePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDoublePair_sig_set" "', argument " "1"" of type '" "LJDoublePair *""'"); 
  }
  arg1 = reinterpret_cast< LJDoublePair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJDoublePair_sig_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->sig = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDoublePair_sig_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJDoublePair *arg1 = (LJDoublePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJDoublePair_sig_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJDoublePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDoublePair_sig_get" "', argument " "1"" of type '" "LJDoublePair *""'"); 
  }
  arg1 = reinterpret_cast< LJDoublePair * >(argp1);
  result = (flt) ((arg1)->sig);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDoublePair_cutR_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJDoublePair *arg1 = (LJDoublePair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJDoublePair_cutR_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJDoublePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDoublePair_cutR_set" "', argument " "1"" of type '" "LJDoublePair *""'"); 
  }
  arg1 = reinterpret_cast< LJDoublePair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJDoublePair_cutR_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->cutR = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDoublePair_cutR_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJDoublePair *arg1 = (LJDoublePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJDoublePair_cutR_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJDoublePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDoublePair_cutR_get" "', argument " "1"" of type '" "LJDoublePair *""'"); 
  }
  arg1 = reinterpret_cast< LJDoublePair * >(argp1);
  result = (flt) ((arg1)->cutR);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDoublePair_cutE_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJDoublePair *arg1 = (LJDoublePair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJDoublePair_cutE_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJDoublePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDoublePair_cutE_set" "', argument " "1"" of type '" "LJDoublePair *""'"); 
  }
  arg1 = reinterpret_cast< LJDoublePair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJDoublePair_cutE_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->cutE = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDoublePair_cutE_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJDoublePair *arg1 = (LJDoublePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJDoublePair_cutE_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJDoublePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDoublePair_cutE_get" "', argument " "1"" of type '" "LJDoublePair *""'"); 
  }
  arg1 = reinterpret_cast< LJDoublePair * >(argp1);
  result = (flt) ((arg1)->cutE);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDoublePair_attract_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJDoublePair *arg1 = (LJDoublePair *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJDoublePair_attract_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJDoublePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDoublePair_attract_set" "', argument " "1"" of type '" "LJDoublePair *""'"); 
  }
  arg1 = reinterpret_cast< LJDoublePair * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LJDoublePair_attract_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->attract = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDoublePair_attract_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJDoublePair *arg1 = (LJDoublePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJDoublePair_attract_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJDoublePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDoublePair_attract_get" "', argument " "1"" of type '" "LJDoublePair *""'"); 
  }
  arg1 = reinterpret_cast< LJDoublePair * >(argp1);
  result = (bool) ((arg1)->attract);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDoublePair_atom1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJDoublePair *arg1 = (LJDoublePair *) 0 ;
  atomid *arg2 = (atomid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJDoublePair_atom1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJDoublePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDoublePair_atom1_set" "', argument " "1"" of type '" "LJDoublePair *""'"); 
  }
  arg1 = reinterpret_cast< LJDoublePair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJDoublePair_atom1_set" "', argument " "2"" of type '" "atomid *""'"); 
  }
  arg2 = reinterpret_cast< atomid * >(argp2);
  if (arg1) (arg1)->atom1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDoublePair_atom1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJDoublePair *arg1 = (LJDoublePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJDoublePair_atom1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJDoublePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDoublePair_atom1_get" "', argument " "1"" of type '" "LJDoublePair *""'"); 
  }
  arg1 = reinterpret_cast< LJDoublePair * >(argp1);
  result = (atomid *)& ((arg1)->atom1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDoublePair_atom2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJDoublePair *arg1 = (LJDoublePair *) 0 ;
  atomid *arg2 = (atomid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJDoublePair_atom2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJDoublePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDoublePair_atom2_set" "', argument " "1"" of type '" "LJDoublePair *""'"); 
  }
  arg1 = reinterpret_cast< LJDoublePair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJDoublePair_atom2_set" "', argument " "2"" of type '" "atomid *""'"); 
  }
  arg2 = reinterpret_cast< atomid * >(argp2);
  if (arg1) (arg1)->atom2 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDoublePair_atom2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJDoublePair *arg1 = (LJDoublePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJDoublePair_atom2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJDoublePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDoublePair_atom2_get" "', argument " "1"" of type '" "LJDoublePair *""'"); 
  }
  arg1 = reinterpret_cast< LJDoublePair * >(argp1);
  result = (atomid *)& ((arg1)->atom2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJDoublePair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< LJDoubleAtom > arg1 ;
  SwigValueWrapper< LJDoubleAtom > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  LJDoublePair *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LJDoublePair",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_LJDoubleAtom,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LJDoublePair" "', argument " "1"" of type '" "LJDoubleAtom""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJDoublePair" "', argument " "1"" of type '" "LJDoubleAtom""'");
    } else {
      LJDoubleAtom * temp = reinterpret_cast< LJDoubleAtom * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJDoubleAtom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LJDoublePair" "', argument " "2"" of type '" "LJDoubleAtom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJDoublePair" "', argument " "2"" of type '" "LJDoubleAtom""'");
    } else {
      LJDoubleAtom * temp = reinterpret_cast< LJDoubleAtom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (LJDoublePair *)new LJDoublePair(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJDoublePair, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LJDoublePair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJDoublePair *arg1 = (LJDoublePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJDoublePair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJDoublePair, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJDoublePair" "', argument " "1"" of type '" "LJDoublePair *""'"); 
  }
  arg1 = reinterpret_cast< LJDoublePair * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJDoublePair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LJDoublePair, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_EisMclachlanAtom_dist_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EisMclachlanAtom *arg1 = (EisMclachlanAtom *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EisMclachlanAtom_dist_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EisMclachlanAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlanAtom_dist_set" "', argument " "1"" of type '" "EisMclachlanAtom *""'"); 
  }
  arg1 = reinterpret_cast< EisMclachlanAtom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EisMclachlanAtom_dist_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->dist = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlanAtom_dist_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EisMclachlanAtom *arg1 = (EisMclachlanAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EisMclachlanAtom_dist_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EisMclachlanAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlanAtom_dist_get" "', argument " "1"" of type '" "EisMclachlanAtom *""'"); 
  }
  arg1 = reinterpret_cast< EisMclachlanAtom * >(argp1);
  result = (flt) ((arg1)->dist);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlanAtom_sigmai_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EisMclachlanAtom *arg1 = (EisMclachlanAtom *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EisMclachlanAtom_sigmai_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EisMclachlanAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlanAtom_sigmai_set" "', argument " "1"" of type '" "EisMclachlanAtom *""'"); 
  }
  arg1 = reinterpret_cast< EisMclachlanAtom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EisMclachlanAtom_sigmai_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->sigmai = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlanAtom_sigmai_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EisMclachlanAtom *arg1 = (EisMclachlanAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EisMclachlanAtom_sigmai_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EisMclachlanAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlanAtom_sigmai_get" "', argument " "1"" of type '" "EisMclachlanAtom *""'"); 
  }
  arg1 = reinterpret_cast< EisMclachlanAtom * >(argp1);
  result = (flt) ((arg1)->sigmai);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EisMclachlanAtom__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  flt arg2 ;
  atom *arg3 = (atom *) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  EisMclachlanAtom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_EisMclachlanAtom",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_EisMclachlanAtom" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_EisMclachlanAtom" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_EisMclachlanAtom" "', argument " "3"" of type '" "atom *""'"); 
  }
  arg3 = reinterpret_cast< atom * >(argp3);
  result = (EisMclachlanAtom *)new EisMclachlanAtom(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EisMclachlanAtom, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EisMclachlanAtom__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomid arg1 ;
  SwigValueWrapper< EisMclachlanAtom > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  EisMclachlanAtom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_EisMclachlanAtom",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EisMclachlanAtom" "', argument " "1"" of type '" "atomid""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EisMclachlanAtom" "', argument " "1"" of type '" "atomid""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EisMclachlanAtom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_EisMclachlanAtom" "', argument " "2"" of type '" "EisMclachlanAtom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EisMclachlanAtom" "', argument " "2"" of type '" "EisMclachlanAtom""'");
    } else {
      EisMclachlanAtom * temp = reinterpret_cast< EisMclachlanAtom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (EisMclachlanAtom *)new EisMclachlanAtom(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EisMclachlanAtom, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EisMclachlanAtom(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_atomid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_EisMclachlanAtom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_EisMclachlanAtom__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_atom, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_EisMclachlanAtom__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_EisMclachlanAtom'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EisMclachlanAtom::EisMclachlanAtom(flt,flt,atom *)\n"
    "    EisMclachlanAtom::EisMclachlanAtom(atomid,EisMclachlanAtom)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_EisMclachlanAtom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EisMclachlanAtom *arg1 = (EisMclachlanAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_EisMclachlanAtom",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EisMclachlanAtom, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EisMclachlanAtom" "', argument " "1"" of type '" "EisMclachlanAtom *""'"); 
  }
  arg1 = reinterpret_cast< EisMclachlanAtom * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EisMclachlanAtom_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_EisMclachlanAtom, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_EisMclachlanPair_c0_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EisMclachlanPair *arg1 = (EisMclachlanPair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EisMclachlanPair_c0_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EisMclachlanPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlanPair_c0_set" "', argument " "1"" of type '" "EisMclachlanPair *""'"); 
  }
  arg1 = reinterpret_cast< EisMclachlanPair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EisMclachlanPair_c0_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->c0 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlanPair_c0_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EisMclachlanPair *arg1 = (EisMclachlanPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EisMclachlanPair_c0_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EisMclachlanPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlanPair_c0_get" "', argument " "1"" of type '" "EisMclachlanPair *""'"); 
  }
  arg1 = reinterpret_cast< EisMclachlanPair * >(argp1);
  result = (flt) ((arg1)->c0);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlanPair_c1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EisMclachlanPair *arg1 = (EisMclachlanPair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EisMclachlanPair_c1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EisMclachlanPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlanPair_c1_set" "', argument " "1"" of type '" "EisMclachlanPair *""'"); 
  }
  arg1 = reinterpret_cast< EisMclachlanPair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EisMclachlanPair_c1_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->c1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlanPair_c1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EisMclachlanPair *arg1 = (EisMclachlanPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EisMclachlanPair_c1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EisMclachlanPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlanPair_c1_get" "', argument " "1"" of type '" "EisMclachlanPair *""'"); 
  }
  arg1 = reinterpret_cast< EisMclachlanPair * >(argp1);
  result = (flt) ((arg1)->c1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlanPair_c2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EisMclachlanPair *arg1 = (EisMclachlanPair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EisMclachlanPair_c2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EisMclachlanPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlanPair_c2_set" "', argument " "1"" of type '" "EisMclachlanPair *""'"); 
  }
  arg1 = reinterpret_cast< EisMclachlanPair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EisMclachlanPair_c2_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->c2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlanPair_c2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EisMclachlanPair *arg1 = (EisMclachlanPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EisMclachlanPair_c2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EisMclachlanPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlanPair_c2_get" "', argument " "1"" of type '" "EisMclachlanPair *""'"); 
  }
  arg1 = reinterpret_cast< EisMclachlanPair * >(argp1);
  result = (flt) ((arg1)->c2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlanPair_cutoff_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EisMclachlanPair *arg1 = (EisMclachlanPair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EisMclachlanPair_cutoff_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EisMclachlanPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlanPair_cutoff_set" "', argument " "1"" of type '" "EisMclachlanPair *""'"); 
  }
  arg1 = reinterpret_cast< EisMclachlanPair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EisMclachlanPair_cutoff_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->cutoff = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlanPair_cutoff_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EisMclachlanPair *arg1 = (EisMclachlanPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EisMclachlanPair_cutoff_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EisMclachlanPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlanPair_cutoff_get" "', argument " "1"" of type '" "EisMclachlanPair *""'"); 
  }
  arg1 = reinterpret_cast< EisMclachlanPair * >(argp1);
  result = (flt) ((arg1)->cutoff);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlanPair_atom1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EisMclachlanPair *arg1 = (EisMclachlanPair *) 0 ;
  atomid *arg2 = (atomid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EisMclachlanPair_atom1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EisMclachlanPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlanPair_atom1_set" "', argument " "1"" of type '" "EisMclachlanPair *""'"); 
  }
  arg1 = reinterpret_cast< EisMclachlanPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EisMclachlanPair_atom1_set" "', argument " "2"" of type '" "atomid *""'"); 
  }
  arg2 = reinterpret_cast< atomid * >(argp2);
  if (arg1) (arg1)->atom1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlanPair_atom1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EisMclachlanPair *arg1 = (EisMclachlanPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EisMclachlanPair_atom1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EisMclachlanPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlanPair_atom1_get" "', argument " "1"" of type '" "EisMclachlanPair *""'"); 
  }
  arg1 = reinterpret_cast< EisMclachlanPair * >(argp1);
  result = (atomid *)& ((arg1)->atom1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlanPair_atom2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EisMclachlanPair *arg1 = (EisMclachlanPair *) 0 ;
  atomid *arg2 = (atomid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EisMclachlanPair_atom2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EisMclachlanPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlanPair_atom2_set" "', argument " "1"" of type '" "EisMclachlanPair *""'"); 
  }
  arg1 = reinterpret_cast< EisMclachlanPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EisMclachlanPair_atom2_set" "', argument " "2"" of type '" "atomid *""'"); 
  }
  arg2 = reinterpret_cast< atomid * >(argp2);
  if (arg1) (arg1)->atom2 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlanPair_atom2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EisMclachlanPair *arg1 = (EisMclachlanPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EisMclachlanPair_atom2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EisMclachlanPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlanPair_atom2_get" "', argument " "1"" of type '" "EisMclachlanPair *""'"); 
  }
  arg1 = reinterpret_cast< EisMclachlanPair * >(argp1);
  result = (atomid *)& ((arg1)->atom2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EisMclachlanPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< EisMclachlanAtom > arg1 ;
  SwigValueWrapper< EisMclachlanAtom > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  EisMclachlanPair *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_EisMclachlanPair",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_EisMclachlanAtom,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EisMclachlanPair" "', argument " "1"" of type '" "EisMclachlanAtom""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EisMclachlanPair" "', argument " "1"" of type '" "EisMclachlanAtom""'");
    } else {
      EisMclachlanAtom * temp = reinterpret_cast< EisMclachlanAtom * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EisMclachlanAtom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_EisMclachlanPair" "', argument " "2"" of type '" "EisMclachlanAtom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EisMclachlanPair" "', argument " "2"" of type '" "EisMclachlanAtom""'");
    } else {
      EisMclachlanAtom * temp = reinterpret_cast< EisMclachlanAtom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (EisMclachlanPair *)new EisMclachlanPair(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EisMclachlanPair, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlanPair_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EisMclachlanPair *arg1 = (EisMclachlanPair *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EisMclachlanPair_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EisMclachlanPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlanPair_energy" "', argument " "1"" of type '" "EisMclachlanPair *""'"); 
  }
  arg1 = reinterpret_cast< EisMclachlanPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EisMclachlanPair_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlanPair_forces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EisMclachlanPair *arg1 = (EisMclachlanPair *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EisMclachlanPair_forces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EisMclachlanPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlanPair_forces" "', argument " "1"" of type '" "EisMclachlanPair *""'"); 
  }
  arg1 = reinterpret_cast< EisMclachlanPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EisMclachlanPair_forces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (arg1)->forces(arg2);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EisMclachlanPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EisMclachlanPair *arg1 = (EisMclachlanPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_EisMclachlanPair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EisMclachlanPair, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EisMclachlanPair" "', argument " "1"" of type '" "EisMclachlanPair *""'"); 
  }
  arg1 = reinterpret_cast< EisMclachlanPair * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EisMclachlanPair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_EisMclachlanPair, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_HertzianAtom_eps_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HertzianAtom *arg1 = (HertzianAtom *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HertzianAtom_eps_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HertzianAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianAtom_eps_set" "', argument " "1"" of type '" "HertzianAtom *""'"); 
  }
  arg1 = reinterpret_cast< HertzianAtom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HertzianAtom_eps_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->eps = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianAtom_eps_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HertzianAtom *arg1 = (HertzianAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HertzianAtom_eps_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HertzianAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianAtom_eps_get" "', argument " "1"" of type '" "HertzianAtom *""'"); 
  }
  arg1 = reinterpret_cast< HertzianAtom * >(argp1);
  result = (flt) ((arg1)->eps);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianAtom_sigma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HertzianAtom *arg1 = (HertzianAtom *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HertzianAtom_sigma_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HertzianAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianAtom_sigma_set" "', argument " "1"" of type '" "HertzianAtom *""'"); 
  }
  arg1 = reinterpret_cast< HertzianAtom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HertzianAtom_sigma_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->sigma = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianAtom_sigma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HertzianAtom *arg1 = (HertzianAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HertzianAtom_sigma_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HertzianAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianAtom_sigma_get" "', argument " "1"" of type '" "HertzianAtom *""'"); 
  }
  arg1 = reinterpret_cast< HertzianAtom * >(argp1);
  result = (flt) ((arg1)->sigma);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianAtom_exponent_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HertzianAtom *arg1 = (HertzianAtom *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HertzianAtom_exponent_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HertzianAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianAtom_exponent_set" "', argument " "1"" of type '" "HertzianAtom *""'"); 
  }
  arg1 = reinterpret_cast< HertzianAtom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HertzianAtom_exponent_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->exponent = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianAtom_exponent_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HertzianAtom *arg1 = (HertzianAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HertzianAtom_exponent_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HertzianAtom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianAtom_exponent_get" "', argument " "1"" of type '" "HertzianAtom *""'"); 
  }
  arg1 = reinterpret_cast< HertzianAtom * >(argp1);
  result = (flt) ((arg1)->exponent);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HertzianAtom__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HertzianAtom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_HertzianAtom",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HertzianAtom" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_HertzianAtom" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_HertzianAtom" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_HertzianAtom" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  result = (HertzianAtom *)new HertzianAtom(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HertzianAtom, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HertzianAtom__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  flt arg2 ;
  flt arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HertzianAtom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_HertzianAtom",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HertzianAtom" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_HertzianAtom" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_HertzianAtom" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  result = (HertzianAtom *)new HertzianAtom(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HertzianAtom, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HertzianAtom__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomid arg1 ;
  SwigValueWrapper< HertzianAtom > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HertzianAtom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_HertzianAtom",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HertzianAtom" "', argument " "1"" of type '" "atomid""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HertzianAtom" "', argument " "1"" of type '" "atomid""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HertzianAtom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HertzianAtom" "', argument " "2"" of type '" "HertzianAtom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HertzianAtom" "', argument " "2"" of type '" "HertzianAtom""'");
    } else {
      HertzianAtom * temp = reinterpret_cast< HertzianAtom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (HertzianAtom *)new HertzianAtom(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HertzianAtom, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HertzianAtom(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_atomid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_HertzianAtom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_HertzianAtom__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_HertzianAtom__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_HertzianAtom__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_HertzianAtom'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    HertzianAtom::HertzianAtom(atom *,flt,flt,flt)\n"
    "    HertzianAtom::HertzianAtom(atom *,flt,flt)\n"
    "    HertzianAtom::HertzianAtom(atomid,HertzianAtom)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_HertzianAtom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HertzianAtom *arg1 = (HertzianAtom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_HertzianAtom",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HertzianAtom, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HertzianAtom" "', argument " "1"" of type '" "HertzianAtom *""'"); 
  }
  arg1 = reinterpret_cast< HertzianAtom * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HertzianAtom_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HertzianAtom, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_HertzianPair_eps_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HertzianPair *arg1 = (HertzianPair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HertzianPair_eps_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HertzianPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPair_eps_set" "', argument " "1"" of type '" "HertzianPair *""'"); 
  }
  arg1 = reinterpret_cast< HertzianPair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HertzianPair_eps_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->eps = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianPair_eps_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HertzianPair *arg1 = (HertzianPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HertzianPair_eps_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HertzianPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPair_eps_get" "', argument " "1"" of type '" "HertzianPair *""'"); 
  }
  arg1 = reinterpret_cast< HertzianPair * >(argp1);
  result = (flt) ((arg1)->eps);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianPair_sig_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HertzianPair *arg1 = (HertzianPair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HertzianPair_sig_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HertzianPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPair_sig_set" "', argument " "1"" of type '" "HertzianPair *""'"); 
  }
  arg1 = reinterpret_cast< HertzianPair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HertzianPair_sig_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->sig = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianPair_sig_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HertzianPair *arg1 = (HertzianPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HertzianPair_sig_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HertzianPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPair_sig_get" "', argument " "1"" of type '" "HertzianPair *""'"); 
  }
  arg1 = reinterpret_cast< HertzianPair * >(argp1);
  result = (flt) ((arg1)->sig);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianPair_exponent_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HertzianPair *arg1 = (HertzianPair *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HertzianPair_exponent_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HertzianPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPair_exponent_set" "', argument " "1"" of type '" "HertzianPair *""'"); 
  }
  arg1 = reinterpret_cast< HertzianPair * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HertzianPair_exponent_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->exponent = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianPair_exponent_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HertzianPair *arg1 = (HertzianPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HertzianPair_exponent_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HertzianPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPair_exponent_get" "', argument " "1"" of type '" "HertzianPair *""'"); 
  }
  arg1 = reinterpret_cast< HertzianPair * >(argp1);
  result = (flt) ((arg1)->exponent);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianPair_atom1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HertzianPair *arg1 = (HertzianPair *) 0 ;
  atomid *arg2 = (atomid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HertzianPair_atom1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HertzianPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPair_atom1_set" "', argument " "1"" of type '" "HertzianPair *""'"); 
  }
  arg1 = reinterpret_cast< HertzianPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HertzianPair_atom1_set" "', argument " "2"" of type '" "atomid *""'"); 
  }
  arg2 = reinterpret_cast< atomid * >(argp2);
  if (arg1) (arg1)->atom1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianPair_atom1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HertzianPair *arg1 = (HertzianPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HertzianPair_atom1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HertzianPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPair_atom1_get" "', argument " "1"" of type '" "HertzianPair *""'"); 
  }
  arg1 = reinterpret_cast< HertzianPair * >(argp1);
  result = (atomid *)& ((arg1)->atom1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianPair_atom2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HertzianPair *arg1 = (HertzianPair *) 0 ;
  atomid *arg2 = (atomid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HertzianPair_atom2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HertzianPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPair_atom2_set" "', argument " "1"" of type '" "HertzianPair *""'"); 
  }
  arg1 = reinterpret_cast< HertzianPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atomid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HertzianPair_atom2_set" "', argument " "2"" of type '" "atomid *""'"); 
  }
  arg2 = reinterpret_cast< atomid * >(argp2);
  if (arg1) (arg1)->atom2 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianPair_atom2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HertzianPair *arg1 = (HertzianPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HertzianPair_atom2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HertzianPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPair_atom2_get" "', argument " "1"" of type '" "HertzianPair *""'"); 
  }
  arg1 = reinterpret_cast< HertzianPair * >(argp1);
  result = (atomid *)& ((arg1)->atom2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HertzianPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< HertzianAtom > arg1 ;
  SwigValueWrapper< HertzianAtom > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HertzianPair *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_HertzianPair",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HertzianAtom,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HertzianPair" "', argument " "1"" of type '" "HertzianAtom""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HertzianPair" "', argument " "1"" of type '" "HertzianAtom""'");
    } else {
      HertzianAtom * temp = reinterpret_cast< HertzianAtom * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HertzianAtom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HertzianPair" "', argument " "2"" of type '" "HertzianAtom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HertzianPair" "', argument " "2"" of type '" "HertzianAtom""'");
    } else {
      HertzianAtom * temp = reinterpret_cast< HertzianAtom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (HertzianPair *)new HertzianPair(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HertzianPair, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianPair_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HertzianPair *arg1 = (HertzianPair *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HertzianPair_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HertzianPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPair_energy" "', argument " "1"" of type '" "HertzianPair *""'"); 
  }
  arg1 = reinterpret_cast< HertzianPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HertzianPair_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianPair_forces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HertzianPair *arg1 = (HertzianPair *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HertzianPair_forces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HertzianPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPair_forces" "', argument " "1"" of type '" "HertzianPair *""'"); 
  }
  arg1 = reinterpret_cast< HertzianPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HertzianPair_forces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (arg1)->forces(arg2);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianPair_fill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HertzianPair *arg1 = (HertzianPair *) 0 ;
  Box *arg2 = (Box *) 0 ;
  forcepairx *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:HertzianPair_fill",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HertzianPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPair_fill" "', argument " "1"" of type '" "HertzianPair *""'"); 
  }
  arg1 = reinterpret_cast< HertzianPair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HertzianPair_fill" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_forcepairx,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HertzianPair_fill" "', argument " "3"" of type '" "forcepairx &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HertzianPair_fill" "', argument " "3"" of type '" "forcepairx &""'"); 
  }
  arg3 = reinterpret_cast< forcepairx * >(argp3);
  (arg1)->fill(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HertzianPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HertzianPair *arg1 = (HertzianPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_HertzianPair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HertzianPair, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HertzianPair" "', argument " "1"" of type '" "HertzianPair *""'"); 
  }
  arg1 = reinterpret_cast< HertzianPair * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HertzianPair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HertzianPair, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LJsimple__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  SwigValueWrapper< std::vector< LJatom > > arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  LJsimple *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LJsimple",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LJsimple" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_LJatom_std__allocatorT_LJatom_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LJsimple" "', argument " "2"" of type '" "std::vector< LJatom >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LJsimple" "', argument " "2"" of type '" "std::vector< LJatom >""'");
    } else {
      std::vector< LJatom > * temp = reinterpret_cast< std::vector< LJatom > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (LJsimple *)new LJsimple(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJsimple, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJsimple__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  LJsimple *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LJsimple",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LJsimple" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  result = (LJsimple *)new LJsimple(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LJsimple, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LJsimple(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LJsimple__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_LJatom_std__allocatorT_LJatom_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LJsimple__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LJsimple'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LJsimple::LJsimple(flt,std::vector< LJatom >)\n"
    "    LJsimple::LJsimple(flt)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LJsimple_add__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJsimple *arg1 = (LJsimple *) 0 ;
  SwigValueWrapper< LJatom > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJsimple_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJsimple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJsimple_add" "', argument " "1"" of type '" "LJsimple *""'"); 
  }
  arg1 = reinterpret_cast< LJsimple * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJatom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJsimple_add" "', argument " "2"" of type '" "LJatom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJsimple_add" "', argument " "2"" of type '" "LJatom""'");
    } else {
      LJatom * temp = reinterpret_cast< LJatom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->add(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJsimple_add__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJsimple *arg1 = (LJsimple *) 0 ;
  atom *arg2 = (atom *) 0 ;
  flt arg3 ;
  flt arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:LJsimple_add",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJsimple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJsimple_add" "', argument " "1"" of type '" "LJsimple *""'"); 
  }
  arg1 = reinterpret_cast< LJsimple * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJsimple_add" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LJsimple_add" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "LJsimple_add" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  (arg1)->add(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJsimple_add(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_LJsimple, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_LJatom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LJsimple_add__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_LJsimple, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_atom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_LJsimple_add__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LJsimple_add'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LJsimple::add(LJatom)\n"
    "    LJsimple::add(atom *,flt,flt)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LJsimple_ignore__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJsimple *arg1 = (LJsimple *) 0 ;
  atomid arg2 ;
  atomid arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJsimple_ignore",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJsimple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJsimple_ignore" "', argument " "1"" of type '" "LJsimple *""'"); 
  }
  arg1 = reinterpret_cast< LJsimple * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJsimple_ignore" "', argument " "2"" of type '" "atomid""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJsimple_ignore" "', argument " "2"" of type '" "atomid""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LJsimple_ignore" "', argument " "3"" of type '" "atomid""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJsimple_ignore" "', argument " "3"" of type '" "atomid""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->ignore(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJsimple_ignore__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJsimple *arg1 = (LJsimple *) 0 ;
  atom *arg2 = (atom *) 0 ;
  atom *arg3 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJsimple_ignore",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJsimple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJsimple_ignore" "', argument " "1"" of type '" "LJsimple *""'"); 
  }
  arg1 = reinterpret_cast< LJsimple * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJsimple_ignore" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LJsimple_ignore" "', argument " "3"" of type '" "atom *""'"); 
  }
  arg3 = reinterpret_cast< atom * >(argp3);
  (arg1)->ignore(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJsimple_ignore(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_LJsimple, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_atomid, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_atomid, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LJsimple_ignore__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_LJsimple, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_atom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_atom, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LJsimple_ignore__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LJsimple_ignore'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LJsimple::ignore(atomid,atomid)\n"
    "    LJsimple::ignore(atom *,atom *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LJsimple_ignore_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJsimple *arg1 = (LJsimple *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJsimple_ignore_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJsimple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJsimple_ignore_size" "', argument " "1"" of type '" "LJsimple const *""'"); 
  }
  arg1 = reinterpret_cast< LJsimple * >(argp1);
  result = (uint)((LJsimple const *)arg1)->ignore_size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJsimple_atoms_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJsimple *arg1 = (LJsimple *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJsimple_atoms_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJsimple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJsimple_atoms_size" "', argument " "1"" of type '" "LJsimple const *""'"); 
  }
  arg1 = reinterpret_cast< LJsimple * >(argp1);
  result = (uint)((LJsimple const *)arg1)->atoms_size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJsimple_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJsimple *arg1 = (LJsimple *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJsimple_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJsimple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJsimple_energy" "', argument " "1"" of type '" "LJsimple *""'"); 
  }
  arg1 = reinterpret_cast< LJsimple * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJsimple_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJsimple_pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJsimple *arg1 = (LJsimple *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJsimple_pressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJsimple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJsimple_pressure" "', argument " "1"" of type '" "LJsimple *""'"); 
  }
  arg1 = reinterpret_cast< LJsimple * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJsimple_pressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->pressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJsimple_setForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJsimple *arg1 = (LJsimple *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJsimple_setForces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJsimple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJsimple_setForces" "', argument " "1"" of type '" "LJsimple *""'"); 
  }
  arg1 = reinterpret_cast< LJsimple * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJsimple_setForces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->setForces(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LJsimple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LJsimple *arg1 = (LJsimple *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJsimple",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LJsimple, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJsimple" "', argument " "1"" of type '" "LJsimple *""'"); 
  }
  arg1 = reinterpret_cast< LJsimple * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJsimple_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LJsimple, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Charges__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  flt arg2 ;
  SwigValueWrapper< std::vector< Charged > > arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Charges *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Charges",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Charges" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Charges" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Charged_std__allocatorT_Charged_t_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Charges" "', argument " "3"" of type '" "std::vector< Charged >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Charges" "', argument " "3"" of type '" "std::vector< Charged >""'");
    } else {
      std::vector< Charged > * temp = reinterpret_cast< std::vector< Charged > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (Charges *)new Charges(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Charges, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Charges__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  flt arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Charges *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Charges",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Charges" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Charges" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  result = (Charges *)new Charges(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Charges, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Charges__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Charges *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Charges",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Charges" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  result = (Charges *)new Charges(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Charges, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Charges(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Charges__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Charges__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_Charged_std__allocatorT_Charged_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Charges__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Charges'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Charges::Charges(flt,flt,std::vector< Charged >)\n"
    "    Charges::Charges(flt,flt)\n"
    "    Charges::Charges(flt)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Charges_add__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Charges *arg1 = (Charges *) 0 ;
  Charged arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Charges_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Charges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Charges_add" "', argument " "1"" of type '" "Charges *""'"); 
  }
  arg1 = reinterpret_cast< Charges * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Charged,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Charges_add" "', argument " "2"" of type '" "Charged""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Charges_add" "', argument " "2"" of type '" "Charged""'");
    } else {
      Charged * temp = reinterpret_cast< Charged * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->add(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Charges_add__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Charges *arg1 = (Charges *) 0 ;
  atom *arg2 = (atom *) 0 ;
  flt arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Charges_add",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Charges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Charges_add" "', argument " "1"" of type '" "Charges *""'"); 
  }
  arg1 = reinterpret_cast< Charges * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Charges_add" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Charges_add" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  (arg1)->add(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Charges_add(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Charges, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Charged, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Charges_add__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Charges, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_atom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Charges_add__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Charges_add'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Charges::add(Charged)\n"
    "    Charges::add(atom *,flt)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Charges_ignore__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Charges *arg1 = (Charges *) 0 ;
  atomid arg2 ;
  atomid arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Charges_ignore",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Charges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Charges_ignore" "', argument " "1"" of type '" "Charges *""'"); 
  }
  arg1 = reinterpret_cast< Charges * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Charges_ignore" "', argument " "2"" of type '" "atomid""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Charges_ignore" "', argument " "2"" of type '" "atomid""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_atomid,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Charges_ignore" "', argument " "3"" of type '" "atomid""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Charges_ignore" "', argument " "3"" of type '" "atomid""'");
    } else {
      atomid * temp = reinterpret_cast< atomid * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->ignore(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Charges_ignore__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Charges *arg1 = (Charges *) 0 ;
  atom *arg2 = (atom *) 0 ;
  atom *arg3 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Charges_ignore",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Charges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Charges_ignore" "', argument " "1"" of type '" "Charges *""'"); 
  }
  arg1 = reinterpret_cast< Charges * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Charges_ignore" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Charges_ignore" "', argument " "3"" of type '" "atom *""'"); 
  }
  arg3 = reinterpret_cast< atom * >(argp3);
  (arg1)->ignore(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Charges_ignore(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Charges, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_atomid, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_atomid, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Charges_ignore__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Charges, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_atom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_atom, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Charges_ignore__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Charges_ignore'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Charges::ignore(atomid,atomid)\n"
    "    Charges::ignore(atom *,atom *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Charges_ignore_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Charges *arg1 = (Charges *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Charges_ignore_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Charges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Charges_ignore_size" "', argument " "1"" of type '" "Charges const *""'"); 
  }
  arg1 = reinterpret_cast< Charges * >(argp1);
  result = (uint)((Charges const *)arg1)->ignore_size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Charges_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Charges *arg1 = (Charges *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Charges_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Charges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Charges_size" "', argument " "1"" of type '" "Charges const *""'"); 
  }
  arg1 = reinterpret_cast< Charges * >(argp1);
  result = (uint)((Charges const *)arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Charges_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Charges *arg1 = (Charges *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Charges_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Charges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Charges_energy" "', argument " "1"" of type '" "Charges *""'"); 
  }
  arg1 = reinterpret_cast< Charges * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Charges_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Charges_pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Charges *arg1 = (Charges *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Charges_pressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Charges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Charges_pressure" "', argument " "1"" of type '" "Charges *""'"); 
  }
  arg1 = reinterpret_cast< Charges * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Charges_pressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->pressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Charges_setForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Charges *arg1 = (Charges *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Charges_setForces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Charges, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Charges_setForces" "', argument " "1"" of type '" "Charges *""'"); 
  }
  arg1 = reinterpret_cast< Charges * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Charges_setForces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->setForces(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Charges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Charges *arg1 = (Charges *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Charges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Charges, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Charges" "', argument " "1"" of type '" "Charges *""'"); 
  }
  arg1 = reinterpret_cast< Charges * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Charges_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Charges, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_toBuffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::vector< Vector2< double > *,std::allocator< Vector2< double > * > > > arg1 ;
  double *arg2 = (double *) 0 ;
  size_t arg3 ;
  int res2 ;
  Py_ssize_t size2 = 0 ;
  void *buf2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:toBuffer",&obj0,&obj1)) SWIG_fail;
  {
    std::vector<Vector2< double >*,std::allocator< Vector2< double > * > > *ptr = (std::vector<Vector2< double >*,std::allocator< Vector2< double > * > > *)0;
    int res = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "toBuffer" "', argument " "1"" of type '" "std::vector< Vec *,std::allocator< Vec * > >""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = PyObject_AsWriteBuffer(obj1, &buf2, &size2);
    if (res2<0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "toBuffer" "', argument " "2"" of type '" "(double *buffer, size_t sizet)""'");
    }
    arg2 = (double *) buf2;
    arg3 = (size_t) (size2/sizeof(double));
  }
  result = (bool)toBuffer(arg1,arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jamminglist_assigned_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jamminglist *arg1 = (jamminglist *) 0 ;
  std::vector< uint > *arg2 = (std::vector< uint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:jamminglist_assigned_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jamminglist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jamminglist_assigned_set" "', argument " "1"" of type '" "jamminglist *""'"); 
  }
  arg1 = reinterpret_cast< jamminglist * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jamminglist_assigned_set" "', argument " "2"" of type '" "std::vector< uint > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< uint > * >(argp2);
  if (arg1) (arg1)->assigned = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jamminglist_assigned_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jamminglist *arg1 = (jamminglist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< uint > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:jamminglist_assigned_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jamminglist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jamminglist_assigned_get" "', argument " "1"" of type '" "jamminglist *""'"); 
  }
  arg1 = reinterpret_cast< jamminglist * >(argp1);
  result = (std::vector< uint > *)& ((arg1)->assigned);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jamminglist_distsq_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jamminglist *arg1 = (jamminglist *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:jamminglist_distsq_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jamminglist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jamminglist_distsq_set" "', argument " "1"" of type '" "jamminglist *""'"); 
  }
  arg1 = reinterpret_cast< jamminglist * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "jamminglist_distsq_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->distsq = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jamminglist_distsq_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jamminglist *arg1 = (jamminglist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:jamminglist_distsq_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jamminglist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jamminglist_distsq_get" "', argument " "1"" of type '" "jamminglist *""'"); 
  }
  arg1 = reinterpret_cast< jamminglist * >(argp1);
  result = (flt) ((arg1)->distsq);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_jamminglist__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jamminglist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_jamminglist")) SWIG_fail;
  result = (jamminglist *)new jamminglist();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_jamminglist, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_jamminglist__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jamminglist *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  jamminglist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_jamminglist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_jamminglist,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_jamminglist" "', argument " "1"" of type '" "jamminglist const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_jamminglist" "', argument " "1"" of type '" "jamminglist const &""'"); 
  }
  arg1 = reinterpret_cast< jamminglist * >(argp1);
  result = (jamminglist *)new jamminglist((jamminglist const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_jamminglist, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_jamminglist__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jamminglist *arg1 = 0 ;
  uint arg2 ;
  flt arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  jamminglist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_jamminglist",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_jamminglist,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_jamminglist" "', argument " "1"" of type '" "jamminglist const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_jamminglist" "', argument " "1"" of type '" "jamminglist const &""'"); 
  }
  arg1 = reinterpret_cast< jamminglist * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_jamminglist" "', argument " "2"" of type '" "uint""'");
  } 
  arg2 = static_cast< uint >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_jamminglist" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  result = (jamminglist *)new jamminglist((jamminglist const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_jamminglist, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_jamminglist(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_jamminglist__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_jamminglist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_jamminglist__SWIG_1(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_jamminglist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_jamminglist__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_jamminglist'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    jamminglist::jamminglist()\n"
    "    jamminglist::jamminglist(jamminglist const &)\n"
    "    jamminglist::jamminglist(jamminglist const &,uint,flt)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_jamminglist_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jamminglist *arg1 = (jamminglist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:jamminglist_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jamminglist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jamminglist_size" "', argument " "1"" of type '" "jamminglist const *""'"); 
  }
  arg1 = reinterpret_cast< jamminglist * >(argp1);
  result = (uint)((jamminglist const *)arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jamminglist___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jamminglist *arg1 = (jamminglist *) 0 ;
  jamminglist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:jamminglist___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jamminglist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jamminglist___lt__" "', argument " "1"" of type '" "jamminglist *""'"); 
  }
  arg1 = reinterpret_cast< jamminglist * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_jamminglist,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jamminglist___lt__" "', argument " "2"" of type '" "jamminglist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jamminglist___lt__" "', argument " "2"" of type '" "jamminglist const &""'"); 
  }
  arg2 = reinterpret_cast< jamminglist * >(argp2);
  result = (bool)(arg1)->operator <((jamminglist const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_jamminglist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jamminglist *arg1 = (jamminglist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_jamminglist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jamminglist, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_jamminglist" "', argument " "1"" of type '" "jamminglist *""'"); 
  }
  arg1 = reinterpret_cast< jamminglist * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *jamminglist_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_jamminglist, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_jammingtree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  std::vector< Vec > *arg2 = 0 ;
  std::vector< Vec > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  jammingtree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_jammingtree",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_jammingtree" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_jammingtree" "', argument " "2"" of type '" "std::vector< Vec > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_jammingtree" "', argument " "2"" of type '" "std::vector< Vec > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Vec > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_jammingtree" "', argument " "3"" of type '" "std::vector< Vec > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_jammingtree" "', argument " "3"" of type '" "std::vector< Vec > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Vec > * >(argp3);
  result = (jammingtree *)new jammingtree(arg1,*arg2,*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_jammingtree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jammingtree_expand__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtree *arg1 = (jammingtree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:jammingtree_expand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jammingtree_expand" "', argument " "1"" of type '" "jammingtree *""'"); 
  }
  arg1 = reinterpret_cast< jammingtree * >(argp1);
  result = (bool)(arg1)->expand();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jammingtree_expand__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtree *arg1 = (jammingtree *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:jammingtree_expand",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jammingtree_expand" "', argument " "1"" of type '" "jammingtree *""'"); 
  }
  arg1 = reinterpret_cast< jammingtree * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "jammingtree_expand" "', argument " "2"" of type '" "uint""'");
  } 
  arg2 = static_cast< uint >(val2);
  result = (bool)(arg1)->expand(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jammingtree_expand(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jammingtree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_jammingtree_expand__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jammingtree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_jammingtree_expand__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'jammingtree_expand'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    jammingtree::expand()\n"
    "    jammingtree::expand(uint)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_jammingtree_mylist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtree *arg1 = (jammingtree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< jamminglist > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:jammingtree_mylist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jammingtree_mylist" "', argument " "1"" of type '" "jammingtree *""'"); 
  }
  arg1 = reinterpret_cast< jammingtree * >(argp1);
  result = (std::list< jamminglist > *) &(arg1)->mylist();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jammingtree_copylist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtree *arg1 = (jammingtree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< jamminglist > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:jammingtree_copylist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jammingtree_copylist" "', argument " "1"" of type '" "jammingtree *""'"); 
  }
  arg1 = reinterpret_cast< jammingtree * >(argp1);
  result = (arg1)->copylist();
  resultobj = swig::from(static_cast< std::list<jamminglist,std::allocator< jamminglist > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jammingtree_curbest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtree *arg1 = (jammingtree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  jamminglist result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:jammingtree_curbest",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jammingtree_curbest" "', argument " "1"" of type '" "jammingtree *""'"); 
  }
  arg1 = reinterpret_cast< jammingtree * >(argp1);
  result = (arg1)->curbest();
  resultobj = SWIG_NewPointerObj((new jamminglist(static_cast< const jamminglist& >(result))), SWIGTYPE_p_jamminglist, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jammingtree_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtree *arg1 = (jammingtree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:jammingtree_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jammingtree_size" "', argument " "1"" of type '" "jammingtree *""'"); 
  }
  arg1 = reinterpret_cast< jammingtree * >(argp1);
  result = (uint)(arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_jammingtree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtree *arg1 = (jammingtree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_jammingtree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtree, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_jammingtree" "', argument " "1"" of type '" "jammingtree *""'"); 
  }
  arg1 = reinterpret_cast< jammingtree * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *jammingtree_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_jammingtree, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_jamminglistrot_rotation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jamminglistrot *arg1 = (jamminglistrot *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:jamminglistrot_rotation_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jamminglistrot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jamminglistrot_rotation_set" "', argument " "1"" of type '" "jamminglistrot *""'"); 
  }
  arg1 = reinterpret_cast< jamminglistrot * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "jamminglistrot_rotation_set" "', argument " "2"" of type '" "uint""'");
  } 
  arg2 = static_cast< uint >(val2);
  if (arg1) (arg1)->rotation = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jamminglistrot_rotation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jamminglistrot *arg1 = (jamminglistrot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:jamminglistrot_rotation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jamminglistrot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jamminglistrot_rotation_get" "', argument " "1"" of type '" "jamminglistrot *""'"); 
  }
  arg1 = reinterpret_cast< jamminglistrot * >(argp1);
  result = (uint) ((arg1)->rotation);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_jamminglistrot__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jamminglistrot *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_jamminglistrot")) SWIG_fail;
  result = (jamminglistrot *)new jamminglistrot();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_jamminglistrot, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_jamminglistrot__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  jamminglistrot *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_jamminglistrot",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_jamminglistrot" "', argument " "1"" of type '" "uint""'");
  } 
  arg1 = static_cast< uint >(val1);
  result = (jamminglistrot *)new jamminglistrot(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_jamminglistrot, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_jamminglistrot__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jamminglistrot *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  jamminglistrot *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_jamminglistrot",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_jamminglistrot,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_jamminglistrot" "', argument " "1"" of type '" "jamminglistrot const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_jamminglistrot" "', argument " "1"" of type '" "jamminglistrot const &""'"); 
  }
  arg1 = reinterpret_cast< jamminglistrot * >(argp1);
  result = (jamminglistrot *)new jamminglistrot((jamminglistrot const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_jamminglistrot, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_jamminglistrot__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jamminglistrot *arg1 = 0 ;
  uint arg2 ;
  flt arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  jamminglistrot *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_jamminglistrot",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_jamminglistrot,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_jamminglistrot" "', argument " "1"" of type '" "jamminglistrot const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_jamminglistrot" "', argument " "1"" of type '" "jamminglistrot const &""'"); 
  }
  arg1 = reinterpret_cast< jamminglistrot * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_jamminglistrot" "', argument " "2"" of type '" "uint""'");
  } 
  arg2 = static_cast< uint >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_jamminglistrot" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  result = (jamminglistrot *)new jamminglistrot((jamminglistrot const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_jamminglistrot, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_jamminglistrot(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_jamminglistrot__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_jamminglistrot, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_jamminglistrot__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_jamminglistrot__SWIG_1(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_jamminglistrot, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_jamminglistrot__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_jamminglistrot'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    jamminglistrot::jamminglistrot()\n"
    "    jamminglistrot::jamminglistrot(uint)\n"
    "    jamminglistrot::jamminglistrot(jamminglistrot const &)\n"
    "    jamminglistrot::jamminglistrot(jamminglistrot const &,uint,flt)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_jamminglistrot___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jamminglistrot *arg1 = (jamminglistrot *) 0 ;
  jamminglistrot *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:jamminglistrot___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jamminglistrot, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jamminglistrot___lt__" "', argument " "1"" of type '" "jamminglistrot *""'"); 
  }
  arg1 = reinterpret_cast< jamminglistrot * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_jamminglistrot,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jamminglistrot___lt__" "', argument " "2"" of type '" "jamminglistrot const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jamminglistrot___lt__" "', argument " "2"" of type '" "jamminglistrot const &""'"); 
  }
  arg2 = reinterpret_cast< jamminglistrot * >(argp2);
  result = (bool)(arg1)->operator <((jamminglistrot const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_jamminglistrot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jamminglistrot *arg1 = (jamminglistrot *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_jamminglistrot",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jamminglistrot, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_jamminglistrot" "', argument " "1"" of type '" "jamminglistrot *""'"); 
  }
  arg1 = reinterpret_cast< jamminglistrot * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *jamminglistrot_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_jamminglistrot, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_jammingtree2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  std::vector< Vec > *arg2 = 0 ;
  std::vector< Vec > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  jammingtree2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_jammingtree2",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_jammingtree2" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_jammingtree2" "', argument " "2"" of type '" "std::vector< Vec > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_jammingtree2" "', argument " "2"" of type '" "std::vector< Vec > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Vec > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_jammingtree2" "', argument " "3"" of type '" "std::vector< Vec > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_jammingtree2" "', argument " "3"" of type '" "std::vector< Vec > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Vec > * >(argp3);
  result = (jammingtree2 *)new jammingtree2(arg1,*arg2,*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_jammingtree2, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jammingtree2_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtree2 *arg1 = (jammingtree2 *) 0 ;
  jamminglistrot *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:jammingtree2_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtree2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jammingtree2_distance" "', argument " "1"" of type '" "jammingtree2 *""'"); 
  }
  arg1 = reinterpret_cast< jammingtree2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_jamminglistrot,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jammingtree2_distance" "', argument " "2"" of type '" "jamminglistrot &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jammingtree2_distance" "', argument " "2"" of type '" "jamminglistrot &""'"); 
  }
  arg2 = reinterpret_cast< jamminglistrot * >(argp2);
  result = (flt)(arg1)->distance(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jammingtree2_expand__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtree2 *arg1 = (jammingtree2 *) 0 ;
  jamminglistrot arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< jamminglistrot > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:jammingtree2_expand",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtree2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jammingtree2_expand" "', argument " "1"" of type '" "jammingtree2 *""'"); 
  }
  arg1 = reinterpret_cast< jammingtree2 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_jamminglistrot,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jammingtree2_expand" "', argument " "2"" of type '" "jamminglistrot""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jammingtree2_expand" "', argument " "2"" of type '" "jamminglistrot""'");
    } else {
      jamminglistrot * temp = reinterpret_cast< jamminglistrot * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->expand(arg2);
  resultobj = swig::from(static_cast< std::list<jamminglistrot,std::allocator< jamminglistrot > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jammingtree2_expand__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtree2 *arg1 = (jammingtree2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:jammingtree2_expand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtree2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jammingtree2_expand" "', argument " "1"" of type '" "jammingtree2 *""'"); 
  }
  arg1 = reinterpret_cast< jammingtree2 * >(argp1);
  result = (bool)(arg1)->expand();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jammingtree2_expand__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtree2 *arg1 = (jammingtree2 *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:jammingtree2_expand",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtree2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jammingtree2_expand" "', argument " "1"" of type '" "jammingtree2 *""'"); 
  }
  arg1 = reinterpret_cast< jammingtree2 * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "jammingtree2_expand" "', argument " "2"" of type '" "uint""'");
  } 
  arg2 = static_cast< uint >(val2);
  result = (bool)(arg1)->expand(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jammingtree2_expand(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jammingtree2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_jammingtree2_expand__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jammingtree2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_jamminglistrot, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_jammingtree2_expand__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jammingtree2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_jammingtree2_expand__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'jammingtree2_expand'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    jammingtree2::expand(jamminglistrot)\n"
    "    jammingtree2::expand()\n"
    "    jammingtree2::expand(uint)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_jammingtree2_expandto(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtree2 *arg1 = (jammingtree2 *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:jammingtree2_expandto",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtree2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jammingtree2_expandto" "', argument " "1"" of type '" "jammingtree2 *""'"); 
  }
  arg1 = reinterpret_cast< jammingtree2 * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "jammingtree2_expandto" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  result = (bool)(arg1)->expandto(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jammingtree2_mylist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtree2 *arg1 = (jammingtree2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< jamminglistrot > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:jammingtree2_mylist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtree2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jammingtree2_mylist" "', argument " "1"" of type '" "jammingtree2 *""'"); 
  }
  arg1 = reinterpret_cast< jammingtree2 * >(argp1);
  result = (std::list< jamminglistrot > *) &(arg1)->mylist();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jammingtree2_copylist__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtree2 *arg1 = (jammingtree2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< jamminglistrot > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:jammingtree2_copylist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtree2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jammingtree2_copylist" "', argument " "1"" of type '" "jammingtree2 *""'"); 
  }
  arg1 = reinterpret_cast< jammingtree2 * >(argp1);
  result = (arg1)->copylist();
  resultobj = swig::from(static_cast< std::list<jamminglistrot,std::allocator< jamminglistrot > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jammingtree2_copylist__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtree2 *arg1 = (jammingtree2 *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< jamminglistrot > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:jammingtree2_copylist",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtree2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jammingtree2_copylist" "', argument " "1"" of type '" "jammingtree2 *""'"); 
  }
  arg1 = reinterpret_cast< jammingtree2 * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "jammingtree2_copylist" "', argument " "2"" of type '" "uint""'");
  } 
  arg2 = static_cast< uint >(val2);
  result = (arg1)->copylist(arg2);
  resultobj = swig::from(static_cast< std::list<jamminglistrot,std::allocator< jamminglistrot > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jammingtree2_copylist(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jammingtree2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_jammingtree2_copylist__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jammingtree2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_jammingtree2_copylist__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'jammingtree2_copylist'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    jammingtree2::copylist()\n"
    "    jammingtree2::copylist(uint)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_jammingtree2_curbest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtree2 *arg1 = (jammingtree2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  jamminglistrot result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:jammingtree2_curbest",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtree2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jammingtree2_curbest" "', argument " "1"" of type '" "jammingtree2 *""'"); 
  }
  arg1 = reinterpret_cast< jammingtree2 * >(argp1);
  result = (arg1)->curbest();
  resultobj = SWIG_NewPointerObj((new jamminglistrot(static_cast< const jamminglistrot& >(result))), SWIGTYPE_p_jamminglistrot, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jammingtree2_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtree2 *arg1 = (jammingtree2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:jammingtree2_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtree2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jammingtree2_size" "', argument " "1"" of type '" "jammingtree2 *""'"); 
  }
  arg1 = reinterpret_cast< jammingtree2 * >(argp1);
  result = (uint)(arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jammingtree2_locationsB__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtree2 *arg1 = (jammingtree2 *) 0 ;
  jamminglistrot arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Vec > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:jammingtree2_locationsB",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtree2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jammingtree2_locationsB" "', argument " "1"" of type '" "jammingtree2 *""'"); 
  }
  arg1 = reinterpret_cast< jammingtree2 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_jamminglistrot,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jammingtree2_locationsB" "', argument " "2"" of type '" "jamminglistrot""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jammingtree2_locationsB" "', argument " "2"" of type '" "jamminglistrot""'");
    } else {
      jamminglistrot * temp = reinterpret_cast< jamminglistrot * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->locationsB(arg2);
  resultobj = swig::from(static_cast< std::vector<Vector2< double >,std::allocator< Vector2< double > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jammingtree2_locationsB__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtree2 *arg1 = (jammingtree2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Vec > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:jammingtree2_locationsB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtree2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jammingtree2_locationsB" "', argument " "1"" of type '" "jammingtree2 *""'"); 
  }
  arg1 = reinterpret_cast< jammingtree2 * >(argp1);
  result = (arg1)->locationsB();
  resultobj = swig::from(static_cast< std::vector<Vector2< double >,std::allocator< Vector2< double > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jammingtree2_locationsB(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jammingtree2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_jammingtree2_locationsB__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jammingtree2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_jamminglistrot, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_jammingtree2_locationsB__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'jammingtree2_locationsB'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    jammingtree2::locationsB(jamminglistrot)\n"
    "    jammingtree2::locationsB()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_jammingtree2_locationsA__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtree2 *arg1 = (jammingtree2 *) 0 ;
  jamminglistrot arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Vec > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:jammingtree2_locationsA",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtree2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jammingtree2_locationsA" "', argument " "1"" of type '" "jammingtree2 *""'"); 
  }
  arg1 = reinterpret_cast< jammingtree2 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_jamminglistrot,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jammingtree2_locationsA" "', argument " "2"" of type '" "jamminglistrot""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jammingtree2_locationsA" "', argument " "2"" of type '" "jamminglistrot""'");
    } else {
      jamminglistrot * temp = reinterpret_cast< jamminglistrot * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->locationsA(arg2);
  resultobj = swig::from(static_cast< std::vector<Vector2< double >,std::allocator< Vector2< double > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jammingtree2_locationsA__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtree2 *arg1 = (jammingtree2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Vec > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:jammingtree2_locationsA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtree2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jammingtree2_locationsA" "', argument " "1"" of type '" "jammingtree2 *""'"); 
  }
  arg1 = reinterpret_cast< jammingtree2 * >(argp1);
  result = (arg1)->locationsA();
  resultobj = swig::from(static_cast< std::vector<Vector2< double >,std::allocator< Vector2< double > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jammingtree2_locationsA(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jammingtree2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_jammingtree2_locationsA__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jammingtree2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_jamminglistrot, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_jammingtree2_locationsA__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'jammingtree2_locationsA'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    jammingtree2::locationsA(jamminglistrot)\n"
    "    jammingtree2::locationsA()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_jammingtree2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtree2 *arg1 = (jammingtree2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_jammingtree2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtree2, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_jammingtree2" "', argument " "1"" of type '" "jammingtree2 *""'"); 
  }
  arg1 = reinterpret_cast< jammingtree2 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *jammingtree2_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_jammingtree2, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_jammingtreeBD__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  std::vector< Vec > *arg2 = 0 ;
  std::vector< Vec > *arg3 = 0 ;
  uint arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  jammingtreeBD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_jammingtreeBD",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_jammingtreeBD" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_jammingtreeBD" "', argument " "2"" of type '" "std::vector< Vec > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_jammingtreeBD" "', argument " "2"" of type '" "std::vector< Vec > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Vec > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_jammingtreeBD" "', argument " "3"" of type '" "std::vector< Vec > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_jammingtreeBD" "', argument " "3"" of type '" "std::vector< Vec > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Vec > * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_jammingtreeBD" "', argument " "4"" of type '" "uint""'");
  } 
  arg4 = static_cast< uint >(val4);
  result = (jammingtreeBD *)new jammingtreeBD(arg1,*arg2,*arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_jammingtreeBD, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_jammingtreeBD__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  std::vector< Vec > *arg2 = 0 ;
  std::vector< Vec > *arg3 = 0 ;
  uint arg4 ;
  uint arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  jammingtreeBD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_jammingtreeBD",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_jammingtreeBD" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_jammingtreeBD" "', argument " "2"" of type '" "std::vector< Vec > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_jammingtreeBD" "', argument " "2"" of type '" "std::vector< Vec > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Vec > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_jammingtreeBD" "', argument " "3"" of type '" "std::vector< Vec > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_jammingtreeBD" "', argument " "3"" of type '" "std::vector< Vec > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Vec > * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_jammingtreeBD" "', argument " "4"" of type '" "uint""'");
  } 
  arg4 = static_cast< uint >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_jammingtreeBD" "', argument " "5"" of type '" "uint""'");
  } 
  arg5 = static_cast< uint >(val5);
  result = (jammingtreeBD *)new jammingtreeBD(arg1,*arg2,*arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_jammingtreeBD, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_jammingtreeBD(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_jammingtreeBD__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_jammingtreeBD__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_jammingtreeBD'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    jammingtreeBD::jammingtreeBD(Box *,std::vector< Vec > &,std::vector< Vec > &,uint)\n"
    "    jammingtreeBD::jammingtreeBD(Box *,std::vector< Vec > &,std::vector< Vec > &,uint,uint)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_jammingtreeBD_expand__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtreeBD *arg1 = (jammingtreeBD *) 0 ;
  jamminglistrot arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< jamminglistrot > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:jammingtreeBD_expand",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtreeBD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jammingtreeBD_expand" "', argument " "1"" of type '" "jammingtreeBD *""'"); 
  }
  arg1 = reinterpret_cast< jammingtreeBD * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_jamminglistrot,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jammingtreeBD_expand" "', argument " "2"" of type '" "jamminglistrot""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jammingtreeBD_expand" "', argument " "2"" of type '" "jamminglistrot""'");
    } else {
      jamminglistrot * temp = reinterpret_cast< jamminglistrot * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->expand(arg2);
  resultobj = swig::from(static_cast< std::list<jamminglistrot,std::allocator< jamminglistrot > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jammingtreeBD_expand__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtreeBD *arg1 = (jammingtreeBD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:jammingtreeBD_expand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtreeBD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jammingtreeBD_expand" "', argument " "1"" of type '" "jammingtreeBD *""'"); 
  }
  arg1 = reinterpret_cast< jammingtreeBD * >(argp1);
  result = (bool)(arg1)->expand();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jammingtreeBD_expand__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtreeBD *arg1 = (jammingtreeBD *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:jammingtreeBD_expand",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtreeBD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jammingtreeBD_expand" "', argument " "1"" of type '" "jammingtreeBD *""'"); 
  }
  arg1 = reinterpret_cast< jammingtreeBD * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "jammingtreeBD_expand" "', argument " "2"" of type '" "uint""'");
  } 
  arg2 = static_cast< uint >(val2);
  result = (bool)(arg1)->expand(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_jammingtreeBD_expand(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jammingtreeBD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_jammingtreeBD_expand__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jammingtreeBD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_jamminglistrot, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_jammingtreeBD_expand__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jammingtreeBD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_jammingtreeBD_expand__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'jammingtreeBD_expand'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    jammingtreeBD::expand(jamminglistrot)\n"
    "    jammingtreeBD::expand()\n"
    "    jammingtreeBD::expand(uint)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_jammingtreeBD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  jammingtreeBD *arg1 = (jammingtreeBD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_jammingtreeBD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_jammingtreeBD, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_jammingtreeBD" "', argument " "1"" of type '" "jammingtreeBD *""'"); 
  }
  arg1 = reinterpret_cast< jammingtreeBD * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *jammingtreeBD_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_jammingtreeBD, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_constraint_apply(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  constraint *arg1 = (constraint *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:constraint_apply",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_constraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraint_apply" "', argument " "1"" of type '" "constraint *""'"); 
  }
  arg1 = reinterpret_cast< constraint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "constraint_apply" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->apply(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_constraint_ndof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  constraint *arg1 = (constraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:constraint_ndof",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_constraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constraint_ndof" "', argument " "1"" of type '" "constraint *""'"); 
  }
  arg1 = reinterpret_cast< constraint * >(argp1);
  result = (int)(arg1)->ndof();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_constraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  constraint *arg1 = (constraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_constraint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_constraint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_constraint" "', argument " "1"" of type '" "constraint *""'"); 
  }
  arg1 = reinterpret_cast< constraint * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *constraint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_constraint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_coordConstraint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  Vec arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  coordConstraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_coordConstraint",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_coordConstraint" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_coordConstraint" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_coordConstraint" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_coordConstraint" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_coordConstraint" "', argument " "5"" of type '" "Vec""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_coordConstraint" "', argument " "5"" of type '" "Vec""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = (coordConstraint *)new coordConstraint(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_coordConstraint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_coordConstraint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  coordConstraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_coordConstraint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_coordConstraint" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_coordConstraint" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_coordConstraint" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_coordConstraint" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (coordConstraint *)new coordConstraint(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_coordConstraint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_coordConstraint__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  coordConstraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_coordConstraint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_coordConstraint" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  result = (coordConstraint *)new coordConstraint(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_coordConstraint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_coordConstraint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_coordConstraint__SWIG_2(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_coordConstraint__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_Vector2T_double_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_coordConstraint__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_coordConstraint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    coordConstraint::coordConstraint(atom *,bool,bool,bool,Vec)\n"
    "    coordConstraint::coordConstraint(atom *,bool,bool,bool)\n"
    "    coordConstraint::coordConstraint(atom *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_coordConstraint_ndof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  coordConstraint *arg1 = (coordConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:coordConstraint_ndof",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_coordConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "coordConstraint_ndof" "', argument " "1"" of type '" "coordConstraint *""'"); 
  }
  arg1 = reinterpret_cast< coordConstraint * >(argp1);
  result = (int)(arg1)->ndof();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_coordConstraint_apply(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  coordConstraint *arg1 = (coordConstraint *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:coordConstraint_apply",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_coordConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "coordConstraint_apply" "', argument " "1"" of type '" "coordConstraint *""'"); 
  }
  arg1 = reinterpret_cast< coordConstraint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "coordConstraint_apply" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->apply(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_coordConstraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  coordConstraint *arg1 = (coordConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_coordConstraint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_coordConstraint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_coordConstraint" "', argument " "1"" of type '" "coordConstraint *""'"); 
  }
  arg1 = reinterpret_cast< coordConstraint * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *coordConstraint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_coordConstraint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_coordCOMConstraint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = (atomgroup *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  Vec arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  coordCOMConstraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_coordCOMConstraint",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_coordCOMConstraint" "', argument " "1"" of type '" "atomgroup *""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_coordCOMConstraint" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_coordCOMConstraint" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_coordCOMConstraint" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_coordCOMConstraint" "', argument " "5"" of type '" "Vec""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_coordCOMConstraint" "', argument " "5"" of type '" "Vec""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = (coordCOMConstraint *)new coordCOMConstraint(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_coordCOMConstraint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_coordCOMConstraint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = (atomgroup *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  coordCOMConstraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_coordCOMConstraint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_coordCOMConstraint" "', argument " "1"" of type '" "atomgroup *""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_coordCOMConstraint" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_coordCOMConstraint" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_coordCOMConstraint" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (coordCOMConstraint *)new coordCOMConstraint(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_coordCOMConstraint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_coordCOMConstraint__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = (atomgroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  coordCOMConstraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_coordCOMConstraint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomgroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_coordCOMConstraint" "', argument " "1"" of type '" "atomgroup *""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  result = (coordCOMConstraint *)new coordCOMConstraint(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_coordCOMConstraint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_coordCOMConstraint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atomgroup, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_coordCOMConstraint__SWIG_2(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atomgroup, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_coordCOMConstraint__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atomgroup, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_Vector2T_double_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_coordCOMConstraint__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_coordCOMConstraint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    coordCOMConstraint::coordCOMConstraint(atomgroup *,bool,bool,bool,Vec)\n"
    "    coordCOMConstraint::coordCOMConstraint(atomgroup *,bool,bool,bool)\n"
    "    coordCOMConstraint::coordCOMConstraint(atomgroup *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_coordCOMConstraint_ndof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  coordCOMConstraint *arg1 = (coordCOMConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:coordCOMConstraint_ndof",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_coordCOMConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "coordCOMConstraint_ndof" "', argument " "1"" of type '" "coordCOMConstraint *""'"); 
  }
  arg1 = reinterpret_cast< coordCOMConstraint * >(argp1);
  result = (int)(arg1)->ndof();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_coordCOMConstraint_apply(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  coordCOMConstraint *arg1 = (coordCOMConstraint *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:coordCOMConstraint_apply",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_coordCOMConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "coordCOMConstraint_apply" "', argument " "1"" of type '" "coordCOMConstraint *""'"); 
  }
  arg1 = reinterpret_cast< coordCOMConstraint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "coordCOMConstraint_apply" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->apply(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_coordCOMConstraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  coordCOMConstraint *arg1 = (coordCOMConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_coordCOMConstraint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_coordCOMConstraint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_coordCOMConstraint" "', argument " "1"" of type '" "coordCOMConstraint *""'"); 
  }
  arg1 = reinterpret_cast< coordCOMConstraint * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *coordCOMConstraint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_coordCOMConstraint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_relativeConstraint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  atom *arg2 = (atom *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  Vec arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  relativeConstraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_relativeConstraint",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_relativeConstraint" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_relativeConstraint" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_relativeConstraint" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_relativeConstraint" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_relativeConstraint" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_relativeConstraint" "', argument " "6"" of type '" "Vec""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_relativeConstraint" "', argument " "6"" of type '" "Vec""'");
    } else {
      Vec * temp = reinterpret_cast< Vec * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  result = (relativeConstraint *)new relativeConstraint(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_relativeConstraint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_relativeConstraint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  atom *arg2 = (atom *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  relativeConstraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_relativeConstraint",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_relativeConstraint" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_relativeConstraint" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_relativeConstraint" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_relativeConstraint" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_relativeConstraint" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (relativeConstraint *)new relativeConstraint(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_relativeConstraint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_relativeConstraint__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atom *arg1 = (atom *) 0 ;
  atom *arg2 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  relativeConstraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_relativeConstraint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_relativeConstraint" "', argument " "1"" of type '" "atom *""'"); 
  }
  arg1 = reinterpret_cast< atom * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_relativeConstraint" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  result = (relativeConstraint *)new relativeConstraint(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_relativeConstraint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_relativeConstraint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_atom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_relativeConstraint__SWIG_2(self, args);
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_atom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_relativeConstraint__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atom, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_atom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_Vector2T_double_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_relativeConstraint__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_relativeConstraint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    relativeConstraint::relativeConstraint(atom *,atom *,bool,bool,bool,Vec)\n"
    "    relativeConstraint::relativeConstraint(atom *,atom *,bool,bool,bool)\n"
    "    relativeConstraint::relativeConstraint(atom *,atom *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_relativeConstraint_ndof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  relativeConstraint *arg1 = (relativeConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:relativeConstraint_ndof",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_relativeConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "relativeConstraint_ndof" "', argument " "1"" of type '" "relativeConstraint *""'"); 
  }
  arg1 = reinterpret_cast< relativeConstraint * >(argp1);
  result = (int)(arg1)->ndof();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_relativeConstraint_apply(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  relativeConstraint *arg1 = (relativeConstraint *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:relativeConstraint_apply",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_relativeConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "relativeConstraint_apply" "', argument " "1"" of type '" "relativeConstraint *""'"); 
  }
  arg1 = reinterpret_cast< relativeConstraint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "relativeConstraint_apply" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->apply(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_relativeConstraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  relativeConstraint *arg1 = (relativeConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_relativeConstraint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_relativeConstraint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_relativeConstraint" "', argument " "1"" of type '" "relativeConstraint *""'"); 
  }
  arg1 = reinterpret_cast< relativeConstraint * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *relativeConstraint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_relativeConstraint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NPHGaussianConstraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  std::vector< atomgroup * > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  NPHGaussianConstraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NPHGaussianConstraint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NPHGaussianConstraint" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NPHGaussianConstraint" "', argument " "2"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (NPHGaussianConstraint *)new NPHGaussianConstraint(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NPHGaussianConstraint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NPHGaussianConstraint_ndof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NPHGaussianConstraint *arg1 = (NPHGaussianConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NPHGaussianConstraint_ndof",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NPHGaussianConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NPHGaussianConstraint_ndof" "', argument " "1"" of type '" "NPHGaussianConstraint *""'"); 
  }
  arg1 = reinterpret_cast< NPHGaussianConstraint * >(argp1);
  result = (int)(arg1)->ndof();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NPHGaussianConstraint_apply(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NPHGaussianConstraint *arg1 = (NPHGaussianConstraint *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NPHGaussianConstraint_apply",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NPHGaussianConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NPHGaussianConstraint_apply" "', argument " "1"" of type '" "NPHGaussianConstraint *""'"); 
  }
  arg1 = reinterpret_cast< NPHGaussianConstraint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NPHGaussianConstraint_apply" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->apply(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NPHGaussianConstraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NPHGaussianConstraint *arg1 = (NPHGaussianConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NPHGaussianConstraint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NPHGaussianConstraint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NPHGaussianConstraint" "', argument " "1"" of type '" "NPHGaussianConstraint *""'"); 
  }
  arg1 = reinterpret_cast< NPHGaussianConstraint * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NPHGaussianConstraint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NPHGaussianConstraint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LJgroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NListed< LJatom,LJpair > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LJgroup",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LJgroup" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  result = (NListed< LJatom,LJpair > *)new NListed< LJatom,LJpair >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NListedT_LJatom_LJpair_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJgroup_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatom,LJpair > *arg1 = (NListed< LJatom,LJpair > *) 0 ;
  SwigValueWrapper< LJatom > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJgroup_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatom_LJpair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJgroup_add" "', argument " "1"" of type '" "NListed< LJatom,LJpair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatom,LJpair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJatom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJgroup_add" "', argument " "2"" of type '" "LJatom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJgroup_add" "', argument " "2"" of type '" "LJatom""'");
    } else {
      LJatom * temp = reinterpret_cast< LJatom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->add(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJgroup_update_pairs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatom,LJpair > *arg1 = (NListed< LJatom,LJpair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJgroup_update_pairs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatom_LJpair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJgroup_update_pairs" "', argument " "1"" of type '" "NListed< LJatom,LJpair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatom,LJpair > * >(argp1);
  (arg1)->update_pairs();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJgroup_getpair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatom,LJpair > *arg1 = (NListed< LJatom,LJpair > *) 0 ;
  idpair *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< LJpair > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJgroup_getpair",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatom_LJpair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJgroup_getpair" "', argument " "1"" of type '" "NListed< LJatom,LJpair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatom,LJpair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_idpair,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJgroup_getpair" "', argument " "2"" of type '" "idpair &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJgroup_getpair" "', argument " "2"" of type '" "idpair &""'"); 
  }
  arg2 = reinterpret_cast< idpair * >(argp2);
  result = (arg1)->getpair(*arg2);
  resultobj = SWIG_NewPointerObj((new LJpair(static_cast< const LJpair& >(result))), SWIGTYPE_p_LJpair, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJgroup_energy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatom,LJpair > *arg1 = (NListed< LJatom,LJpair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  idpair *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJgroup_energy",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatom_LJpair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJgroup_energy" "', argument " "1"" of type '" "NListed< LJatom,LJpair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatom,LJpair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJgroup_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_idpair,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LJgroup_energy" "', argument " "3"" of type '" "idpair &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJgroup_energy" "', argument " "3"" of type '" "idpair &""'"); 
  }
  arg3 = reinterpret_cast< idpair * >(argp3);
  result = (flt)(arg1)->energy(arg2,*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJgroup_energy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatom,LJpair > *arg1 = (NListed< LJatom,LJpair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJgroup_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatom_LJpair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJgroup_energy" "', argument " "1"" of type '" "NListed< LJatom,LJpair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatom,LJpair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJgroup_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJgroup_energy(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NListedT_LJatom_LJpair_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LJgroup_energy__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NListedT_LJatom_LJpair_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_idpair, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LJgroup_energy__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LJgroup_energy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NListed< LJatom,LJpair >::energy(Box *,idpair &)\n"
    "    NListed< LJatom,LJpair >::energy(Box *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LJgroup_pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatom,LJpair > *arg1 = (NListed< LJatom,LJpair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJgroup_pressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatom_LJpair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJgroup_pressure" "', argument " "1"" of type '" "NListed< LJatom,LJpair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatom,LJpair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJgroup_pressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->pressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJgroup_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatom,LJpair > *arg1 = (NListed< LJatom,LJpair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJgroup_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatom_LJpair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJgroup_size" "', argument " "1"" of type '" "NListed< LJatom,LJpair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatom,LJpair > * >(argp1);
  result = (uint)(arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJgroup_energy_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatom,LJpair > *arg1 = (NListed< LJatom,LJpair > *) 0 ;
  SwigValueWrapper< LJpair > arg2 ;
  Box *arg3 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJgroup_energy_pair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatom_LJpair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJgroup_energy_pair" "', argument " "1"" of type '" "NListed< LJatom,LJpair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatom,LJpair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJpair,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJgroup_energy_pair" "', argument " "2"" of type '" "LJpair""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJgroup_energy_pair" "', argument " "2"" of type '" "LJpair""'");
    } else {
      LJpair * temp = reinterpret_cast< LJpair * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LJgroup_energy_pair" "', argument " "3"" of type '" "Box *""'"); 
  }
  arg3 = reinterpret_cast< Box * >(argp3);
  result = (flt)(arg1)->energy_pair(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJgroup_setForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatom,LJpair > *arg1 = (NListed< LJatom,LJpair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJgroup_setForces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatom_LJpair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJgroup_setForces" "', argument " "1"" of type '" "NListed< LJatom,LJpair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatom,LJpair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJgroup_setForces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->setForces(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJgroup_setForcesGetPressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatom,LJpair > *arg1 = (NListed< LJatom,LJpair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJgroup_setForcesGetPressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatom_LJpair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJgroup_setForcesGetPressure" "', argument " "1"" of type '" "NListed< LJatom,LJpair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatom,LJpair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJgroup_setForcesGetPressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->setForcesGetPressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJgroup_forces_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatom,LJpair > *arg1 = (NListed< LJatom,LJpair > *) 0 ;
  SwigValueWrapper< LJpair > arg2 ;
  Box *arg3 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJgroup_forces_pair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatom_LJpair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJgroup_forces_pair" "', argument " "1"" of type '" "NListed< LJatom,LJpair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatom,LJpair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJpair,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJgroup_forces_pair" "', argument " "2"" of type '" "LJpair""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJgroup_forces_pair" "', argument " "2"" of type '" "LJpair""'");
    } else {
      LJpair * temp = reinterpret_cast< LJpair * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LJgroup_forces_pair" "', argument " "3"" of type '" "Box *""'"); 
  }
  arg3 = reinterpret_cast< Box * >(argp3);
  result = (arg1)->forces_pair(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJgroup_atom_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatom,LJpair > *arg1 = (NListed< LJatom,LJpair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< LJatom > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJgroup_atom_list",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatom_LJpair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJgroup_atom_list" "', argument " "1"" of type '" "NListed< LJatom,LJpair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatom,LJpair > * >(argp1);
  result = (std::vector< LJatom > *) &(arg1)->atom_list();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_LJatom_std__allocatorT_LJatom_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJgroup_nlist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatom,LJpair > *arg1 = (NListed< LJatom,LJpair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  neighborlist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJgroup_nlist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatom_LJpair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJgroup_nlist" "', argument " "1"" of type '" "NListed< LJatom,LJpair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatom,LJpair > * >(argp1);
  result = (neighborlist *)(arg1)->nlist();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_neighborlist, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LJgroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatom,LJpair > *arg1 = (NListed< LJatom,LJpair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJgroup",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatom_LJpair_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJgroup" "', argument " "1"" of type '" "NListed< LJatom,LJpair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatom,LJpair > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJgroup_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NListedT_LJatom_LJpair_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LJfull(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NListed< LJatomcut,LJAttractPair > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LJfull",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LJfull" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  result = (NListed< LJatomcut,LJAttractPair > *)new NListed< LJatomcut,LJAttractPair >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NListedT_LJatomcut_LJAttractPair_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJfull_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatomcut,LJAttractPair > *arg1 = (NListed< LJatomcut,LJAttractPair > *) 0 ;
  SwigValueWrapper< LJatomcut > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJfull_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatomcut_LJAttractPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJfull_add" "', argument " "1"" of type '" "NListed< LJatomcut,LJAttractPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatomcut,LJAttractPair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJatomcut,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJfull_add" "', argument " "2"" of type '" "LJatomcut""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJfull_add" "', argument " "2"" of type '" "LJatomcut""'");
    } else {
      LJatomcut * temp = reinterpret_cast< LJatomcut * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->add(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJfull_update_pairs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatomcut,LJAttractPair > *arg1 = (NListed< LJatomcut,LJAttractPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJfull_update_pairs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatomcut_LJAttractPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJfull_update_pairs" "', argument " "1"" of type '" "NListed< LJatomcut,LJAttractPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatomcut,LJAttractPair > * >(argp1);
  (arg1)->update_pairs();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJfull_getpair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatomcut,LJAttractPair > *arg1 = (NListed< LJatomcut,LJAttractPair > *) 0 ;
  idpair *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< LJAttractPair > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJfull_getpair",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatomcut_LJAttractPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJfull_getpair" "', argument " "1"" of type '" "NListed< LJatomcut,LJAttractPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatomcut,LJAttractPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_idpair,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJfull_getpair" "', argument " "2"" of type '" "idpair &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJfull_getpair" "', argument " "2"" of type '" "idpair &""'"); 
  }
  arg2 = reinterpret_cast< idpair * >(argp2);
  result = (arg1)->getpair(*arg2);
  resultobj = SWIG_NewPointerObj((new LJAttractPair(static_cast< const LJAttractPair& >(result))), SWIGTYPE_p_LJAttractPair, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJfull_energy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatomcut,LJAttractPair > *arg1 = (NListed< LJatomcut,LJAttractPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  idpair *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJfull_energy",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatomcut_LJAttractPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJfull_energy" "', argument " "1"" of type '" "NListed< LJatomcut,LJAttractPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatomcut,LJAttractPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJfull_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_idpair,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LJfull_energy" "', argument " "3"" of type '" "idpair &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJfull_energy" "', argument " "3"" of type '" "idpair &""'"); 
  }
  arg3 = reinterpret_cast< idpair * >(argp3);
  result = (flt)(arg1)->energy(arg2,*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJfull_energy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatomcut,LJAttractPair > *arg1 = (NListed< LJatomcut,LJAttractPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJfull_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatomcut_LJAttractPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJfull_energy" "', argument " "1"" of type '" "NListed< LJatomcut,LJAttractPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatomcut,LJAttractPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJfull_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJfull_energy(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NListedT_LJatomcut_LJAttractPair_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LJfull_energy__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NListedT_LJatomcut_LJAttractPair_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_idpair, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LJfull_energy__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LJfull_energy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NListed< LJatomcut,LJAttractPair >::energy(Box *,idpair &)\n"
    "    NListed< LJatomcut,LJAttractPair >::energy(Box *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LJfull_pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatomcut,LJAttractPair > *arg1 = (NListed< LJatomcut,LJAttractPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJfull_pressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatomcut_LJAttractPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJfull_pressure" "', argument " "1"" of type '" "NListed< LJatomcut,LJAttractPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatomcut,LJAttractPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJfull_pressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->pressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJfull_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatomcut,LJAttractPair > *arg1 = (NListed< LJatomcut,LJAttractPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJfull_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatomcut_LJAttractPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJfull_size" "', argument " "1"" of type '" "NListed< LJatomcut,LJAttractPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatomcut,LJAttractPair > * >(argp1);
  result = (uint)(arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJfull_energy_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatomcut,LJAttractPair > *arg1 = (NListed< LJatomcut,LJAttractPair > *) 0 ;
  SwigValueWrapper< LJAttractPair > arg2 ;
  Box *arg3 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJfull_energy_pair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatomcut_LJAttractPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJfull_energy_pair" "', argument " "1"" of type '" "NListed< LJatomcut,LJAttractPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatomcut,LJAttractPair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJAttractPair,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJfull_energy_pair" "', argument " "2"" of type '" "LJAttractPair""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJfull_energy_pair" "', argument " "2"" of type '" "LJAttractPair""'");
    } else {
      LJAttractPair * temp = reinterpret_cast< LJAttractPair * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LJfull_energy_pair" "', argument " "3"" of type '" "Box *""'"); 
  }
  arg3 = reinterpret_cast< Box * >(argp3);
  result = (flt)(arg1)->energy_pair(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJfull_setForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatomcut,LJAttractPair > *arg1 = (NListed< LJatomcut,LJAttractPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJfull_setForces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatomcut_LJAttractPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJfull_setForces" "', argument " "1"" of type '" "NListed< LJatomcut,LJAttractPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatomcut,LJAttractPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJfull_setForces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->setForces(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJfull_setForcesGetPressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatomcut,LJAttractPair > *arg1 = (NListed< LJatomcut,LJAttractPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJfull_setForcesGetPressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatomcut_LJAttractPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJfull_setForcesGetPressure" "', argument " "1"" of type '" "NListed< LJatomcut,LJAttractPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatomcut,LJAttractPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJfull_setForcesGetPressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->setForcesGetPressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJfull_forces_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatomcut,LJAttractPair > *arg1 = (NListed< LJatomcut,LJAttractPair > *) 0 ;
  SwigValueWrapper< LJAttractPair > arg2 ;
  Box *arg3 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJfull_forces_pair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatomcut_LJAttractPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJfull_forces_pair" "', argument " "1"" of type '" "NListed< LJatomcut,LJAttractPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatomcut,LJAttractPair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJAttractPair,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJfull_forces_pair" "', argument " "2"" of type '" "LJAttractPair""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJfull_forces_pair" "', argument " "2"" of type '" "LJAttractPair""'");
    } else {
      LJAttractPair * temp = reinterpret_cast< LJAttractPair * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LJfull_forces_pair" "', argument " "3"" of type '" "Box *""'"); 
  }
  arg3 = reinterpret_cast< Box * >(argp3);
  result = (arg1)->forces_pair(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJfull_atom_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatomcut,LJAttractPair > *arg1 = (NListed< LJatomcut,LJAttractPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< LJatomcut > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJfull_atom_list",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatomcut_LJAttractPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJfull_atom_list" "', argument " "1"" of type '" "NListed< LJatomcut,LJAttractPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatomcut,LJAttractPair > * >(argp1);
  result = (std::vector< LJatomcut > *) &(arg1)->atom_list();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_LJatomcut_std__allocatorT_LJatomcut_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJfull_nlist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatomcut,LJAttractPair > *arg1 = (NListed< LJatomcut,LJAttractPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  neighborlist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJfull_nlist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatomcut_LJAttractPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJfull_nlist" "', argument " "1"" of type '" "NListed< LJatomcut,LJAttractPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatomcut,LJAttractPair > * >(argp1);
  result = (neighborlist *)(arg1)->nlist();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_neighborlist, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LJfull(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJatomcut,LJAttractPair > *arg1 = (NListed< LJatomcut,LJAttractPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJfull",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJatomcut_LJAttractPair_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJfull" "', argument " "1"" of type '" "NListed< LJatomcut,LJAttractPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJatomcut,LJAttractPair > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJfull_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NListedT_LJatomcut_LJAttractPair_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Hydrophobicity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NListed< HydroAtom,HydroPair > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Hydrophobicity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Hydrophobicity" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  result = (NListed< HydroAtom,HydroPair > *)new NListed< HydroAtom,HydroPair >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NListedT_HydroAtom_HydroPair_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hydrophobicity_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HydroAtom,HydroPair > *arg1 = (NListed< HydroAtom,HydroPair > *) 0 ;
  SwigValueWrapper< HydroAtom > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hydrophobicity_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HydroAtom_HydroPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hydrophobicity_add" "', argument " "1"" of type '" "NListed< HydroAtom,HydroPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HydroAtom,HydroPair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HydroAtom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hydrophobicity_add" "', argument " "2"" of type '" "HydroAtom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Hydrophobicity_add" "', argument " "2"" of type '" "HydroAtom""'");
    } else {
      HydroAtom * temp = reinterpret_cast< HydroAtom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->add(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hydrophobicity_update_pairs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HydroAtom,HydroPair > *arg1 = (NListed< HydroAtom,HydroPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hydrophobicity_update_pairs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HydroAtom_HydroPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hydrophobicity_update_pairs" "', argument " "1"" of type '" "NListed< HydroAtom,HydroPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HydroAtom,HydroPair > * >(argp1);
  (arg1)->update_pairs();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hydrophobicity_getpair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HydroAtom,HydroPair > *arg1 = (NListed< HydroAtom,HydroPair > *) 0 ;
  idpair *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< HydroPair > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hydrophobicity_getpair",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HydroAtom_HydroPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hydrophobicity_getpair" "', argument " "1"" of type '" "NListed< HydroAtom,HydroPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HydroAtom,HydroPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_idpair,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hydrophobicity_getpair" "', argument " "2"" of type '" "idpair &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Hydrophobicity_getpair" "', argument " "2"" of type '" "idpair &""'"); 
  }
  arg2 = reinterpret_cast< idpair * >(argp2);
  result = (arg1)->getpair(*arg2);
  resultobj = SWIG_NewPointerObj((new HydroPair(static_cast< const HydroPair& >(result))), SWIGTYPE_p_HydroPair, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hydrophobicity_energy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HydroAtom,HydroPair > *arg1 = (NListed< HydroAtom,HydroPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  idpair *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Hydrophobicity_energy",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HydroAtom_HydroPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hydrophobicity_energy" "', argument " "1"" of type '" "NListed< HydroAtom,HydroPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HydroAtom,HydroPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hydrophobicity_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_idpair,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Hydrophobicity_energy" "', argument " "3"" of type '" "idpair &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Hydrophobicity_energy" "', argument " "3"" of type '" "idpair &""'"); 
  }
  arg3 = reinterpret_cast< idpair * >(argp3);
  result = (flt)(arg1)->energy(arg2,*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hydrophobicity_energy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HydroAtom,HydroPair > *arg1 = (NListed< HydroAtom,HydroPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hydrophobicity_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HydroAtom_HydroPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hydrophobicity_energy" "', argument " "1"" of type '" "NListed< HydroAtom,HydroPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HydroAtom,HydroPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hydrophobicity_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hydrophobicity_energy(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NListedT_HydroAtom_HydroPair_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Hydrophobicity_energy__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NListedT_HydroAtom_HydroPair_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_idpair, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Hydrophobicity_energy__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Hydrophobicity_energy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NListed< HydroAtom,HydroPair >::energy(Box *,idpair &)\n"
    "    NListed< HydroAtom,HydroPair >::energy(Box *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Hydrophobicity_pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HydroAtom,HydroPair > *arg1 = (NListed< HydroAtom,HydroPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hydrophobicity_pressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HydroAtom_HydroPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hydrophobicity_pressure" "', argument " "1"" of type '" "NListed< HydroAtom,HydroPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HydroAtom,HydroPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hydrophobicity_pressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->pressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hydrophobicity_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HydroAtom,HydroPair > *arg1 = (NListed< HydroAtom,HydroPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hydrophobicity_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HydroAtom_HydroPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hydrophobicity_size" "', argument " "1"" of type '" "NListed< HydroAtom,HydroPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HydroAtom,HydroPair > * >(argp1);
  result = (uint)(arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hydrophobicity_energy_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HydroAtom,HydroPair > *arg1 = (NListed< HydroAtom,HydroPair > *) 0 ;
  SwigValueWrapper< HydroPair > arg2 ;
  Box *arg3 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Hydrophobicity_energy_pair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HydroAtom_HydroPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hydrophobicity_energy_pair" "', argument " "1"" of type '" "NListed< HydroAtom,HydroPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HydroAtom,HydroPair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HydroPair,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hydrophobicity_energy_pair" "', argument " "2"" of type '" "HydroPair""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Hydrophobicity_energy_pair" "', argument " "2"" of type '" "HydroPair""'");
    } else {
      HydroPair * temp = reinterpret_cast< HydroPair * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Hydrophobicity_energy_pair" "', argument " "3"" of type '" "Box *""'"); 
  }
  arg3 = reinterpret_cast< Box * >(argp3);
  result = (flt)(arg1)->energy_pair(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hydrophobicity_setForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HydroAtom,HydroPair > *arg1 = (NListed< HydroAtom,HydroPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hydrophobicity_setForces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HydroAtom_HydroPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hydrophobicity_setForces" "', argument " "1"" of type '" "NListed< HydroAtom,HydroPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HydroAtom,HydroPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hydrophobicity_setForces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->setForces(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hydrophobicity_setForcesGetPressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HydroAtom,HydroPair > *arg1 = (NListed< HydroAtom,HydroPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hydrophobicity_setForcesGetPressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HydroAtom_HydroPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hydrophobicity_setForcesGetPressure" "', argument " "1"" of type '" "NListed< HydroAtom,HydroPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HydroAtom,HydroPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hydrophobicity_setForcesGetPressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->setForcesGetPressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hydrophobicity_forces_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HydroAtom,HydroPair > *arg1 = (NListed< HydroAtom,HydroPair > *) 0 ;
  SwigValueWrapper< HydroPair > arg2 ;
  Box *arg3 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Hydrophobicity_forces_pair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HydroAtom_HydroPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hydrophobicity_forces_pair" "', argument " "1"" of type '" "NListed< HydroAtom,HydroPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HydroAtom,HydroPair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HydroPair,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hydrophobicity_forces_pair" "', argument " "2"" of type '" "HydroPair""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Hydrophobicity_forces_pair" "', argument " "2"" of type '" "HydroPair""'");
    } else {
      HydroPair * temp = reinterpret_cast< HydroPair * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Hydrophobicity_forces_pair" "', argument " "3"" of type '" "Box *""'"); 
  }
  arg3 = reinterpret_cast< Box * >(argp3);
  result = (arg1)->forces_pair(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hydrophobicity_atom_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HydroAtom,HydroPair > *arg1 = (NListed< HydroAtom,HydroPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< HydroAtom > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hydrophobicity_atom_list",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HydroAtom_HydroPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hydrophobicity_atom_list" "', argument " "1"" of type '" "NListed< HydroAtom,HydroPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HydroAtom,HydroPair > * >(argp1);
  result = (std::vector< HydroAtom > *) &(arg1)->atom_list();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HydroAtom_std__allocatorT_HydroAtom_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hydrophobicity_nlist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HydroAtom,HydroPair > *arg1 = (NListed< HydroAtom,HydroPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  neighborlist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hydrophobicity_nlist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HydroAtom_HydroPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hydrophobicity_nlist" "', argument " "1"" of type '" "NListed< HydroAtom,HydroPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HydroAtom,HydroPair > * >(argp1);
  result = (neighborlist *)(arg1)->nlist();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_neighborlist, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Hydrophobicity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HydroAtom,HydroPair > *arg1 = (NListed< HydroAtom,HydroPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Hydrophobicity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HydroAtom_HydroPair_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Hydrophobicity" "', argument " "1"" of type '" "NListed< HydroAtom,HydroPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HydroAtom,HydroPair > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Hydrophobicity_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NListedT_HydroAtom_HydroPair_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LJdetailed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NListed< LJAtomIndexed,LJFullPair > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LJdetailed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LJdetailed" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  result = (NListed< LJAtomIndexed,LJFullPair > *)new NListed< LJAtomIndexed,LJFullPair >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NListedT_LJAtomIndexed_LJFullPair_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJdetailed_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAtomIndexed,LJFullPair > *arg1 = (NListed< LJAtomIndexed,LJFullPair > *) 0 ;
  SwigValueWrapper< LJAtomIndexed > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJdetailed_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAtomIndexed_LJFullPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJdetailed_add" "', argument " "1"" of type '" "NListed< LJAtomIndexed,LJFullPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAtomIndexed,LJFullPair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJAtomIndexed,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJdetailed_add" "', argument " "2"" of type '" "LJAtomIndexed""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJdetailed_add" "', argument " "2"" of type '" "LJAtomIndexed""'");
    } else {
      LJAtomIndexed * temp = reinterpret_cast< LJAtomIndexed * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->add(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJdetailed_update_pairs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAtomIndexed,LJFullPair > *arg1 = (NListed< LJAtomIndexed,LJFullPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJdetailed_update_pairs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAtomIndexed_LJFullPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJdetailed_update_pairs" "', argument " "1"" of type '" "NListed< LJAtomIndexed,LJFullPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAtomIndexed,LJFullPair > * >(argp1);
  (arg1)->update_pairs();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJdetailed_getpair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAtomIndexed,LJFullPair > *arg1 = (NListed< LJAtomIndexed,LJFullPair > *) 0 ;
  idpair *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< LJFullPair > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJdetailed_getpair",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAtomIndexed_LJFullPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJdetailed_getpair" "', argument " "1"" of type '" "NListed< LJAtomIndexed,LJFullPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAtomIndexed,LJFullPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_idpair,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJdetailed_getpair" "', argument " "2"" of type '" "idpair &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJdetailed_getpair" "', argument " "2"" of type '" "idpair &""'"); 
  }
  arg2 = reinterpret_cast< idpair * >(argp2);
  result = (arg1)->getpair(*arg2);
  resultobj = SWIG_NewPointerObj((new LJFullPair(static_cast< const LJFullPair& >(result))), SWIGTYPE_p_LJFullPair, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJdetailed_energy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAtomIndexed,LJFullPair > *arg1 = (NListed< LJAtomIndexed,LJFullPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  idpair *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJdetailed_energy",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAtomIndexed_LJFullPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJdetailed_energy" "', argument " "1"" of type '" "NListed< LJAtomIndexed,LJFullPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAtomIndexed,LJFullPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJdetailed_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_idpair,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LJdetailed_energy" "', argument " "3"" of type '" "idpair &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJdetailed_energy" "', argument " "3"" of type '" "idpair &""'"); 
  }
  arg3 = reinterpret_cast< idpair * >(argp3);
  result = (flt)(arg1)->energy(arg2,*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJdetailed_energy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAtomIndexed,LJFullPair > *arg1 = (NListed< LJAtomIndexed,LJFullPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJdetailed_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAtomIndexed_LJFullPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJdetailed_energy" "', argument " "1"" of type '" "NListed< LJAtomIndexed,LJFullPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAtomIndexed,LJFullPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJdetailed_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJdetailed_energy(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NListedT_LJAtomIndexed_LJFullPair_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LJdetailed_energy__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NListedT_LJAtomIndexed_LJFullPair_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_idpair, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LJdetailed_energy__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LJdetailed_energy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NListed< LJAtomIndexed,LJFullPair >::energy(Box *,idpair &)\n"
    "    NListed< LJAtomIndexed,LJFullPair >::energy(Box *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LJdetailed_pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAtomIndexed,LJFullPair > *arg1 = (NListed< LJAtomIndexed,LJFullPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJdetailed_pressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAtomIndexed_LJFullPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJdetailed_pressure" "', argument " "1"" of type '" "NListed< LJAtomIndexed,LJFullPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAtomIndexed,LJFullPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJdetailed_pressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->pressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJdetailed_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAtomIndexed,LJFullPair > *arg1 = (NListed< LJAtomIndexed,LJFullPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJdetailed_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAtomIndexed_LJFullPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJdetailed_size" "', argument " "1"" of type '" "NListed< LJAtomIndexed,LJFullPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAtomIndexed,LJFullPair > * >(argp1);
  result = (uint)(arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJdetailed_energy_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAtomIndexed,LJFullPair > *arg1 = (NListed< LJAtomIndexed,LJFullPair > *) 0 ;
  SwigValueWrapper< LJFullPair > arg2 ;
  Box *arg3 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJdetailed_energy_pair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAtomIndexed_LJFullPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJdetailed_energy_pair" "', argument " "1"" of type '" "NListed< LJAtomIndexed,LJFullPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAtomIndexed,LJFullPair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJFullPair,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJdetailed_energy_pair" "', argument " "2"" of type '" "LJFullPair""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJdetailed_energy_pair" "', argument " "2"" of type '" "LJFullPair""'");
    } else {
      LJFullPair * temp = reinterpret_cast< LJFullPair * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LJdetailed_energy_pair" "', argument " "3"" of type '" "Box *""'"); 
  }
  arg3 = reinterpret_cast< Box * >(argp3);
  result = (flt)(arg1)->energy_pair(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJdetailed_setForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAtomIndexed,LJFullPair > *arg1 = (NListed< LJAtomIndexed,LJFullPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJdetailed_setForces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAtomIndexed_LJFullPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJdetailed_setForces" "', argument " "1"" of type '" "NListed< LJAtomIndexed,LJFullPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAtomIndexed,LJFullPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJdetailed_setForces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->setForces(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJdetailed_setForcesGetPressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAtomIndexed,LJFullPair > *arg1 = (NListed< LJAtomIndexed,LJFullPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJdetailed_setForcesGetPressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAtomIndexed_LJFullPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJdetailed_setForcesGetPressure" "', argument " "1"" of type '" "NListed< LJAtomIndexed,LJFullPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAtomIndexed,LJFullPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJdetailed_setForcesGetPressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->setForcesGetPressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJdetailed_forces_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAtomIndexed,LJFullPair > *arg1 = (NListed< LJAtomIndexed,LJFullPair > *) 0 ;
  SwigValueWrapper< LJFullPair > arg2 ;
  Box *arg3 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJdetailed_forces_pair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAtomIndexed_LJFullPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJdetailed_forces_pair" "', argument " "1"" of type '" "NListed< LJAtomIndexed,LJFullPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAtomIndexed,LJFullPair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJFullPair,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJdetailed_forces_pair" "', argument " "2"" of type '" "LJFullPair""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJdetailed_forces_pair" "', argument " "2"" of type '" "LJFullPair""'");
    } else {
      LJFullPair * temp = reinterpret_cast< LJFullPair * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LJdetailed_forces_pair" "', argument " "3"" of type '" "Box *""'"); 
  }
  arg3 = reinterpret_cast< Box * >(argp3);
  result = (arg1)->forces_pair(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJdetailed_atom_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAtomIndexed,LJFullPair > *arg1 = (NListed< LJAtomIndexed,LJFullPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< LJAtomIndexed > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJdetailed_atom_list",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAtomIndexed_LJFullPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJdetailed_atom_list" "', argument " "1"" of type '" "NListed< LJAtomIndexed,LJFullPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAtomIndexed,LJFullPair > * >(argp1);
  result = (std::vector< LJAtomIndexed > *) &(arg1)->atom_list();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_LJAtomIndexed_std__allocatorT_LJAtomIndexed_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJdetailed_nlist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAtomIndexed,LJFullPair > *arg1 = (NListed< LJAtomIndexed,LJFullPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  neighborlist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJdetailed_nlist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAtomIndexed_LJFullPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJdetailed_nlist" "', argument " "1"" of type '" "NListed< LJAtomIndexed,LJFullPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAtomIndexed,LJFullPair > * >(argp1);
  result = (neighborlist *)(arg1)->nlist();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_neighborlist, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LJdetailed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAtomIndexed,LJFullPair > *arg1 = (NListed< LJAtomIndexed,LJFullPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJdetailed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAtomIndexed_LJFullPair_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJdetailed" "', argument " "1"" of type '" "NListed< LJAtomIndexed,LJFullPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAtomIndexed,LJFullPair > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJdetailed_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NListedT_LJAtomIndexed_LJFullPair_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LJAttractRepulse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LJAttractRepulse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LJAttractRepulse" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  result = (NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *)new NListed< LJAttractRepulseAtom,LJAttractRepulsePair >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulse_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *arg1 = (NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *) 0 ;
  SwigValueWrapper< LJAttractRepulseAtom > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractRepulse_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulse_add" "', argument " "1"" of type '" "NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractRepulseAtom,LJAttractRepulsePair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJAttractRepulseAtom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractRepulse_add" "', argument " "2"" of type '" "LJAttractRepulseAtom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJAttractRepulse_add" "', argument " "2"" of type '" "LJAttractRepulseAtom""'");
    } else {
      LJAttractRepulseAtom * temp = reinterpret_cast< LJAttractRepulseAtom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->add(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulse_update_pairs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *arg1 = (NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractRepulse_update_pairs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulse_update_pairs" "', argument " "1"" of type '" "NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractRepulseAtom,LJAttractRepulsePair > * >(argp1);
  (arg1)->update_pairs();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulse_getpair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *arg1 = (NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *) 0 ;
  idpair *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< LJAttractRepulsePair > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractRepulse_getpair",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulse_getpair" "', argument " "1"" of type '" "NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractRepulseAtom,LJAttractRepulsePair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_idpair,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractRepulse_getpair" "', argument " "2"" of type '" "idpair &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJAttractRepulse_getpair" "', argument " "2"" of type '" "idpair &""'"); 
  }
  arg2 = reinterpret_cast< idpair * >(argp2);
  result = (arg1)->getpair(*arg2);
  resultobj = SWIG_NewPointerObj((new LJAttractRepulsePair(static_cast< const LJAttractRepulsePair& >(result))), SWIGTYPE_p_LJAttractRepulsePair, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulse_energy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *arg1 = (NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  idpair *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJAttractRepulse_energy",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulse_energy" "', argument " "1"" of type '" "NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractRepulseAtom,LJAttractRepulsePair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractRepulse_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_idpair,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LJAttractRepulse_energy" "', argument " "3"" of type '" "idpair &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJAttractRepulse_energy" "', argument " "3"" of type '" "idpair &""'"); 
  }
  arg3 = reinterpret_cast< idpair * >(argp3);
  result = (flt)(arg1)->energy(arg2,*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulse_energy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *arg1 = (NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractRepulse_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulse_energy" "', argument " "1"" of type '" "NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractRepulseAtom,LJAttractRepulsePair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractRepulse_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulse_energy(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LJAttractRepulse_energy__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_idpair, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LJAttractRepulse_energy__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LJAttractRepulse_energy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NListed< LJAttractRepulseAtom,LJAttractRepulsePair >::energy(Box *,idpair &)\n"
    "    NListed< LJAttractRepulseAtom,LJAttractRepulsePair >::energy(Box *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulse_pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *arg1 = (NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractRepulse_pressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulse_pressure" "', argument " "1"" of type '" "NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractRepulseAtom,LJAttractRepulsePair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractRepulse_pressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->pressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulse_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *arg1 = (NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractRepulse_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulse_size" "', argument " "1"" of type '" "NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractRepulseAtom,LJAttractRepulsePair > * >(argp1);
  result = (uint)(arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulse_energy_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *arg1 = (NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *) 0 ;
  SwigValueWrapper< LJAttractRepulsePair > arg2 ;
  Box *arg3 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJAttractRepulse_energy_pair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulse_energy_pair" "', argument " "1"" of type '" "NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractRepulseAtom,LJAttractRepulsePair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJAttractRepulsePair,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractRepulse_energy_pair" "', argument " "2"" of type '" "LJAttractRepulsePair""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJAttractRepulse_energy_pair" "', argument " "2"" of type '" "LJAttractRepulsePair""'");
    } else {
      LJAttractRepulsePair * temp = reinterpret_cast< LJAttractRepulsePair * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LJAttractRepulse_energy_pair" "', argument " "3"" of type '" "Box *""'"); 
  }
  arg3 = reinterpret_cast< Box * >(argp3);
  result = (flt)(arg1)->energy_pair(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulse_setForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *arg1 = (NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractRepulse_setForces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulse_setForces" "', argument " "1"" of type '" "NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractRepulseAtom,LJAttractRepulsePair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractRepulse_setForces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->setForces(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulse_setForcesGetPressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *arg1 = (NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractRepulse_setForcesGetPressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulse_setForcesGetPressure" "', argument " "1"" of type '" "NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractRepulseAtom,LJAttractRepulsePair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractRepulse_setForcesGetPressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->setForcesGetPressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulse_forces_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *arg1 = (NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *) 0 ;
  SwigValueWrapper< LJAttractRepulsePair > arg2 ;
  Box *arg3 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJAttractRepulse_forces_pair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulse_forces_pair" "', argument " "1"" of type '" "NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractRepulseAtom,LJAttractRepulsePair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJAttractRepulsePair,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractRepulse_forces_pair" "', argument " "2"" of type '" "LJAttractRepulsePair""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJAttractRepulse_forces_pair" "', argument " "2"" of type '" "LJAttractRepulsePair""'");
    } else {
      LJAttractRepulsePair * temp = reinterpret_cast< LJAttractRepulsePair * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LJAttractRepulse_forces_pair" "', argument " "3"" of type '" "Box *""'"); 
  }
  arg3 = reinterpret_cast< Box * >(argp3);
  result = (arg1)->forces_pair(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulse_atom_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *arg1 = (NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< LJAttractRepulseAtom > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractRepulse_atom_list",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulse_atom_list" "', argument " "1"" of type '" "NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractRepulseAtom,LJAttractRepulsePair > * >(argp1);
  result = (std::vector< LJAttractRepulseAtom > *) &(arg1)->atom_list();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_LJAttractRepulseAtom_std__allocatorT_LJAttractRepulseAtom_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractRepulse_nlist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *arg1 = (NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  neighborlist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractRepulse_nlist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractRepulse_nlist" "', argument " "1"" of type '" "NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractRepulseAtom,LJAttractRepulsePair > * >(argp1);
  result = (neighborlist *)(arg1)->nlist();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_neighborlist, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LJAttractRepulse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *arg1 = (NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJAttractRepulse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJAttractRepulse" "', argument " "1"" of type '" "NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractRepulseAtom,LJAttractRepulsePair > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJAttractRepulse_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LJAttractFixedRepulse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LJAttractFixedRepulse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LJAttractFixedRepulse" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  result = (NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *)new NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulse_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *arg1 = (NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *) 0 ;
  SwigValueWrapper< LJAttractFixedRepulseAtom > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractFixedRepulse_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulse_add" "', argument " "1"" of type '" "NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJAttractFixedRepulseAtom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractFixedRepulse_add" "', argument " "2"" of type '" "LJAttractFixedRepulseAtom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJAttractFixedRepulse_add" "', argument " "2"" of type '" "LJAttractFixedRepulseAtom""'");
    } else {
      LJAttractFixedRepulseAtom * temp = reinterpret_cast< LJAttractFixedRepulseAtom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->add(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulse_update_pairs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *arg1 = (NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractFixedRepulse_update_pairs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulse_update_pairs" "', argument " "1"" of type '" "NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > * >(argp1);
  (arg1)->update_pairs();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulse_getpair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *arg1 = (NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *) 0 ;
  idpair *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  LJAttractFixedRepulsePair result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractFixedRepulse_getpair",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulse_getpair" "', argument " "1"" of type '" "NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_idpair,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractFixedRepulse_getpair" "', argument " "2"" of type '" "idpair &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJAttractFixedRepulse_getpair" "', argument " "2"" of type '" "idpair &""'"); 
  }
  arg2 = reinterpret_cast< idpair * >(argp2);
  result = (arg1)->getpair(*arg2);
  resultobj = SWIG_NewPointerObj((new LJAttractFixedRepulsePair(static_cast< const LJAttractFixedRepulsePair& >(result))), SWIGTYPE_p_LJAttractFixedRepulsePair, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulse_energy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *arg1 = (NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  idpair *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJAttractFixedRepulse_energy",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulse_energy" "', argument " "1"" of type '" "NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractFixedRepulse_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_idpair,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LJAttractFixedRepulse_energy" "', argument " "3"" of type '" "idpair &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJAttractFixedRepulse_energy" "', argument " "3"" of type '" "idpair &""'"); 
  }
  arg3 = reinterpret_cast< idpair * >(argp3);
  result = (flt)(arg1)->energy(arg2,*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulse_energy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *arg1 = (NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractFixedRepulse_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulse_energy" "', argument " "1"" of type '" "NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractFixedRepulse_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulse_energy(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LJAttractFixedRepulse_energy__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_idpair, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LJAttractFixedRepulse_energy__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LJAttractFixedRepulse_energy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair >::energy(Box *,idpair &)\n"
    "    NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair >::energy(Box *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulse_pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *arg1 = (NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractFixedRepulse_pressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulse_pressure" "', argument " "1"" of type '" "NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractFixedRepulse_pressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->pressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulse_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *arg1 = (NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractFixedRepulse_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulse_size" "', argument " "1"" of type '" "NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > * >(argp1);
  result = (uint)(arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulse_energy_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *arg1 = (NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *) 0 ;
  LJAttractFixedRepulsePair arg2 ;
  Box *arg3 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJAttractFixedRepulse_energy_pair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulse_energy_pair" "', argument " "1"" of type '" "NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJAttractFixedRepulsePair,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractFixedRepulse_energy_pair" "', argument " "2"" of type '" "LJAttractFixedRepulsePair""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJAttractFixedRepulse_energy_pair" "', argument " "2"" of type '" "LJAttractFixedRepulsePair""'");
    } else {
      LJAttractFixedRepulsePair * temp = reinterpret_cast< LJAttractFixedRepulsePair * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LJAttractFixedRepulse_energy_pair" "', argument " "3"" of type '" "Box *""'"); 
  }
  arg3 = reinterpret_cast< Box * >(argp3);
  result = (flt)(arg1)->energy_pair(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulse_setForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *arg1 = (NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractFixedRepulse_setForces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulse_setForces" "', argument " "1"" of type '" "NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractFixedRepulse_setForces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->setForces(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulse_setForcesGetPressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *arg1 = (NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJAttractFixedRepulse_setForcesGetPressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulse_setForcesGetPressure" "', argument " "1"" of type '" "NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractFixedRepulse_setForcesGetPressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->setForcesGetPressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulse_forces_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *arg1 = (NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *) 0 ;
  LJAttractFixedRepulsePair arg2 ;
  Box *arg3 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJAttractFixedRepulse_forces_pair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulse_forces_pair" "', argument " "1"" of type '" "NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJAttractFixedRepulsePair,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJAttractFixedRepulse_forces_pair" "', argument " "2"" of type '" "LJAttractFixedRepulsePair""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJAttractFixedRepulse_forces_pair" "', argument " "2"" of type '" "LJAttractFixedRepulsePair""'");
    } else {
      LJAttractFixedRepulsePair * temp = reinterpret_cast< LJAttractFixedRepulsePair * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LJAttractFixedRepulse_forces_pair" "', argument " "3"" of type '" "Box *""'"); 
  }
  arg3 = reinterpret_cast< Box * >(argp3);
  result = (arg1)->forces_pair(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulse_atom_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *arg1 = (NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< LJAttractFixedRepulseAtom > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractFixedRepulse_atom_list",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulse_atom_list" "', argument " "1"" of type '" "NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > * >(argp1);
  result = (std::vector< LJAttractFixedRepulseAtom > *) &(arg1)->atom_list();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_LJAttractFixedRepulseAtom_std__allocatorT_LJAttractFixedRepulseAtom_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJAttractFixedRepulse_nlist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *arg1 = (NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  neighborlist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJAttractFixedRepulse_nlist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJAttractFixedRepulse_nlist" "', argument " "1"" of type '" "NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > * >(argp1);
  result = (neighborlist *)(arg1)->nlist();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_neighborlist, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LJAttractFixedRepulse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *arg1 = (NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJAttractFixedRepulse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJAttractFixedRepulse" "', argument " "1"" of type '" "NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJAttractFixedRepulse_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LJDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NListed< LJDoubleAtom,LJDoublePair > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LJDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LJDouble" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  result = (NListed< LJDoubleAtom,LJDoublePair > *)new NListed< LJDoubleAtom,LJDoublePair >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NListedT_LJDoubleAtom_LJDoublePair_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDouble_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJDoubleAtom,LJDoublePair > *arg1 = (NListed< LJDoubleAtom,LJDoublePair > *) 0 ;
  SwigValueWrapper< LJDoubleAtom > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJDouble_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJDoubleAtom_LJDoublePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDouble_add" "', argument " "1"" of type '" "NListed< LJDoubleAtom,LJDoublePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJDoubleAtom,LJDoublePair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJDoubleAtom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJDouble_add" "', argument " "2"" of type '" "LJDoubleAtom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJDouble_add" "', argument " "2"" of type '" "LJDoubleAtom""'");
    } else {
      LJDoubleAtom * temp = reinterpret_cast< LJDoubleAtom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->add(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDouble_update_pairs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJDoubleAtom,LJDoublePair > *arg1 = (NListed< LJDoubleAtom,LJDoublePair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJDouble_update_pairs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJDoubleAtom_LJDoublePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDouble_update_pairs" "', argument " "1"" of type '" "NListed< LJDoubleAtom,LJDoublePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJDoubleAtom,LJDoublePair > * >(argp1);
  (arg1)->update_pairs();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDouble_getpair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJDoubleAtom,LJDoublePair > *arg1 = (NListed< LJDoubleAtom,LJDoublePair > *) 0 ;
  idpair *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< LJDoublePair > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJDouble_getpair",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJDoubleAtom_LJDoublePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDouble_getpair" "', argument " "1"" of type '" "NListed< LJDoubleAtom,LJDoublePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJDoubleAtom,LJDoublePair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_idpair,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJDouble_getpair" "', argument " "2"" of type '" "idpair &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJDouble_getpair" "', argument " "2"" of type '" "idpair &""'"); 
  }
  arg2 = reinterpret_cast< idpair * >(argp2);
  result = (arg1)->getpair(*arg2);
  resultobj = SWIG_NewPointerObj((new LJDoublePair(static_cast< const LJDoublePair& >(result))), SWIGTYPE_p_LJDoublePair, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDouble_energy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJDoubleAtom,LJDoublePair > *arg1 = (NListed< LJDoubleAtom,LJDoublePair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  idpair *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJDouble_energy",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJDoubleAtom_LJDoublePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDouble_energy" "', argument " "1"" of type '" "NListed< LJDoubleAtom,LJDoublePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJDoubleAtom,LJDoublePair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJDouble_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_idpair,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LJDouble_energy" "', argument " "3"" of type '" "idpair &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJDouble_energy" "', argument " "3"" of type '" "idpair &""'"); 
  }
  arg3 = reinterpret_cast< idpair * >(argp3);
  result = (flt)(arg1)->energy(arg2,*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDouble_energy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJDoubleAtom,LJDoublePair > *arg1 = (NListed< LJDoubleAtom,LJDoublePair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJDouble_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJDoubleAtom_LJDoublePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDouble_energy" "', argument " "1"" of type '" "NListed< LJDoubleAtom,LJDoublePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJDoubleAtom,LJDoublePair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJDouble_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDouble_energy(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NListedT_LJDoubleAtom_LJDoublePair_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LJDouble_energy__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NListedT_LJDoubleAtom_LJDoublePair_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_idpair, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LJDouble_energy__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LJDouble_energy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NListed< LJDoubleAtom,LJDoublePair >::energy(Box *,idpair &)\n"
    "    NListed< LJDoubleAtom,LJDoublePair >::energy(Box *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LJDouble_pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJDoubleAtom,LJDoublePair > *arg1 = (NListed< LJDoubleAtom,LJDoublePair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJDouble_pressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJDoubleAtom_LJDoublePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDouble_pressure" "', argument " "1"" of type '" "NListed< LJDoubleAtom,LJDoublePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJDoubleAtom,LJDoublePair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJDouble_pressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->pressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDouble_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJDoubleAtom,LJDoublePair > *arg1 = (NListed< LJDoubleAtom,LJDoublePair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJDouble_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJDoubleAtom_LJDoublePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDouble_size" "', argument " "1"" of type '" "NListed< LJDoubleAtom,LJDoublePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJDoubleAtom,LJDoublePair > * >(argp1);
  result = (uint)(arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDouble_energy_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJDoubleAtom,LJDoublePair > *arg1 = (NListed< LJDoubleAtom,LJDoublePair > *) 0 ;
  SwigValueWrapper< LJDoublePair > arg2 ;
  Box *arg3 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJDouble_energy_pair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJDoubleAtom_LJDoublePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDouble_energy_pair" "', argument " "1"" of type '" "NListed< LJDoubleAtom,LJDoublePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJDoubleAtom,LJDoublePair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJDoublePair,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJDouble_energy_pair" "', argument " "2"" of type '" "LJDoublePair""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJDouble_energy_pair" "', argument " "2"" of type '" "LJDoublePair""'");
    } else {
      LJDoublePair * temp = reinterpret_cast< LJDoublePair * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LJDouble_energy_pair" "', argument " "3"" of type '" "Box *""'"); 
  }
  arg3 = reinterpret_cast< Box * >(argp3);
  result = (flt)(arg1)->energy_pair(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDouble_setForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJDoubleAtom,LJDoublePair > *arg1 = (NListed< LJDoubleAtom,LJDoublePair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJDouble_setForces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJDoubleAtom_LJDoublePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDouble_setForces" "', argument " "1"" of type '" "NListed< LJDoubleAtom,LJDoublePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJDoubleAtom,LJDoublePair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJDouble_setForces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->setForces(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDouble_setForcesGetPressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJDoubleAtom,LJDoublePair > *arg1 = (NListed< LJDoubleAtom,LJDoublePair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJDouble_setForcesGetPressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJDoubleAtom_LJDoublePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDouble_setForcesGetPressure" "', argument " "1"" of type '" "NListed< LJDoubleAtom,LJDoublePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJDoubleAtom,LJDoublePair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJDouble_setForcesGetPressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->setForcesGetPressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDouble_forces_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJDoubleAtom,LJDoublePair > *arg1 = (NListed< LJDoubleAtom,LJDoublePair > *) 0 ;
  SwigValueWrapper< LJDoublePair > arg2 ;
  Box *arg3 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJDouble_forces_pair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJDoubleAtom_LJDoublePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDouble_forces_pair" "', argument " "1"" of type '" "NListed< LJDoubleAtom,LJDoublePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJDoubleAtom,LJDoublePair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJDoublePair,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJDouble_forces_pair" "', argument " "2"" of type '" "LJDoublePair""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJDouble_forces_pair" "', argument " "2"" of type '" "LJDoublePair""'");
    } else {
      LJDoublePair * temp = reinterpret_cast< LJDoublePair * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LJDouble_forces_pair" "', argument " "3"" of type '" "Box *""'"); 
  }
  arg3 = reinterpret_cast< Box * >(argp3);
  result = (arg1)->forces_pair(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDouble_atom_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJDoubleAtom,LJDoublePair > *arg1 = (NListed< LJDoubleAtom,LJDoublePair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< LJDoubleAtom > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJDouble_atom_list",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJDoubleAtom_LJDoublePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDouble_atom_list" "', argument " "1"" of type '" "NListed< LJDoubleAtom,LJDoublePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJDoubleAtom,LJDoublePair > * >(argp1);
  result = (std::vector< LJDoubleAtom > *) &(arg1)->atom_list();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_LJDoubleAtom_std__allocatorT_LJDoubleAtom_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJDouble_nlist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJDoubleAtom,LJDoublePair > *arg1 = (NListed< LJDoubleAtom,LJDoublePair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  neighborlist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJDouble_nlist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJDoubleAtom_LJDoublePair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJDouble_nlist" "', argument " "1"" of type '" "NListed< LJDoubleAtom,LJDoublePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJDoubleAtom,LJDoublePair > * >(argp1);
  result = (neighborlist *)(arg1)->nlist();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_neighborlist, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LJDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJDoubleAtom,LJDoublePair > *arg1 = (NListed< LJDoubleAtom,LJDoublePair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJDoubleAtom_LJDoublePair_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJDouble" "', argument " "1"" of type '" "NListed< LJDoubleAtom,LJDoublePair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJDoubleAtom,LJDoublePair > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJDouble_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NListedT_LJDoubleAtom_LJDoublePair_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_EisMclachlan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NListed< EisMclachlanAtom,EisMclachlanPair > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EisMclachlan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EisMclachlan" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  result = (NListed< EisMclachlanAtom,EisMclachlanPair > *)new NListed< EisMclachlanAtom,EisMclachlanPair >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NListedT_EisMclachlanAtom_EisMclachlanPair_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlan_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< EisMclachlanAtom,EisMclachlanPair > *arg1 = (NListed< EisMclachlanAtom,EisMclachlanPair > *) 0 ;
  SwigValueWrapper< EisMclachlanAtom > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EisMclachlan_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_EisMclachlanAtom_EisMclachlanPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlan_add" "', argument " "1"" of type '" "NListed< EisMclachlanAtom,EisMclachlanPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< EisMclachlanAtom,EisMclachlanPair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EisMclachlanAtom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EisMclachlan_add" "', argument " "2"" of type '" "EisMclachlanAtom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EisMclachlan_add" "', argument " "2"" of type '" "EisMclachlanAtom""'");
    } else {
      EisMclachlanAtom * temp = reinterpret_cast< EisMclachlanAtom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->add(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlan_update_pairs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< EisMclachlanAtom,EisMclachlanPair > *arg1 = (NListed< EisMclachlanAtom,EisMclachlanPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EisMclachlan_update_pairs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_EisMclachlanAtom_EisMclachlanPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlan_update_pairs" "', argument " "1"" of type '" "NListed< EisMclachlanAtom,EisMclachlanPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< EisMclachlanAtom,EisMclachlanPair > * >(argp1);
  (arg1)->update_pairs();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlan_getpair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< EisMclachlanAtom,EisMclachlanPair > *arg1 = (NListed< EisMclachlanAtom,EisMclachlanPair > *) 0 ;
  idpair *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< EisMclachlanPair > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EisMclachlan_getpair",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_EisMclachlanAtom_EisMclachlanPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlan_getpair" "', argument " "1"" of type '" "NListed< EisMclachlanAtom,EisMclachlanPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< EisMclachlanAtom,EisMclachlanPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_idpair,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EisMclachlan_getpair" "', argument " "2"" of type '" "idpair &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EisMclachlan_getpair" "', argument " "2"" of type '" "idpair &""'"); 
  }
  arg2 = reinterpret_cast< idpair * >(argp2);
  result = (arg1)->getpair(*arg2);
  resultobj = SWIG_NewPointerObj((new EisMclachlanPair(static_cast< const EisMclachlanPair& >(result))), SWIGTYPE_p_EisMclachlanPair, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlan_energy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< EisMclachlanAtom,EisMclachlanPair > *arg1 = (NListed< EisMclachlanAtom,EisMclachlanPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  idpair *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EisMclachlan_energy",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_EisMclachlanAtom_EisMclachlanPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlan_energy" "', argument " "1"" of type '" "NListed< EisMclachlanAtom,EisMclachlanPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< EisMclachlanAtom,EisMclachlanPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EisMclachlan_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_idpair,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EisMclachlan_energy" "', argument " "3"" of type '" "idpair &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EisMclachlan_energy" "', argument " "3"" of type '" "idpair &""'"); 
  }
  arg3 = reinterpret_cast< idpair * >(argp3);
  result = (flt)(arg1)->energy(arg2,*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlan_energy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< EisMclachlanAtom,EisMclachlanPair > *arg1 = (NListed< EisMclachlanAtom,EisMclachlanPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EisMclachlan_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_EisMclachlanAtom_EisMclachlanPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlan_energy" "', argument " "1"" of type '" "NListed< EisMclachlanAtom,EisMclachlanPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< EisMclachlanAtom,EisMclachlanPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EisMclachlan_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlan_energy(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NListedT_EisMclachlanAtom_EisMclachlanPair_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EisMclachlan_energy__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NListedT_EisMclachlanAtom_EisMclachlanPair_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_idpair, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_EisMclachlan_energy__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EisMclachlan_energy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NListed< EisMclachlanAtom,EisMclachlanPair >::energy(Box *,idpair &)\n"
    "    NListed< EisMclachlanAtom,EisMclachlanPair >::energy(Box *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EisMclachlan_pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< EisMclachlanAtom,EisMclachlanPair > *arg1 = (NListed< EisMclachlanAtom,EisMclachlanPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EisMclachlan_pressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_EisMclachlanAtom_EisMclachlanPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlan_pressure" "', argument " "1"" of type '" "NListed< EisMclachlanAtom,EisMclachlanPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< EisMclachlanAtom,EisMclachlanPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EisMclachlan_pressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->pressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlan_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< EisMclachlanAtom,EisMclachlanPair > *arg1 = (NListed< EisMclachlanAtom,EisMclachlanPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EisMclachlan_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_EisMclachlanAtom_EisMclachlanPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlan_size" "', argument " "1"" of type '" "NListed< EisMclachlanAtom,EisMclachlanPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< EisMclachlanAtom,EisMclachlanPair > * >(argp1);
  result = (uint)(arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlan_energy_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< EisMclachlanAtom,EisMclachlanPair > *arg1 = (NListed< EisMclachlanAtom,EisMclachlanPair > *) 0 ;
  SwigValueWrapper< EisMclachlanPair > arg2 ;
  Box *arg3 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EisMclachlan_energy_pair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_EisMclachlanAtom_EisMclachlanPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlan_energy_pair" "', argument " "1"" of type '" "NListed< EisMclachlanAtom,EisMclachlanPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< EisMclachlanAtom,EisMclachlanPair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EisMclachlanPair,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EisMclachlan_energy_pair" "', argument " "2"" of type '" "EisMclachlanPair""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EisMclachlan_energy_pair" "', argument " "2"" of type '" "EisMclachlanPair""'");
    } else {
      EisMclachlanPair * temp = reinterpret_cast< EisMclachlanPair * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EisMclachlan_energy_pair" "', argument " "3"" of type '" "Box *""'"); 
  }
  arg3 = reinterpret_cast< Box * >(argp3);
  result = (flt)(arg1)->energy_pair(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlan_setForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< EisMclachlanAtom,EisMclachlanPair > *arg1 = (NListed< EisMclachlanAtom,EisMclachlanPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EisMclachlan_setForces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_EisMclachlanAtom_EisMclachlanPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlan_setForces" "', argument " "1"" of type '" "NListed< EisMclachlanAtom,EisMclachlanPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< EisMclachlanAtom,EisMclachlanPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EisMclachlan_setForces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->setForces(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlan_setForcesGetPressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< EisMclachlanAtom,EisMclachlanPair > *arg1 = (NListed< EisMclachlanAtom,EisMclachlanPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EisMclachlan_setForcesGetPressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_EisMclachlanAtom_EisMclachlanPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlan_setForcesGetPressure" "', argument " "1"" of type '" "NListed< EisMclachlanAtom,EisMclachlanPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< EisMclachlanAtom,EisMclachlanPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EisMclachlan_setForcesGetPressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->setForcesGetPressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlan_forces_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< EisMclachlanAtom,EisMclachlanPair > *arg1 = (NListed< EisMclachlanAtom,EisMclachlanPair > *) 0 ;
  SwigValueWrapper< EisMclachlanPair > arg2 ;
  Box *arg3 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EisMclachlan_forces_pair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_EisMclachlanAtom_EisMclachlanPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlan_forces_pair" "', argument " "1"" of type '" "NListed< EisMclachlanAtom,EisMclachlanPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< EisMclachlanAtom,EisMclachlanPair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_EisMclachlanPair,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EisMclachlan_forces_pair" "', argument " "2"" of type '" "EisMclachlanPair""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EisMclachlan_forces_pair" "', argument " "2"" of type '" "EisMclachlanPair""'");
    } else {
      EisMclachlanPair * temp = reinterpret_cast< EisMclachlanPair * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EisMclachlan_forces_pair" "', argument " "3"" of type '" "Box *""'"); 
  }
  arg3 = reinterpret_cast< Box * >(argp3);
  result = (arg1)->forces_pair(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlan_atom_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< EisMclachlanAtom,EisMclachlanPair > *arg1 = (NListed< EisMclachlanAtom,EisMclachlanPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< EisMclachlanAtom > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EisMclachlan_atom_list",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_EisMclachlanAtom_EisMclachlanPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlan_atom_list" "', argument " "1"" of type '" "NListed< EisMclachlanAtom,EisMclachlanPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< EisMclachlanAtom,EisMclachlanPair > * >(argp1);
  result = (std::vector< EisMclachlanAtom > *) &(arg1)->atom_list();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_EisMclachlanAtom_std__allocatorT_EisMclachlanAtom_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EisMclachlan_nlist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< EisMclachlanAtom,EisMclachlanPair > *arg1 = (NListed< EisMclachlanAtom,EisMclachlanPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  neighborlist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EisMclachlan_nlist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_EisMclachlanAtom_EisMclachlanPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EisMclachlan_nlist" "', argument " "1"" of type '" "NListed< EisMclachlanAtom,EisMclachlanPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< EisMclachlanAtom,EisMclachlanPair > * >(argp1);
  result = (neighborlist *)(arg1)->nlist();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_neighborlist, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EisMclachlan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< EisMclachlanAtom,EisMclachlanPair > *arg1 = (NListed< EisMclachlanAtom,EisMclachlanPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_EisMclachlan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_EisMclachlanAtom_EisMclachlanPair_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EisMclachlan" "', argument " "1"" of type '" "NListed< EisMclachlanAtom,EisMclachlanPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< EisMclachlanAtom,EisMclachlanPair > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EisMclachlan_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NListedT_EisMclachlanAtom_EisMclachlanPair_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LJish(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NListed< LJishAtom,LJishPair > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LJish",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LJish" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  result = (NListed< LJishAtom,LJishPair > *)new NListed< LJishAtom,LJishPair >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NListedT_LJishAtom_LJishPair_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJish_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJishAtom,LJishPair > *arg1 = (NListed< LJishAtom,LJishPair > *) 0 ;
  SwigValueWrapper< LJishAtom > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJish_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJishAtom_LJishPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJish_add" "', argument " "1"" of type '" "NListed< LJishAtom,LJishPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJishAtom,LJishPair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJishAtom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJish_add" "', argument " "2"" of type '" "LJishAtom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJish_add" "', argument " "2"" of type '" "LJishAtom""'");
    } else {
      LJishAtom * temp = reinterpret_cast< LJishAtom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->add(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJish_update_pairs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJishAtom,LJishPair > *arg1 = (NListed< LJishAtom,LJishPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJish_update_pairs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJishAtom_LJishPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJish_update_pairs" "', argument " "1"" of type '" "NListed< LJishAtom,LJishPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJishAtom,LJishPair > * >(argp1);
  (arg1)->update_pairs();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJish_getpair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJishAtom,LJishPair > *arg1 = (NListed< LJishAtom,LJishPair > *) 0 ;
  idpair *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< LJishPair > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJish_getpair",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJishAtom_LJishPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJish_getpair" "', argument " "1"" of type '" "NListed< LJishAtom,LJishPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJishAtom,LJishPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_idpair,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJish_getpair" "', argument " "2"" of type '" "idpair &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJish_getpair" "', argument " "2"" of type '" "idpair &""'"); 
  }
  arg2 = reinterpret_cast< idpair * >(argp2);
  result = (arg1)->getpair(*arg2);
  resultobj = SWIG_NewPointerObj((new LJishPair(static_cast< const LJishPair& >(result))), SWIGTYPE_p_LJishPair, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJish_energy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJishAtom,LJishPair > *arg1 = (NListed< LJishAtom,LJishPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  idpair *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJish_energy",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJishAtom_LJishPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJish_energy" "', argument " "1"" of type '" "NListed< LJishAtom,LJishPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJishAtom,LJishPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJish_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_idpair,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LJish_energy" "', argument " "3"" of type '" "idpair &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJish_energy" "', argument " "3"" of type '" "idpair &""'"); 
  }
  arg3 = reinterpret_cast< idpair * >(argp3);
  result = (flt)(arg1)->energy(arg2,*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJish_energy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJishAtom,LJishPair > *arg1 = (NListed< LJishAtom,LJishPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJish_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJishAtom_LJishPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJish_energy" "', argument " "1"" of type '" "NListed< LJishAtom,LJishPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJishAtom,LJishPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJish_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJish_energy(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NListedT_LJishAtom_LJishPair_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LJish_energy__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NListedT_LJishAtom_LJishPair_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_idpair, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LJish_energy__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LJish_energy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NListed< LJishAtom,LJishPair >::energy(Box *,idpair &)\n"
    "    NListed< LJishAtom,LJishPair >::energy(Box *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LJish_pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJishAtom,LJishPair > *arg1 = (NListed< LJishAtom,LJishPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJish_pressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJishAtom_LJishPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJish_pressure" "', argument " "1"" of type '" "NListed< LJishAtom,LJishPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJishAtom,LJishPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJish_pressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->pressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJish_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJishAtom,LJishPair > *arg1 = (NListed< LJishAtom,LJishPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJish_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJishAtom_LJishPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJish_size" "', argument " "1"" of type '" "NListed< LJishAtom,LJishPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJishAtom,LJishPair > * >(argp1);
  result = (uint)(arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJish_energy_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJishAtom,LJishPair > *arg1 = (NListed< LJishAtom,LJishPair > *) 0 ;
  SwigValueWrapper< LJishPair > arg2 ;
  Box *arg3 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJish_energy_pair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJishAtom_LJishPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJish_energy_pair" "', argument " "1"" of type '" "NListed< LJishAtom,LJishPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJishAtom,LJishPair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJishPair,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJish_energy_pair" "', argument " "2"" of type '" "LJishPair""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJish_energy_pair" "', argument " "2"" of type '" "LJishPair""'");
    } else {
      LJishPair * temp = reinterpret_cast< LJishPair * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LJish_energy_pair" "', argument " "3"" of type '" "Box *""'"); 
  }
  arg3 = reinterpret_cast< Box * >(argp3);
  result = (flt)(arg1)->energy_pair(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJish_setForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJishAtom,LJishPair > *arg1 = (NListed< LJishAtom,LJishPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJish_setForces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJishAtom_LJishPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJish_setForces" "', argument " "1"" of type '" "NListed< LJishAtom,LJishPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJishAtom,LJishPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJish_setForces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->setForces(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJish_setForcesGetPressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJishAtom,LJishPair > *arg1 = (NListed< LJishAtom,LJishPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LJish_setForcesGetPressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJishAtom_LJishPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJish_setForcesGetPressure" "', argument " "1"" of type '" "NListed< LJishAtom,LJishPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJishAtom,LJishPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJish_setForcesGetPressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->setForcesGetPressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJish_forces_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJishAtom,LJishPair > *arg1 = (NListed< LJishAtom,LJishPair > *) 0 ;
  SwigValueWrapper< LJishPair > arg2 ;
  Box *arg3 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LJish_forces_pair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJishAtom_LJishPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJish_forces_pair" "', argument " "1"" of type '" "NListed< LJishAtom,LJishPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJishAtom,LJishPair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LJishPair,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LJish_forces_pair" "', argument " "2"" of type '" "LJishPair""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LJish_forces_pair" "', argument " "2"" of type '" "LJishPair""'");
    } else {
      LJishPair * temp = reinterpret_cast< LJishPair * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LJish_forces_pair" "', argument " "3"" of type '" "Box *""'"); 
  }
  arg3 = reinterpret_cast< Box * >(argp3);
  result = (arg1)->forces_pair(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJish_atom_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJishAtom,LJishPair > *arg1 = (NListed< LJishAtom,LJishPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< LJishAtom > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJish_atom_list",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJishAtom_LJishPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJish_atom_list" "', argument " "1"" of type '" "NListed< LJishAtom,LJishPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJishAtom,LJishPair > * >(argp1);
  result = (std::vector< LJishAtom > *) &(arg1)->atom_list();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_LJishAtom_std__allocatorT_LJishAtom_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LJish_nlist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJishAtom,LJishPair > *arg1 = (NListed< LJishAtom,LJishPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  neighborlist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LJish_nlist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJishAtom_LJishPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LJish_nlist" "', argument " "1"" of type '" "NListed< LJishAtom,LJishPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJishAtom,LJishPair > * >(argp1);
  result = (neighborlist *)(arg1)->nlist();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_neighborlist, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LJish(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< LJishAtom,LJishPair > *arg1 = (NListed< LJishAtom,LJishPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LJish",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_LJishAtom_LJishPair_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LJish" "', argument " "1"" of type '" "NListed< LJishAtom,LJishPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< LJishAtom,LJishPair > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LJish_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NListedT_LJishAtom_LJishPair_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_HertzianSimple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SimpleListed< HertzianAtom,HertzianPair > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_HertzianSimple")) SWIG_fail;
  result = (SimpleListed< HertzianAtom,HertzianPair > *)new SimpleListed< HertzianAtom,HertzianPair >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SimpleListedT_HertzianAtom_HertzianPair_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianSimple_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SimpleListed< HertzianAtom,HertzianPair > *arg1 = (SimpleListed< HertzianAtom,HertzianPair > *) 0 ;
  SwigValueWrapper< HertzianAtom > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HertzianSimple_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SimpleListedT_HertzianAtom_HertzianPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianSimple_add" "', argument " "1"" of type '" "SimpleListed< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< SimpleListed< HertzianAtom,HertzianPair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HertzianAtom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HertzianSimple_add" "', argument " "2"" of type '" "HertzianAtom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HertzianSimple_add" "', argument " "2"" of type '" "HertzianAtom""'");
    } else {
      HertzianAtom * temp = reinterpret_cast< HertzianAtom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->add(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianSimple_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SimpleListed< HertzianAtom,HertzianPair > *arg1 = (SimpleListed< HertzianAtom,HertzianPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HertzianSimple_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SimpleListedT_HertzianAtom_HertzianPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianSimple_energy" "', argument " "1"" of type '" "SimpleListed< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< SimpleListed< HertzianAtom,HertzianPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HertzianSimple_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianSimple_pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SimpleListed< HertzianAtom,HertzianPair > *arg1 = (SimpleListed< HertzianAtom,HertzianPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HertzianSimple_pressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SimpleListedT_HertzianAtom_HertzianPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianSimple_pressure" "', argument " "1"" of type '" "SimpleListed< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< SimpleListed< HertzianAtom,HertzianPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HertzianSimple_pressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->pressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianSimple_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SimpleListed< HertzianAtom,HertzianPair > *arg1 = (SimpleListed< HertzianAtom,HertzianPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HertzianSimple_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SimpleListedT_HertzianAtom_HertzianPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianSimple_size" "', argument " "1"" of type '" "SimpleListed< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< SimpleListed< HertzianAtom,HertzianPair > * >(argp1);
  result = (uint)(arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianSimple_setForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SimpleListed< HertzianAtom,HertzianPair > *arg1 = (SimpleListed< HertzianAtom,HertzianPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HertzianSimple_setForces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SimpleListedT_HertzianAtom_HertzianPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianSimple_setForces" "', argument " "1"" of type '" "SimpleListed< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< SimpleListed< HertzianAtom,HertzianPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HertzianSimple_setForces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->setForces(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianSimple_setForcesGetPressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SimpleListed< HertzianAtom,HertzianPair > *arg1 = (SimpleListed< HertzianAtom,HertzianPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HertzianSimple_setForcesGetPressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SimpleListedT_HertzianAtom_HertzianPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianSimple_setForcesGetPressure" "', argument " "1"" of type '" "SimpleListed< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< SimpleListed< HertzianAtom,HertzianPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HertzianSimple_setForcesGetPressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->setForcesGetPressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianSimple_atom_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SimpleListed< HertzianAtom,HertzianPair > *arg1 = (SimpleListed< HertzianAtom,HertzianPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< HertzianAtom > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HertzianSimple_atom_list",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SimpleListedT_HertzianAtom_HertzianPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianSimple_atom_list" "', argument " "1"" of type '" "SimpleListed< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< SimpleListed< HertzianAtom,HertzianPair > * >(argp1);
  result = (std::vector< HertzianAtom > *) &(arg1)->atom_list();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HertzianAtom_std__allocatorT_HertzianAtom_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HertzianSimple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SimpleListed< HertzianAtom,HertzianPair > *arg1 = (SimpleListed< HertzianAtom,HertzianPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_HertzianSimple",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SimpleListedT_HertzianAtom_HertzianPair_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HertzianSimple" "', argument " "1"" of type '" "SimpleListed< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< SimpleListed< HertzianAtom,HertzianPair > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HertzianSimple_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SimpleListedT_HertzianAtom_HertzianPair_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_HertzianPlain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NListed< HertzianAtom,HertzianPair > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_HertzianPlain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HertzianPlain" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  result = (NListed< HertzianAtom,HertzianPair > *)new NListed< HertzianAtom,HertzianPair >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NListedT_HertzianAtom_HertzianPair_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianPlain_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HertzianAtom,HertzianPair > *arg1 = (NListed< HertzianAtom,HertzianPair > *) 0 ;
  SwigValueWrapper< HertzianAtom > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HertzianPlain_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HertzianAtom_HertzianPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPlain_add" "', argument " "1"" of type '" "NListed< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HertzianAtom,HertzianPair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HertzianAtom,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HertzianPlain_add" "', argument " "2"" of type '" "HertzianAtom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HertzianPlain_add" "', argument " "2"" of type '" "HertzianAtom""'");
    } else {
      HertzianAtom * temp = reinterpret_cast< HertzianAtom * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->add(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianPlain_update_pairs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HertzianAtom,HertzianPair > *arg1 = (NListed< HertzianAtom,HertzianPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HertzianPlain_update_pairs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HertzianAtom_HertzianPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPlain_update_pairs" "', argument " "1"" of type '" "NListed< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HertzianAtom,HertzianPair > * >(argp1);
  (arg1)->update_pairs();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianPlain_getpair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HertzianAtom,HertzianPair > *arg1 = (NListed< HertzianAtom,HertzianPair > *) 0 ;
  idpair *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< HertzianPair > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HertzianPlain_getpair",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HertzianAtom_HertzianPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPlain_getpair" "', argument " "1"" of type '" "NListed< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HertzianAtom,HertzianPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_idpair,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HertzianPlain_getpair" "', argument " "2"" of type '" "idpair &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HertzianPlain_getpair" "', argument " "2"" of type '" "idpair &""'"); 
  }
  arg2 = reinterpret_cast< idpair * >(argp2);
  result = (arg1)->getpair(*arg2);
  resultobj = SWIG_NewPointerObj((new HertzianPair(static_cast< const HertzianPair& >(result))), SWIGTYPE_p_HertzianPair, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianPlain_energy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HertzianAtom,HertzianPair > *arg1 = (NListed< HertzianAtom,HertzianPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  idpair *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:HertzianPlain_energy",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HertzianAtom_HertzianPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPlain_energy" "', argument " "1"" of type '" "NListed< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HertzianAtom,HertzianPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HertzianPlain_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_idpair,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HertzianPlain_energy" "', argument " "3"" of type '" "idpair &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HertzianPlain_energy" "', argument " "3"" of type '" "idpair &""'"); 
  }
  arg3 = reinterpret_cast< idpair * >(argp3);
  result = (flt)(arg1)->energy(arg2,*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianPlain_energy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HertzianAtom,HertzianPair > *arg1 = (NListed< HertzianAtom,HertzianPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HertzianPlain_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HertzianAtom_HertzianPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPlain_energy" "', argument " "1"" of type '" "NListed< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HertzianAtom,HertzianPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HertzianPlain_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianPlain_energy(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NListedT_HertzianAtom_HertzianPair_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HertzianPlain_energy__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NListedT_HertzianAtom_HertzianPair_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_idpair, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HertzianPlain_energy__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'HertzianPlain_energy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NListed< HertzianAtom,HertzianPair >::energy(Box *,idpair &)\n"
    "    NListed< HertzianAtom,HertzianPair >::energy(Box *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HertzianPlain_pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HertzianAtom,HertzianPair > *arg1 = (NListed< HertzianAtom,HertzianPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HertzianPlain_pressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HertzianAtom_HertzianPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPlain_pressure" "', argument " "1"" of type '" "NListed< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HertzianAtom,HertzianPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HertzianPlain_pressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->pressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianPlain_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HertzianAtom,HertzianPair > *arg1 = (NListed< HertzianAtom,HertzianPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HertzianPlain_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HertzianAtom_HertzianPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPlain_size" "', argument " "1"" of type '" "NListed< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HertzianAtom,HertzianPair > * >(argp1);
  result = (uint)(arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianPlain_energy_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HertzianAtom,HertzianPair > *arg1 = (NListed< HertzianAtom,HertzianPair > *) 0 ;
  SwigValueWrapper< HertzianPair > arg2 ;
  Box *arg3 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:HertzianPlain_energy_pair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HertzianAtom_HertzianPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPlain_energy_pair" "', argument " "1"" of type '" "NListed< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HertzianAtom,HertzianPair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HertzianPair,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HertzianPlain_energy_pair" "', argument " "2"" of type '" "HertzianPair""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HertzianPlain_energy_pair" "', argument " "2"" of type '" "HertzianPair""'");
    } else {
      HertzianPair * temp = reinterpret_cast< HertzianPair * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HertzianPlain_energy_pair" "', argument " "3"" of type '" "Box *""'"); 
  }
  arg3 = reinterpret_cast< Box * >(argp3);
  result = (flt)(arg1)->energy_pair(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianPlain_setForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HertzianAtom,HertzianPair > *arg1 = (NListed< HertzianAtom,HertzianPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HertzianPlain_setForces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HertzianAtom_HertzianPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPlain_setForces" "', argument " "1"" of type '" "NListed< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HertzianAtom,HertzianPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HertzianPlain_setForces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->setForces(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianPlain_setForcesGetPressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HertzianAtom,HertzianPair > *arg1 = (NListed< HertzianAtom,HertzianPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HertzianPlain_setForcesGetPressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HertzianAtom_HertzianPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPlain_setForcesGetPressure" "', argument " "1"" of type '" "NListed< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HertzianAtom,HertzianPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HertzianPlain_setForcesGetPressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->setForcesGetPressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianPlain_forces_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HertzianAtom,HertzianPair > *arg1 = (NListed< HertzianAtom,HertzianPair > *) 0 ;
  SwigValueWrapper< HertzianPair > arg2 ;
  Box *arg3 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:HertzianPlain_forces_pair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HertzianAtom_HertzianPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPlain_forces_pair" "', argument " "1"" of type '" "NListed< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HertzianAtom,HertzianPair > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HertzianPair,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HertzianPlain_forces_pair" "', argument " "2"" of type '" "HertzianPair""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HertzianPlain_forces_pair" "', argument " "2"" of type '" "HertzianPair""'");
    } else {
      HertzianPair * temp = reinterpret_cast< HertzianPair * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HertzianPlain_forces_pair" "', argument " "3"" of type '" "Box *""'"); 
  }
  arg3 = reinterpret_cast< Box * >(argp3);
  result = (arg1)->forces_pair(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianPlain_atom_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HertzianAtom,HertzianPair > *arg1 = (NListed< HertzianAtom,HertzianPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< HertzianAtom > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HertzianPlain_atom_list",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HertzianAtom_HertzianPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPlain_atom_list" "', argument " "1"" of type '" "NListed< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HertzianAtom,HertzianPair > * >(argp1);
  result = (std::vector< HertzianAtom > *) &(arg1)->atom_list();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HertzianAtom_std__allocatorT_HertzianAtom_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HertzianPlain_nlist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HertzianAtom,HertzianPair > *arg1 = (NListed< HertzianAtom,HertzianPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  neighborlist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HertzianPlain_nlist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HertzianAtom_HertzianPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HertzianPlain_nlist" "', argument " "1"" of type '" "NListed< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HertzianAtom,HertzianPair > * >(argp1);
  result = (neighborlist *)(arg1)->nlist();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_neighborlist, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HertzianPlain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListed< HertzianAtom,HertzianPair > *arg1 = (NListed< HertzianAtom,HertzianPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_HertzianPlain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedT_HertzianAtom_HertzianPair_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HertzianPlain" "', argument " "1"" of type '" "NListed< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListed< HertzianAtom,HertzianPair > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HertzianPlain_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NListedT_HertzianAtom_HertzianPair_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Hertzian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  neighborlist *arg1 = (neighborlist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NListedVirial< HertzianAtom,HertzianPair > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Hertzian",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_neighborlist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Hertzian" "', argument " "1"" of type '" "neighborlist *""'"); 
  }
  arg1 = reinterpret_cast< neighborlist * >(argp1);
  result = (NListedVirial< HertzianAtom,HertzianPair > *)new NListedVirial< HertzianAtom,HertzianPair >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NListedVirialT_HertzianAtom_HertzianPair_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hertzian_setForces__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListedVirial< HertzianAtom,HertzianPair > *arg1 = (NListedVirial< HertzianAtom,HertzianPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hertzian_setForces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedVirialT_HertzianAtom_HertzianPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hertzian_setForces" "', argument " "1"" of type '" "NListedVirial< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListedVirial< HertzianAtom,HertzianPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hertzian_setForces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  (arg1)->setForces(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hertzian_setForces__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListedVirial< HertzianAtom,HertzianPair > *arg1 = (NListedVirial< HertzianAtom,HertzianPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  fpairxFunct *arg3 = (fpairxFunct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Hertzian_setForces",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedVirialT_HertzianAtom_HertzianPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hertzian_setForces" "', argument " "1"" of type '" "NListedVirial< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListedVirial< HertzianAtom,HertzianPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hertzian_setForces" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_fpairxFunct, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Hertzian_setForces" "', argument " "3"" of type '" "fpairxFunct *""'"); 
  }
  arg3 = reinterpret_cast< fpairxFunct * >(argp3);
  (arg1)->setForces(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hertzian_setForces(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NListedVirialT_HertzianAtom_HertzianPair_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Hertzian_setForces__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NListedVirialT_HertzianAtom_HertzianPair_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Box, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_fpairxFunct, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Hertzian_setForces__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Hertzian_setForces'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NListedVirial< HertzianAtom,HertzianPair >::setForces(Box *)\n"
    "    NListedVirial< HertzianAtom,HertzianPair >::setForces(Box *,fpairxFunct *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Hertzian_setForcesGetPressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListedVirial< HertzianAtom,HertzianPair > *arg1 = (NListedVirial< HertzianAtom,HertzianPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hertzian_setForcesGetPressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedVirialT_HertzianAtom_HertzianPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hertzian_setForcesGetPressure" "', argument " "1"" of type '" "NListedVirial< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListedVirial< HertzianAtom,HertzianPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hertzian_setForcesGetPressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->setForcesGetPressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hertzian_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListedVirial< HertzianAtom,HertzianPair > *arg1 = (NListedVirial< HertzianAtom,HertzianPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hertzian_energy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedVirialT_HertzianAtom_HertzianPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hertzian_energy" "', argument " "1"" of type '" "NListedVirial< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListedVirial< HertzianAtom,HertzianPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hertzian_energy" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->energy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hertzian_pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListedVirial< HertzianAtom,HertzianPair > *arg1 = (NListedVirial< HertzianAtom,HertzianPair > *) 0 ;
  Box *arg2 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Hertzian_pressure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedVirialT_HertzianAtom_HertzianPair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hertzian_pressure" "', argument " "1"" of type '" "NListedVirial< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListedVirial< HertzianAtom,HertzianPair > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hertzian_pressure" "', argument " "2"" of type '" "Box *""'"); 
  }
  arg2 = reinterpret_cast< Box * >(argp2);
  result = (flt)(arg1)->pressure(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Hertzian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NListedVirial< HertzianAtom,HertzianPair > *arg1 = (NListedVirial< HertzianAtom,HertzianPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Hertzian",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NListedVirialT_HertzianAtom_HertzianPair_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Hertzian" "', argument " "1"" of type '" "NListedVirial< HertzianAtom,HertzianPair > *""'"); 
  }
  arg1 = reinterpret_cast< NListedVirial< HertzianAtom,HertzianPair > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Hertzian_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NListedVirialT_HertzianAtom_HertzianPair_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_collection_setForces__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collection_setForces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_setForces" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collection_setForces" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setForces(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collection_setForces__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collection_setForces",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_setForces" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  (arg1)->setForces();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collection_setForces(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_collection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_collection_setForces__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_collection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_collection_setForces__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'collection_setForces'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    collection::setForces(bool)\n"
    "    collection::setForces()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_collection_timestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collection_timestep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_timestep" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  (arg1)->timestep();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collection_dof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collection_dof",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_dof" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  result = (flt)(arg1)->dof();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collection_potentialenergy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collection_potentialenergy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_potentialenergy" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  result = (flt)(arg1)->potentialenergy();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collection_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collection_energy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_energy" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  result = (flt)(arg1)->energy();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collection_temp__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collection_temp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_temp" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collection_temp" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (flt)(arg1)->temp(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collection_temp__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collection_temp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_temp" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  result = (flt)(arg1)->temp();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collection_temp(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_collection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_collection_temp__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_collection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_collection_temp__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'collection_temp'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    collection::temp(bool)\n"
    "    collection::temp()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_collection_kinetic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collection_kinetic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_kinetic" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  result = (flt)(arg1)->kinetic();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collection_virial(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collection_virial",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_virial" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  result = (flt)(arg1)->virial();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collection_pressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collection_pressure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_pressure" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  result = (flt)(arg1)->pressure();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collection_getbox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Box *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collection_getbox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_getbox" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  result = (Box *)(arg1)->getbox();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Box, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collection_com(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collection_com",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_com" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  result = (arg1)->com();
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collection_comv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collection_comv",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_comv" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  result = (arg1)->comv();
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collection_angmomentum__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  Vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collection_angmomentum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_angmomentum" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Vector2T_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "collection_angmomentum" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "collection_angmomentum" "', argument " "2"" of type '" "Vec const &""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  result = (flt)(arg1)->angmomentum((Vec const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collection_angmomentum__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collection_angmomentum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_angmomentum" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  result = (flt)(arg1)->angmomentum();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collection_angmomentum(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_collection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_collection_angmomentum__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_collection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vector2T_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_collection_angmomentum__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'collection_angmomentum'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    collection::angmomentum(Vec const &)\n"
    "    collection::angmomentum()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_collection_gyradius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collection_gyradius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_gyradius" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  result = (flt)(arg1)->gyradius();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_collection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_collection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_collection" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collection_resetcomv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collection_resetcomv",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_resetcomv" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  (arg1)->resetcomv();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collection_resetL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collection_resetL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_resetL" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  (arg1)->resetL();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collection_scaleVs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collection_scaleVs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_scaleVs" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collection_scaleVs" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  (arg1)->scaleVs(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collection_scaleVelocitiesT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collection_scaleVelocitiesT",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_scaleVelocitiesT" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collection_scaleVelocitiesT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  (arg1)->scaleVelocitiesT(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collection_scaleVelocitiesE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collection_scaleVelocitiesE",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_scaleVelocitiesE" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collection_scaleVelocitiesE" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  (arg1)->scaleVelocitiesE(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collection_addInteraction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  interaction *arg2 = (interaction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collection_addInteraction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_addInteraction" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_interaction, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "collection_addInteraction" "', argument " "2"" of type '" "interaction *""'"); 
  }
  arg2 = reinterpret_cast< interaction * >(argp2);
  (arg1)->addInteraction(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collection_addTracker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  statetracker *arg2 = (statetracker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collection_addTracker",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_addTracker" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_statetracker, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "collection_addTracker" "', argument " "2"" of type '" "statetracker *""'"); 
  }
  arg2 = reinterpret_cast< statetracker * >(argp2);
  (arg1)->addTracker(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collection_getInteractions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< interaction * > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collection_getInteractions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_getInteractions" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  result = (arg1)->getInteractions();
  resultobj = swig::from(static_cast< std::vector<interaction*,std::allocator< interaction * > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collection_numInteraction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collection *arg1 = (collection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collection_numInteraction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collection_numInteraction" "', argument " "1"" of type '" "collection *""'"); 
  }
  arg1 = reinterpret_cast< collection * >(argp1);
  result = (uint)(arg1)->numInteraction();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *collection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_collection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_StaticCollec__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  std::vector< atomgroup * > arg2 ;
  std::vector< interaction * > arg3 ;
  std::vector< statetracker * > arg4 ;
  std::vector< constraint * > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  StaticCollec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_StaticCollec",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StaticCollec" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_StaticCollec" "', argument " "2"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_StaticCollec" "', argument " "3"" of type '" "std::vector< interaction * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_StaticCollec" "', argument " "4"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<constraint*,std::allocator< constraint * > > *ptr = (std::vector<constraint*,std::allocator< constraint * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_StaticCollec" "', argument " "5"" of type '" "std::vector< constraint * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (StaticCollec *)new StaticCollec(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_StaticCollec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StaticCollec__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  std::vector< atomgroup * > arg2 ;
  std::vector< interaction * > arg3 ;
  std::vector< statetracker * > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  StaticCollec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_StaticCollec",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StaticCollec" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_StaticCollec" "', argument " "2"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_StaticCollec" "', argument " "3"" of type '" "std::vector< interaction * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_StaticCollec" "', argument " "4"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (StaticCollec *)new StaticCollec(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_StaticCollec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StaticCollec__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  std::vector< atomgroup * > arg2 ;
  std::vector< interaction * > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  StaticCollec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_StaticCollec",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StaticCollec" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_StaticCollec" "', argument " "2"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_StaticCollec" "', argument " "3"" of type '" "std::vector< interaction * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (StaticCollec *)new StaticCollec(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_StaticCollec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StaticCollec__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  std::vector< atomgroup * > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  StaticCollec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_StaticCollec",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StaticCollec" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_StaticCollec" "', argument " "2"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (StaticCollec *)new StaticCollec(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_StaticCollec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StaticCollec(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_StaticCollec__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_StaticCollec__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_StaticCollec__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<constraint*,std::allocator< constraint * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_StaticCollec__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_StaticCollec'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    StaticCollec::StaticCollec(Box *,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >,std::vector< constraint * >)\n"
    "    StaticCollec::StaticCollec(Box *,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >)\n"
    "    StaticCollec::StaticCollec(Box *,std::vector< atomgroup * >,std::vector< interaction * >)\n"
    "    StaticCollec::StaticCollec(Box *,std::vector< atomgroup * >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StaticCollec_timestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StaticCollec *arg1 = (StaticCollec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StaticCollec_timestep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StaticCollec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StaticCollec_timestep" "', argument " "1"" of type '" "StaticCollec *""'"); 
  }
  arg1 = reinterpret_cast< StaticCollec * >(argp1);
  (arg1)->timestep();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StaticCollec_update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StaticCollec *arg1 = (StaticCollec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StaticCollec_update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StaticCollec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StaticCollec_update" "', argument " "1"" of type '" "StaticCollec *""'"); 
  }
  arg1 = reinterpret_cast< StaticCollec * >(argp1);
  (arg1)->update();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StaticCollec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StaticCollec *arg1 = (StaticCollec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StaticCollec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StaticCollec, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StaticCollec" "', argument " "1"" of type '" "StaticCollec *""'"); 
  }
  arg1 = reinterpret_cast< StaticCollec * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StaticCollec_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_StaticCollec, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_collectionSol__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  std::vector< atomgroup * > arg5 ;
  std::vector< interaction * > arg6 ;
  std::vector< statetracker * > arg7 ;
  std::vector< constraint * > arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  collectionSol *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_collectionSol",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionSol" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionSol" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionSol" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionSol" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionSol" "', argument " "5"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionSol" "', argument " "6"" of type '" "std::vector< interaction * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionSol" "', argument " "7"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<constraint*,std::allocator< constraint * > > *ptr = (std::vector<constraint*,std::allocator< constraint * > > *)0;
    int res = swig::asptr(obj7, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionSol" "', argument " "8"" of type '" "std::vector< constraint * >""'"); 
    }
    arg8 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionSol *)new collectionSol(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionSol, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionSol__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  std::vector< atomgroup * > arg5 ;
  std::vector< interaction * > arg6 ;
  std::vector< statetracker * > arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  collectionSol *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_collectionSol",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionSol" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionSol" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionSol" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionSol" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionSol" "', argument " "5"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionSol" "', argument " "6"" of type '" "std::vector< interaction * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionSol" "', argument " "7"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionSol *)new collectionSol(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionSol, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionSol__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  std::vector< atomgroup * > arg5 ;
  std::vector< interaction * > arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  collectionSol *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_collectionSol",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionSol" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionSol" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionSol" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionSol" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionSol" "', argument " "5"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionSol" "', argument " "6"" of type '" "std::vector< interaction * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionSol *)new collectionSol(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionSol, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionSol__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  std::vector< atomgroup * > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  collectionSol *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_collectionSol",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionSol" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionSol" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionSol" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionSol" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionSol" "', argument " "5"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionSol *)new collectionSol(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionSol, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionSol__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  collectionSol *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_collectionSol",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionSol" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionSol" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionSol" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionSol" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  result = (collectionSol *)new collectionSol(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionSol, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionSol(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_collectionSol__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_collectionSol__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_collectionSol__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_collectionSol__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = swig::asptr(argv[7], (std::vector<constraint*,std::allocator< constraint * > >**)(0));
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_new_collectionSol__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_collectionSol'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    collectionSol::collectionSol(Box *,flt const,flt const,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >,std::vector< constraint * >)\n"
    "    collectionSol::collectionSol(Box *,flt const,flt const,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >)\n"
    "    collectionSol::collectionSol(Box *,flt const,flt const,flt const,std::vector< atomgroup * >,std::vector< interaction * >)\n"
    "    collectionSol::collectionSol(Box *,flt const,flt const,flt const,std::vector< atomgroup * >)\n"
    "    collectionSol::collectionSol(Box *,flt const,flt const,flt const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_collectionSol_changeT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionSol *arg1 = (collectionSol *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:collectionSol_changeT",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionSol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionSol_changeT" "', argument " "1"" of type '" "collectionSol *""'"); 
  }
  arg1 = reinterpret_cast< collectionSol * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionSol_changeT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "collectionSol_changeT" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "collectionSol_changeT" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  (arg1)->changeT(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionSol_timestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionSol *arg1 = (collectionSol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionSol_timestep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionSol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionSol_timestep" "', argument " "1"" of type '" "collectionSol *""'"); 
  }
  arg1 = reinterpret_cast< collectionSol * >(argp1);
  (arg1)->timestep();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_collectionSol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionSol *arg1 = (collectionSol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_collectionSol",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionSol, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_collectionSol" "', argument " "1"" of type '" "collectionSol *""'"); 
  }
  arg1 = reinterpret_cast< collectionSol * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *collectionSol_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_collectionSol, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_collectionSolHT__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  std::vector< atomgroup * > arg5 ;
  std::vector< interaction * > arg6 ;
  std::vector< statetracker * > arg7 ;
  std::vector< constraint * > arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  collectionSolHT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_collectionSolHT",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionSolHT" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionSolHT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionSolHT" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionSolHT" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionSolHT" "', argument " "5"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionSolHT" "', argument " "6"" of type '" "std::vector< interaction * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionSolHT" "', argument " "7"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<constraint*,std::allocator< constraint * > > *ptr = (std::vector<constraint*,std::allocator< constraint * > > *)0;
    int res = swig::asptr(obj7, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionSolHT" "', argument " "8"" of type '" "std::vector< constraint * >""'"); 
    }
    arg8 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionSolHT *)new collectionSolHT(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionSolHT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionSolHT__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  std::vector< atomgroup * > arg5 ;
  std::vector< interaction * > arg6 ;
  std::vector< statetracker * > arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  collectionSolHT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_collectionSolHT",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionSolHT" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionSolHT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionSolHT" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionSolHT" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionSolHT" "', argument " "5"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionSolHT" "', argument " "6"" of type '" "std::vector< interaction * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionSolHT" "', argument " "7"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionSolHT *)new collectionSolHT(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionSolHT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionSolHT__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  std::vector< atomgroup * > arg5 ;
  std::vector< interaction * > arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  collectionSolHT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_collectionSolHT",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionSolHT" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionSolHT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionSolHT" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionSolHT" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionSolHT" "', argument " "5"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionSolHT" "', argument " "6"" of type '" "std::vector< interaction * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionSolHT *)new collectionSolHT(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionSolHT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionSolHT__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  std::vector< atomgroup * > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  collectionSolHT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_collectionSolHT",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionSolHT" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionSolHT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionSolHT" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionSolHT" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionSolHT" "', argument " "5"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionSolHT *)new collectionSolHT(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionSolHT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionSolHT__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  collectionSolHT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_collectionSolHT",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionSolHT" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionSolHT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionSolHT" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionSolHT" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  result = (collectionSolHT *)new collectionSolHT(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionSolHT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionSolHT(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_collectionSolHT__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_collectionSolHT__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_collectionSolHT__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_collectionSolHT__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = swig::asptr(argv[7], (std::vector<constraint*,std::allocator< constraint * > >**)(0));
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_new_collectionSolHT__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_collectionSolHT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    collectionSolHT::collectionSolHT(Box *,flt const,flt const,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >,std::vector< constraint * >)\n"
    "    collectionSolHT::collectionSolHT(Box *,flt const,flt const,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >)\n"
    "    collectionSolHT::collectionSolHT(Box *,flt const,flt const,flt const,std::vector< atomgroup * >,std::vector< interaction * >)\n"
    "    collectionSolHT::collectionSolHT(Box *,flt const,flt const,flt const,std::vector< atomgroup * >)\n"
    "    collectionSolHT::collectionSolHT(Box *,flt const,flt const,flt const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_collectionSolHT_changeT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionSolHT *arg1 = (collectionSolHT *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:collectionSolHT_changeT",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionSolHT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionSolHT_changeT" "', argument " "1"" of type '" "collectionSolHT *""'"); 
  }
  arg1 = reinterpret_cast< collectionSolHT * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionSolHT_changeT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "collectionSolHT_changeT" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "collectionSolHT_changeT" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  (arg1)->changeT(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionSolHT_timestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionSolHT *arg1 = (collectionSolHT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionSolHT_timestep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionSolHT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionSolHT_timestep" "', argument " "1"" of type '" "collectionSolHT *""'"); 
  }
  arg1 = reinterpret_cast< collectionSolHT * >(argp1);
  (arg1)->timestep();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_collectionSolHT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionSolHT *arg1 = (collectionSolHT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_collectionSolHT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionSolHT, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_collectionSolHT" "', argument " "1"" of type '" "collectionSolHT *""'"); 
  }
  arg1 = reinterpret_cast< collectionSolHT * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *collectionSolHT_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_collectionSolHT, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_collectionVerlet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  std::vector< interaction * > arg4 ;
  std::vector< statetracker * > arg5 ;
  std::vector< constraint * > arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  collectionVerlet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_collectionVerlet",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionVerlet" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionVerlet" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionVerlet" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionVerlet" "', argument " "4"" of type '" "std::vector< interaction * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionVerlet" "', argument " "5"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<constraint*,std::allocator< constraint * > > *ptr = (std::vector<constraint*,std::allocator< constraint * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionVerlet" "', argument " "6"" of type '" "std::vector< constraint * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionVerlet *)new collectionVerlet(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionVerlet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionVerlet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  std::vector< interaction * > arg4 ;
  std::vector< statetracker * > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  collectionVerlet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_collectionVerlet",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionVerlet" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionVerlet" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionVerlet" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionVerlet" "', argument " "4"" of type '" "std::vector< interaction * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionVerlet" "', argument " "5"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionVerlet *)new collectionVerlet(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionVerlet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionVerlet__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  std::vector< interaction * > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  collectionVerlet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_collectionVerlet",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionVerlet" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionVerlet" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionVerlet" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionVerlet" "', argument " "4"" of type '" "std::vector< interaction * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionVerlet *)new collectionVerlet(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionVerlet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionVerlet__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  collectionVerlet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_collectionVerlet",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionVerlet" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionVerlet" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionVerlet" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionVerlet *)new collectionVerlet(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionVerlet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionVerlet__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  collectionVerlet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_collectionVerlet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionVerlet" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionVerlet" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  result = (collectionVerlet *)new collectionVerlet(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionVerlet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionVerlet(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_collectionVerlet__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_collectionVerlet__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_collectionVerlet__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_collectionVerlet__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<constraint*,std::allocator< constraint * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_collectionVerlet__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_collectionVerlet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    collectionVerlet::collectionVerlet(Box *,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >,std::vector< constraint * >)\n"
    "    collectionVerlet::collectionVerlet(Box *,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >)\n"
    "    collectionVerlet::collectionVerlet(Box *,flt const,std::vector< atomgroup * >,std::vector< interaction * >)\n"
    "    collectionVerlet::collectionVerlet(Box *,flt const,std::vector< atomgroup * >)\n"
    "    collectionVerlet::collectionVerlet(Box *,flt const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_collectionVerlet_timestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionVerlet *arg1 = (collectionVerlet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionVerlet_timestep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionVerlet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionVerlet_timestep" "', argument " "1"" of type '" "collectionVerlet *""'"); 
  }
  arg1 = reinterpret_cast< collectionVerlet * >(argp1);
  (arg1)->timestep();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionVerlet_setdt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionVerlet *arg1 = (collectionVerlet *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionVerlet_setdt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionVerlet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionVerlet_setdt" "', argument " "1"" of type '" "collectionVerlet *""'"); 
  }
  arg1 = reinterpret_cast< collectionVerlet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionVerlet_setdt" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  (arg1)->setdt(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_collectionVerlet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionVerlet *arg1 = (collectionVerlet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_collectionVerlet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionVerlet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_collectionVerlet" "', argument " "1"" of type '" "collectionVerlet *""'"); 
  }
  arg1 = reinterpret_cast< collectionVerlet * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *collectionVerlet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_collectionVerlet, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_collectionOverdamped__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  float arg3 ;
  std::vector< atomgroup * > arg4 ;
  std::vector< interaction * > arg5 ;
  std::vector< statetracker * > arg6 ;
  std::vector< constraint * > arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  collectionOverdamped *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_collectionOverdamped",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionOverdamped" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionOverdamped" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionOverdamped" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionOverdamped" "', argument " "4"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionOverdamped" "', argument " "5"" of type '" "std::vector< interaction * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionOverdamped" "', argument " "6"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<constraint*,std::allocator< constraint * > > *ptr = (std::vector<constraint*,std::allocator< constraint * > > *)0;
    int res = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionOverdamped" "', argument " "7"" of type '" "std::vector< constraint * >""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionOverdamped *)new collectionOverdamped(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionOverdamped, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionOverdamped__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  float arg3 ;
  std::vector< atomgroup * > arg4 ;
  std::vector< interaction * > arg5 ;
  std::vector< statetracker * > arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  collectionOverdamped *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_collectionOverdamped",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionOverdamped" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionOverdamped" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionOverdamped" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionOverdamped" "', argument " "4"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionOverdamped" "', argument " "5"" of type '" "std::vector< interaction * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionOverdamped" "', argument " "6"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionOverdamped *)new collectionOverdamped(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionOverdamped, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionOverdamped__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  float arg3 ;
  std::vector< atomgroup * > arg4 ;
  std::vector< interaction * > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  collectionOverdamped *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_collectionOverdamped",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionOverdamped" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionOverdamped" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionOverdamped" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionOverdamped" "', argument " "4"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionOverdamped" "', argument " "5"" of type '" "std::vector< interaction * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionOverdamped *)new collectionOverdamped(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionOverdamped, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionOverdamped__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  float arg3 ;
  std::vector< atomgroup * > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  collectionOverdamped *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_collectionOverdamped",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionOverdamped" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionOverdamped" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionOverdamped" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionOverdamped" "', argument " "4"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionOverdamped *)new collectionOverdamped(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionOverdamped, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionOverdamped__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  collectionOverdamped *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_collectionOverdamped",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionOverdamped" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionOverdamped" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionOverdamped" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (collectionOverdamped *)new collectionOverdamped(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionOverdamped, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionOverdamped(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_collectionOverdamped__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_collectionOverdamped__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_collectionOverdamped__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_collectionOverdamped__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector<constraint*,std::allocator< constraint * > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_collectionOverdamped__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_collectionOverdamped'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    collectionOverdamped::collectionOverdamped(Box *,flt const,float const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >,std::vector< constraint * >)\n"
    "    collectionOverdamped::collectionOverdamped(Box *,flt const,float const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >)\n"
    "    collectionOverdamped::collectionOverdamped(Box *,flt const,float const,std::vector< atomgroup * >,std::vector< interaction * >)\n"
    "    collectionOverdamped::collectionOverdamped(Box *,flt const,float const,std::vector< atomgroup * >)\n"
    "    collectionOverdamped::collectionOverdamped(Box *,flt const,float const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_collectionOverdamped_timestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionOverdamped *arg1 = (collectionOverdamped *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionOverdamped_timestep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionOverdamped, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionOverdamped_timestep" "', argument " "1"" of type '" "collectionOverdamped *""'"); 
  }
  arg1 = reinterpret_cast< collectionOverdamped * >(argp1);
  (arg1)->timestep();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionOverdamped_setdt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionOverdamped *arg1 = (collectionOverdamped *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionOverdamped_setdt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionOverdamped, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionOverdamped_setdt" "', argument " "1"" of type '" "collectionOverdamped *""'"); 
  }
  arg1 = reinterpret_cast< collectionOverdamped * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionOverdamped_setdt" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  (arg1)->setdt(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_collectionOverdamped(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionOverdamped *arg1 = (collectionOverdamped *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_collectionOverdamped",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionOverdamped, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_collectionOverdamped" "', argument " "1"" of type '" "collectionOverdamped *""'"); 
  }
  arg1 = reinterpret_cast< collectionOverdamped * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *collectionOverdamped_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_collectionOverdamped, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_collectionConjGradient__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  std::vector< interaction * > arg4 ;
  std::vector< statetracker * > arg5 ;
  std::vector< constraint * > arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  collectionConjGradient *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_collectionConjGradient",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionConjGradient" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionConjGradient" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionConjGradient" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionConjGradient" "', argument " "4"" of type '" "std::vector< interaction * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionConjGradient" "', argument " "5"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<constraint*,std::allocator< constraint * > > *ptr = (std::vector<constraint*,std::allocator< constraint * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionConjGradient" "', argument " "6"" of type '" "std::vector< constraint * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionConjGradient *)new collectionConjGradient(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionConjGradient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionConjGradient__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  std::vector< interaction * > arg4 ;
  std::vector< statetracker * > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  collectionConjGradient *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_collectionConjGradient",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionConjGradient" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionConjGradient" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionConjGradient" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionConjGradient" "', argument " "4"" of type '" "std::vector< interaction * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionConjGradient" "', argument " "5"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionConjGradient *)new collectionConjGradient(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionConjGradient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionConjGradient__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  std::vector< interaction * > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  collectionConjGradient *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_collectionConjGradient",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionConjGradient" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionConjGradient" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionConjGradient" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionConjGradient" "', argument " "4"" of type '" "std::vector< interaction * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionConjGradient *)new collectionConjGradient(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionConjGradient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionConjGradient__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  collectionConjGradient *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_collectionConjGradient",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionConjGradient" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionConjGradient" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionConjGradient" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionConjGradient *)new collectionConjGradient(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionConjGradient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionConjGradient__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  collectionConjGradient *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_collectionConjGradient",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionConjGradient" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionConjGradient" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  result = (collectionConjGradient *)new collectionConjGradient(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionConjGradient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionConjGradient(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_collectionConjGradient__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_collectionConjGradient__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_collectionConjGradient__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_collectionConjGradient__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<constraint*,std::allocator< constraint * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_collectionConjGradient__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_collectionConjGradient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    collectionConjGradient::collectionConjGradient(Box *,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >,std::vector< constraint * >)\n"
    "    collectionConjGradient::collectionConjGradient(Box *,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >)\n"
    "    collectionConjGradient::collectionConjGradient(Box *,flt const,std::vector< atomgroup * >,std::vector< interaction * >)\n"
    "    collectionConjGradient::collectionConjGradient(Box *,flt const,std::vector< atomgroup * >)\n"
    "    collectionConjGradient::collectionConjGradient(Box *,flt const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_collectionConjGradient_timestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionConjGradient *arg1 = (collectionConjGradient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionConjGradient_timestep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionConjGradient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionConjGradient_timestep" "', argument " "1"" of type '" "collectionConjGradient *""'"); 
  }
  arg1 = reinterpret_cast< collectionConjGradient * >(argp1);
  (arg1)->timestep();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionConjGradient_setdt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionConjGradient *arg1 = (collectionConjGradient *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionConjGradient_setdt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionConjGradient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionConjGradient_setdt" "', argument " "1"" of type '" "collectionConjGradient *""'"); 
  }
  arg1 = reinterpret_cast< collectionConjGradient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionConjGradient_setdt" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  (arg1)->setdt(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_collectionConjGradient(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionConjGradient *arg1 = (collectionConjGradient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_collectionConjGradient",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionConjGradient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_collectionConjGradient" "', argument " "1"" of type '" "collectionConjGradient *""'"); 
  }
  arg1 = reinterpret_cast< collectionConjGradient * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *collectionConjGradient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_collectionConjGradient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_collectionConjGradientBox__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  std::vector< atomgroup * > arg5 ;
  std::vector< interaction * > arg6 ;
  std::vector< statetracker * > arg7 ;
  std::vector< constraint * > arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  collectionConjGradientBox *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_collectionConjGradientBox",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionConjGradientBox" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionConjGradientBox" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionConjGradientBox" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionConjGradientBox" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionConjGradientBox" "', argument " "5"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionConjGradientBox" "', argument " "6"" of type '" "std::vector< interaction * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionConjGradientBox" "', argument " "7"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<constraint*,std::allocator< constraint * > > *ptr = (std::vector<constraint*,std::allocator< constraint * > > *)0;
    int res = swig::asptr(obj7, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionConjGradientBox" "', argument " "8"" of type '" "std::vector< constraint * >""'"); 
    }
    arg8 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionConjGradientBox *)new collectionConjGradientBox(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionConjGradientBox, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionConjGradientBox__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  std::vector< atomgroup * > arg5 ;
  std::vector< interaction * > arg6 ;
  std::vector< statetracker * > arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  collectionConjGradientBox *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_collectionConjGradientBox",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionConjGradientBox" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionConjGradientBox" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionConjGradientBox" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionConjGradientBox" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionConjGradientBox" "', argument " "5"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionConjGradientBox" "', argument " "6"" of type '" "std::vector< interaction * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionConjGradientBox" "', argument " "7"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionConjGradientBox *)new collectionConjGradientBox(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionConjGradientBox, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionConjGradientBox__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  std::vector< atomgroup * > arg5 ;
  std::vector< interaction * > arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  collectionConjGradientBox *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_collectionConjGradientBox",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionConjGradientBox" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionConjGradientBox" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionConjGradientBox" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionConjGradientBox" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionConjGradientBox" "', argument " "5"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionConjGradientBox" "', argument " "6"" of type '" "std::vector< interaction * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionConjGradientBox *)new collectionConjGradientBox(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionConjGradientBox, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionConjGradientBox__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  std::vector< atomgroup * > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  collectionConjGradientBox *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_collectionConjGradientBox",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionConjGradientBox" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionConjGradientBox" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionConjGradientBox" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionConjGradientBox" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionConjGradientBox" "', argument " "5"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionConjGradientBox *)new collectionConjGradientBox(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionConjGradientBox, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionConjGradientBox__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  collectionConjGradientBox *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_collectionConjGradientBox",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionConjGradientBox" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionConjGradientBox" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionConjGradientBox" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionConjGradientBox" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  result = (collectionConjGradientBox *)new collectionConjGradientBox(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionConjGradientBox, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionConjGradientBox__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  flt arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  collectionConjGradientBox *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_collectionConjGradientBox",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionConjGradientBox" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionConjGradientBox" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionConjGradientBox" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  result = (collectionConjGradientBox *)new collectionConjGradientBox(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionConjGradientBox, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionConjGradientBox(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_collectionConjGradientBox__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_collectionConjGradientBox__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_collectionConjGradientBox__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_collectionConjGradientBox__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_collectionConjGradientBox__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = swig::asptr(argv[7], (std::vector<constraint*,std::allocator< constraint * > >**)(0));
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_new_collectionConjGradientBox__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_collectionConjGradientBox'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    collectionConjGradientBox::collectionConjGradientBox(OriginBox *,flt const,flt const,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >,std::vector< constraint * >)\n"
    "    collectionConjGradientBox::collectionConjGradientBox(OriginBox *,flt const,flt const,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >)\n"
    "    collectionConjGradientBox::collectionConjGradientBox(OriginBox *,flt const,flt const,flt const,std::vector< atomgroup * >,std::vector< interaction * >)\n"
    "    collectionConjGradientBox::collectionConjGradientBox(OriginBox *,flt const,flt const,flt const,std::vector< atomgroup * >)\n"
    "    collectionConjGradientBox::collectionConjGradientBox(OriginBox *,flt const,flt const,flt const)\n"
    "    collectionConjGradientBox::collectionConjGradientBox(OriginBox *,flt const,flt const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_collectionConjGradientBox_kinetic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionConjGradientBox *arg1 = (collectionConjGradientBox *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionConjGradientBox_kinetic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionConjGradientBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionConjGradientBox_kinetic" "', argument " "1"" of type '" "collectionConjGradientBox *""'"); 
  }
  arg1 = reinterpret_cast< collectionConjGradientBox * >(argp1);
  result = (flt)(arg1)->kinetic();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionConjGradientBox_timestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionConjGradientBox *arg1 = (collectionConjGradientBox *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionConjGradientBox_timestep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionConjGradientBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionConjGradientBox_timestep" "', argument " "1"" of type '" "collectionConjGradientBox *""'"); 
  }
  arg1 = reinterpret_cast< collectionConjGradientBox * >(argp1);
  (arg1)->timestep();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionConjGradientBox_timestepBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionConjGradientBox *arg1 = (collectionConjGradientBox *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionConjGradientBox_timestepBox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionConjGradientBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionConjGradientBox_timestepBox" "', argument " "1"" of type '" "collectionConjGradientBox *""'"); 
  }
  arg1 = reinterpret_cast< collectionConjGradientBox * >(argp1);
  (arg1)->timestepBox();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionConjGradientBox_timestepAtoms(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionConjGradientBox *arg1 = (collectionConjGradientBox *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionConjGradientBox_timestepAtoms",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionConjGradientBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionConjGradientBox_timestepAtoms" "', argument " "1"" of type '" "collectionConjGradientBox *""'"); 
  }
  arg1 = reinterpret_cast< collectionConjGradientBox * >(argp1);
  (arg1)->timestepAtoms();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionConjGradientBox_resize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionConjGradientBox *arg1 = (collectionConjGradientBox *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionConjGradientBox_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionConjGradientBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionConjGradientBox_resize" "', argument " "1"" of type '" "collectionConjGradientBox *""'"); 
  }
  arg1 = reinterpret_cast< collectionConjGradientBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionConjGradientBox_resize" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionConjGradientBox_setdt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionConjGradientBox *arg1 = (collectionConjGradientBox *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionConjGradientBox_setdt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionConjGradientBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionConjGradientBox_setdt" "', argument " "1"" of type '" "collectionConjGradientBox *""'"); 
  }
  arg1 = reinterpret_cast< collectionConjGradientBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionConjGradientBox_setdt" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  (arg1)->setdt(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionConjGradientBox_setP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionConjGradientBox *arg1 = (collectionConjGradientBox *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionConjGradientBox_setP",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionConjGradientBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionConjGradientBox_setP" "', argument " "1"" of type '" "collectionConjGradientBox *""'"); 
  }
  arg1 = reinterpret_cast< collectionConjGradientBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionConjGradientBox_setP" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  (arg1)->setP(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionConjGradientBox_setMaxdV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionConjGradientBox *arg1 = (collectionConjGradientBox *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionConjGradientBox_setMaxdV",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionConjGradientBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionConjGradientBox_setMaxdV" "', argument " "1"" of type '" "collectionConjGradientBox *""'"); 
  }
  arg1 = reinterpret_cast< collectionConjGradientBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionConjGradientBox_setMaxdV" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  (arg1)->setMaxdV(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_collectionConjGradientBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionConjGradientBox *arg1 = (collectionConjGradientBox *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_collectionConjGradientBox",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionConjGradientBox, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_collectionConjGradientBox" "', argument " "1"" of type '" "collectionConjGradientBox *""'"); 
  }
  arg1 = reinterpret_cast< collectionConjGradientBox * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *collectionConjGradientBox_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_collectionConjGradientBox, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_solveCubic1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  flt arg2 ;
  flt arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:solveCubic1",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "solveCubic1" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "solveCubic1" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "solveCubic1" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  result = (flt)solveCubic1(arg1,arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_solveCubic__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:solveCubic",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "solveCubic" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "solveCubic" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "solveCubic" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "solveCubic" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  result = (flt)solveCubic(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_solveCubic__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  flt arg1 ;
  flt arg2 ;
  flt arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:solveCubic",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "solveCubic" "', argument " "1"" of type '" "flt""'");
  } 
  arg1 = static_cast< flt >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "solveCubic" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "solveCubic" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  result = (flt)solveCubic(arg1,arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_solveCubic(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_solveCubic__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_solveCubic__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'solveCubic'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    solveCubic(flt,flt,flt,flt)\n"
    "    solveCubic(flt,flt,flt)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_collectionNoseHoover__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  std::vector< atomgroup * > arg5 ;
  std::vector< interaction * > arg6 ;
  std::vector< statetracker * > arg7 ;
  std::vector< constraint * > arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  collectionNoseHoover *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_collectionNoseHoover",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionNoseHoover" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionNoseHoover" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionNoseHoover" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionNoseHoover" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionNoseHoover" "', argument " "5"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionNoseHoover" "', argument " "6"" of type '" "std::vector< interaction * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionNoseHoover" "', argument " "7"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<constraint*,std::allocator< constraint * > > *ptr = (std::vector<constraint*,std::allocator< constraint * > > *)0;
    int res = swig::asptr(obj7, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionNoseHoover" "', argument " "8"" of type '" "std::vector< constraint * >""'"); 
    }
    arg8 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionNoseHoover *)new collectionNoseHoover(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionNoseHoover, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionNoseHoover__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  std::vector< atomgroup * > arg5 ;
  std::vector< interaction * > arg6 ;
  std::vector< statetracker * > arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  collectionNoseHoover *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_collectionNoseHoover",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionNoseHoover" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionNoseHoover" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionNoseHoover" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionNoseHoover" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionNoseHoover" "', argument " "5"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionNoseHoover" "', argument " "6"" of type '" "std::vector< interaction * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionNoseHoover" "', argument " "7"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionNoseHoover *)new collectionNoseHoover(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionNoseHoover, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionNoseHoover__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  std::vector< atomgroup * > arg5 ;
  std::vector< interaction * > arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  collectionNoseHoover *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_collectionNoseHoover",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionNoseHoover" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionNoseHoover" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionNoseHoover" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionNoseHoover" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionNoseHoover" "', argument " "5"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionNoseHoover" "', argument " "6"" of type '" "std::vector< interaction * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionNoseHoover *)new collectionNoseHoover(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionNoseHoover, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionNoseHoover__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  std::vector< atomgroup * > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  collectionNoseHoover *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_collectionNoseHoover",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionNoseHoover" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionNoseHoover" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionNoseHoover" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionNoseHoover" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionNoseHoover" "', argument " "5"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionNoseHoover *)new collectionNoseHoover(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionNoseHoover, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionNoseHoover__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  collectionNoseHoover *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_collectionNoseHoover",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionNoseHoover" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionNoseHoover" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionNoseHoover" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionNoseHoover" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  result = (collectionNoseHoover *)new collectionNoseHoover(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionNoseHoover, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionNoseHoover(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_collectionNoseHoover__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_collectionNoseHoover__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_collectionNoseHoover__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_collectionNoseHoover__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = swig::asptr(argv[7], (std::vector<constraint*,std::allocator< constraint * > >**)(0));
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_new_collectionNoseHoover__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_collectionNoseHoover'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    collectionNoseHoover::collectionNoseHoover(Box *,flt const,flt const,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >,std::vector< constraint * >)\n"
    "    collectionNoseHoover::collectionNoseHoover(Box *,flt const,flt const,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >)\n"
    "    collectionNoseHoover::collectionNoseHoover(Box *,flt const,flt const,flt const,std::vector< atomgroup * >,std::vector< interaction * >)\n"
    "    collectionNoseHoover::collectionNoseHoover(Box *,flt const,flt const,flt const,std::vector< atomgroup * >)\n"
    "    collectionNoseHoover::collectionNoseHoover(Box *,flt const,flt const,flt const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_collectionNoseHoover_setdt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionNoseHoover *arg1 = (collectionNoseHoover *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionNoseHoover_setdt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionNoseHoover, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionNoseHoover_setdt" "', argument " "1"" of type '" "collectionNoseHoover *""'"); 
  }
  arg1 = reinterpret_cast< collectionNoseHoover * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionNoseHoover_setdt" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  (arg1)->setdt(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionNoseHoover_setQ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionNoseHoover *arg1 = (collectionNoseHoover *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionNoseHoover_setQ",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionNoseHoover, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionNoseHoover_setQ" "', argument " "1"" of type '" "collectionNoseHoover *""'"); 
  }
  arg1 = reinterpret_cast< collectionNoseHoover * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionNoseHoover_setQ" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  (arg1)->setQ(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionNoseHoover_resetBath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionNoseHoover *arg1 = (collectionNoseHoover *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionNoseHoover_resetBath",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionNoseHoover, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionNoseHoover_resetBath" "', argument " "1"" of type '" "collectionNoseHoover *""'"); 
  }
  arg1 = reinterpret_cast< collectionNoseHoover * >(argp1);
  (arg1)->resetBath();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionNoseHoover_timestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionNoseHoover *arg1 = (collectionNoseHoover *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionNoseHoover_timestep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionNoseHoover, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionNoseHoover_timestep" "', argument " "1"" of type '" "collectionNoseHoover *""'"); 
  }
  arg1 = reinterpret_cast< collectionNoseHoover * >(argp1);
  (arg1)->timestep();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionNoseHoover_Hamiltonian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionNoseHoover *arg1 = (collectionNoseHoover *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionNoseHoover_Hamiltonian",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionNoseHoover, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionNoseHoover_Hamiltonian" "', argument " "1"" of type '" "collectionNoseHoover *""'"); 
  }
  arg1 = reinterpret_cast< collectionNoseHoover * >(argp1);
  result = (flt)(arg1)->Hamiltonian();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionNoseHoover_getxi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionNoseHoover *arg1 = (collectionNoseHoover *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionNoseHoover_getxi",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionNoseHoover, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionNoseHoover_getxi" "', argument " "1"" of type '" "collectionNoseHoover *""'"); 
  }
  arg1 = reinterpret_cast< collectionNoseHoover * >(argp1);
  result = (flt)(arg1)->getxi();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionNoseHoover_getlns(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionNoseHoover *arg1 = (collectionNoseHoover *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionNoseHoover_getlns",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionNoseHoover, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionNoseHoover_getlns" "', argument " "1"" of type '" "collectionNoseHoover *""'"); 
  }
  arg1 = reinterpret_cast< collectionNoseHoover * >(argp1);
  result = (flt)(arg1)->getlns();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_collectionNoseHoover(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionNoseHoover *arg1 = (collectionNoseHoover *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_collectionNoseHoover",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionNoseHoover, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_collectionNoseHoover" "', argument " "1"" of type '" "collectionNoseHoover *""'"); 
  }
  arg1 = reinterpret_cast< collectionNoseHoover * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *collectionNoseHoover_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_collectionNoseHoover, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_collectionGaussianT__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  flt arg3 ;
  std::vector< atomgroup * > arg4 ;
  std::vector< interaction * > arg5 ;
  std::vector< statetracker * > arg6 ;
  std::vector< constraint * > arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  collectionGaussianT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_collectionGaussianT",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGaussianT" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGaussianT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGaussianT" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGaussianT" "', argument " "4"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGaussianT" "', argument " "5"" of type '" "std::vector< interaction * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGaussianT" "', argument " "6"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<constraint*,std::allocator< constraint * > > *ptr = (std::vector<constraint*,std::allocator< constraint * > > *)0;
    int res = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGaussianT" "', argument " "7"" of type '" "std::vector< constraint * >""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGaussianT *)new collectionGaussianT(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGaussianT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGaussianT__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  flt arg3 ;
  std::vector< atomgroup * > arg4 ;
  std::vector< interaction * > arg5 ;
  std::vector< statetracker * > arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  collectionGaussianT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_collectionGaussianT",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGaussianT" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGaussianT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGaussianT" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGaussianT" "', argument " "4"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGaussianT" "', argument " "5"" of type '" "std::vector< interaction * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGaussianT" "', argument " "6"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGaussianT *)new collectionGaussianT(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGaussianT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGaussianT__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  flt arg3 ;
  std::vector< atomgroup * > arg4 ;
  std::vector< interaction * > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  collectionGaussianT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_collectionGaussianT",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGaussianT" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGaussianT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGaussianT" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGaussianT" "', argument " "4"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGaussianT" "', argument " "5"" of type '" "std::vector< interaction * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGaussianT *)new collectionGaussianT(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGaussianT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGaussianT__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  flt arg3 ;
  std::vector< atomgroup * > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  collectionGaussianT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_collectionGaussianT",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGaussianT" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGaussianT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGaussianT" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGaussianT" "', argument " "4"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGaussianT *)new collectionGaussianT(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGaussianT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGaussianT__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  flt arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  collectionGaussianT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_collectionGaussianT",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGaussianT" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGaussianT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGaussianT" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  result = (collectionGaussianT *)new collectionGaussianT(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGaussianT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGaussianT(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_collectionGaussianT__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_collectionGaussianT__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_collectionGaussianT__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_collectionGaussianT__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector<constraint*,std::allocator< constraint * > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_collectionGaussianT__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_collectionGaussianT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    collectionGaussianT::collectionGaussianT(Box *,flt const,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >,std::vector< constraint * >)\n"
    "    collectionGaussianT::collectionGaussianT(Box *,flt const,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >)\n"
    "    collectionGaussianT::collectionGaussianT(Box *,flt const,flt const,std::vector< atomgroup * >,std::vector< interaction * >)\n"
    "    collectionGaussianT::collectionGaussianT(Box *,flt const,flt const,std::vector< atomgroup * >)\n"
    "    collectionGaussianT::collectionGaussianT(Box *,flt const,flt const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_collectionGaussianT_setdt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGaussianT *arg1 = (collectionGaussianT *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionGaussianT_setdt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGaussianT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGaussianT_setdt" "', argument " "1"" of type '" "collectionGaussianT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGaussianT * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionGaussianT_setdt" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  (arg1)->setdt(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGaussianT_setQ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGaussianT *arg1 = (collectionGaussianT *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionGaussianT_setQ",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGaussianT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGaussianT_setQ" "', argument " "1"" of type '" "collectionGaussianT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGaussianT * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionGaussianT_setQ" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  (arg1)->setQ(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGaussianT_setForces__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGaussianT *arg1 = (collectionGaussianT *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionGaussianT_setForces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGaussianT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGaussianT_setForces" "', argument " "1"" of type '" "collectionGaussianT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGaussianT * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionGaussianT_setForces" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setForces(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGaussianT_setForces__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGaussianT *arg1 = (collectionGaussianT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGaussianT_setForces",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGaussianT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGaussianT_setForces" "', argument " "1"" of type '" "collectionGaussianT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGaussianT * >(argp1);
  (arg1)->setForces();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGaussianT_setForces__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGaussianT *arg1 = (collectionGaussianT *) 0 ;
  bool arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:collectionGaussianT_setForces",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGaussianT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGaussianT_setForces" "', argument " "1"" of type '" "collectionGaussianT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGaussianT * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionGaussianT_setForces" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "collectionGaussianT_setForces" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->setForces(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGaussianT_setForces(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_collectionGaussianT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_collectionGaussianT_setForces__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_collectionGaussianT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_collectionGaussianT_setForces__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_collectionGaussianT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_collectionGaussianT_setForces__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'collectionGaussianT_setForces'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    collectionGaussianT::setForces(bool)\n"
    "    collectionGaussianT::setForces()\n"
    "    collectionGaussianT::setForces(bool,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_collectionGaussianT_timestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGaussianT *arg1 = (collectionGaussianT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGaussianT_timestep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGaussianT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGaussianT_timestep" "', argument " "1"" of type '" "collectionGaussianT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGaussianT * >(argp1);
  (arg1)->timestep();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_collectionGaussianT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGaussianT *arg1 = (collectionGaussianT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_collectionGaussianT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGaussianT, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_collectionGaussianT" "', argument " "1"" of type '" "collectionGaussianT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGaussianT * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *collectionGaussianT_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_collectionGaussianT, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_collectionGear3A__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  std::vector< interaction * > arg4 ;
  std::vector< statetracker * > arg5 ;
  std::vector< constraint * > arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  collectionGear3A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_collectionGear3A",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear3A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear3A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear3A" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear3A" "', argument " "4"" of type '" "std::vector< interaction * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear3A" "', argument " "5"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<constraint*,std::allocator< constraint * > > *ptr = (std::vector<constraint*,std::allocator< constraint * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear3A" "', argument " "6"" of type '" "std::vector< constraint * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear3A *)new collectionGear3A(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear3A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear3A__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  std::vector< interaction * > arg4 ;
  std::vector< statetracker * > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  collectionGear3A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_collectionGear3A",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear3A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear3A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear3A" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear3A" "', argument " "4"" of type '" "std::vector< interaction * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear3A" "', argument " "5"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear3A *)new collectionGear3A(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear3A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear3A__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  std::vector< interaction * > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  collectionGear3A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_collectionGear3A",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear3A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear3A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear3A" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear3A" "', argument " "4"" of type '" "std::vector< interaction * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear3A *)new collectionGear3A(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear3A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear3A__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  collectionGear3A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_collectionGear3A",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear3A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear3A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear3A" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear3A *)new collectionGear3A(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear3A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear3A__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  collectionGear3A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_collectionGear3A",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear3A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear3A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  result = (collectionGear3A *)new collectionGear3A(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear3A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear3A(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_collectionGear3A__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_collectionGear3A__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_collectionGear3A__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_collectionGear3A__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<constraint*,std::allocator< constraint * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_collectionGear3A__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_collectionGear3A'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    collectionGear3A::collectionGear3A(Box *,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >,std::vector< constraint * >)\n"
    "    collectionGear3A::collectionGear3A(Box *,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >)\n"
    "    collectionGear3A::collectionGear3A(Box *,flt const,std::vector< atomgroup * >,std::vector< interaction * >)\n"
    "    collectionGear3A::collectionGear3A(Box *,flt const,std::vector< atomgroup * >)\n"
    "    collectionGear3A::collectionGear3A(Box *,flt const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_collectionGear3A_timestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear3A *arg1 = (collectionGear3A *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear3A_timestep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear3A, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear3A_timestep" "', argument " "1"" of type '" "collectionGear3A *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear3A * >(argp1);
  (arg1)->timestep();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear3A_setdt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear3A *arg1 = (collectionGear3A *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionGear3A_setdt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear3A, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear3A_setdt" "', argument " "1"" of type '" "collectionGear3A *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear3A * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionGear3A_setdt" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  (arg1)->setdt(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_collectionGear3A(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear3A *arg1 = (collectionGear3A *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_collectionGear3A",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear3A, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_collectionGear3A" "', argument " "1"" of type '" "collectionGear3A *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear3A * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *collectionGear3A_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_collectionGear3A, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_collectionGear4A__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  uint arg3 ;
  std::vector< atomgroup * > arg4 ;
  std::vector< interaction * > arg5 ;
  std::vector< statetracker * > arg6 ;
  std::vector< constraint * > arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  collectionGear4A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_collectionGear4A",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear4A" "', argument " "3"" of type '" "uint""'");
  } 
  arg3 = static_cast< uint >(val3);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4A" "', argument " "4"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4A" "', argument " "5"" of type '" "std::vector< interaction * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4A" "', argument " "6"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<constraint*,std::allocator< constraint * > > *ptr = (std::vector<constraint*,std::allocator< constraint * > > *)0;
    int res = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4A" "', argument " "7"" of type '" "std::vector< constraint * >""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear4A *)new collectionGear4A(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4A__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  uint arg3 ;
  std::vector< atomgroup * > arg4 ;
  std::vector< interaction * > arg5 ;
  std::vector< statetracker * > arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  collectionGear4A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_collectionGear4A",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear4A" "', argument " "3"" of type '" "uint""'");
  } 
  arg3 = static_cast< uint >(val3);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4A" "', argument " "4"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4A" "', argument " "5"" of type '" "std::vector< interaction * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4A" "', argument " "6"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear4A *)new collectionGear4A(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4A__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  uint arg3 ;
  std::vector< atomgroup * > arg4 ;
  std::vector< interaction * > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  collectionGear4A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_collectionGear4A",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear4A" "', argument " "3"" of type '" "uint""'");
  } 
  arg3 = static_cast< uint >(val3);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4A" "', argument " "4"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4A" "', argument " "5"" of type '" "std::vector< interaction * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear4A *)new collectionGear4A(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4A__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  uint arg3 ;
  std::vector< atomgroup * > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  collectionGear4A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_collectionGear4A",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear4A" "', argument " "3"" of type '" "uint""'");
  } 
  arg3 = static_cast< uint >(val3);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4A" "', argument " "4"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear4A *)new collectionGear4A(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4A__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  uint arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  collectionGear4A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_collectionGear4A",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear4A" "', argument " "3"" of type '" "uint""'");
  } 
  arg3 = static_cast< uint >(val3);
  result = (collectionGear4A *)new collectionGear4A(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4A__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  std::vector< interaction * > arg4 ;
  std::vector< statetracker * > arg5 ;
  std::vector< constraint * > arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  collectionGear4A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_collectionGear4A",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4A" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4A" "', argument " "4"" of type '" "std::vector< interaction * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4A" "', argument " "5"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<constraint*,std::allocator< constraint * > > *ptr = (std::vector<constraint*,std::allocator< constraint * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4A" "', argument " "6"" of type '" "std::vector< constraint * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear4A *)new collectionGear4A(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4A__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  std::vector< interaction * > arg4 ;
  std::vector< statetracker * > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  collectionGear4A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_collectionGear4A",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4A" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4A" "', argument " "4"" of type '" "std::vector< interaction * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4A" "', argument " "5"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear4A *)new collectionGear4A(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4A__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  std::vector< interaction * > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  collectionGear4A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_collectionGear4A",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4A" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4A" "', argument " "4"" of type '" "std::vector< interaction * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear4A *)new collectionGear4A(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4A__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  collectionGear4A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_collectionGear4A",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4A" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear4A *)new collectionGear4A(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4A__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  collectionGear4A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_collectionGear4A",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  result = (collectionGear4A *)new collectionGear4A(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4A(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_collectionGear4A__SWIG_9(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_collectionGear4A__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_collectionGear4A__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_collectionGear4A__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_collectionGear4A__SWIG_7(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_collectionGear4A__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_collectionGear4A__SWIG_6(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_collectionGear4A__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<constraint*,std::allocator< constraint * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_collectionGear4A__SWIG_5(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector<constraint*,std::allocator< constraint * > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_collectionGear4A__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_collectionGear4A'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    collectionGear4A::collectionGear4A(Box *,flt const,uint,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >,std::vector< constraint * >)\n"
    "    collectionGear4A::collectionGear4A(Box *,flt const,uint,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >)\n"
    "    collectionGear4A::collectionGear4A(Box *,flt const,uint,std::vector< atomgroup * >,std::vector< interaction * >)\n"
    "    collectionGear4A::collectionGear4A(Box *,flt const,uint,std::vector< atomgroup * >)\n"
    "    collectionGear4A::collectionGear4A(Box *,flt const,uint)\n"
    "    collectionGear4A::collectionGear4A(Box *,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >,std::vector< constraint * >)\n"
    "    collectionGear4A::collectionGear4A(Box *,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >)\n"
    "    collectionGear4A::collectionGear4A(Box *,flt const,std::vector< atomgroup * >,std::vector< interaction * >)\n"
    "    collectionGear4A::collectionGear4A(Box *,flt const,std::vector< atomgroup * >)\n"
    "    collectionGear4A::collectionGear4A(Box *,flt const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_collectionGear4A_timestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4A *arg1 = (collectionGear4A *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear4A_timestep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4A, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4A_timestep" "', argument " "1"" of type '" "collectionGear4A *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4A * >(argp1);
  (arg1)->timestep();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4A_setdt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4A *arg1 = (collectionGear4A *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionGear4A_setdt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4A, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4A_setdt" "', argument " "1"" of type '" "collectionGear4A *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4A * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionGear4A_setdt" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  (arg1)->setdt(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_collectionGear4A(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4A *arg1 = (collectionGear4A *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_collectionGear4A",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4A, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_collectionGear4A" "', argument " "1"" of type '" "collectionGear4A *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4A * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *collectionGear4A_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_collectionGear4A, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_collectionGear5A__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  uint arg3 ;
  std::vector< atomgroup * > arg4 ;
  std::vector< interaction * > arg5 ;
  std::vector< statetracker * > arg6 ;
  std::vector< constraint * > arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  collectionGear5A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_collectionGear5A",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear5A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear5A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear5A" "', argument " "3"" of type '" "uint""'");
  } 
  arg3 = static_cast< uint >(val3);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear5A" "', argument " "4"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear5A" "', argument " "5"" of type '" "std::vector< interaction * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear5A" "', argument " "6"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<constraint*,std::allocator< constraint * > > *ptr = (std::vector<constraint*,std::allocator< constraint * > > *)0;
    int res = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear5A" "', argument " "7"" of type '" "std::vector< constraint * >""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear5A *)new collectionGear5A(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear5A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear5A__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  uint arg3 ;
  std::vector< atomgroup * > arg4 ;
  std::vector< interaction * > arg5 ;
  std::vector< statetracker * > arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  collectionGear5A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_collectionGear5A",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear5A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear5A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear5A" "', argument " "3"" of type '" "uint""'");
  } 
  arg3 = static_cast< uint >(val3);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear5A" "', argument " "4"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear5A" "', argument " "5"" of type '" "std::vector< interaction * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear5A" "', argument " "6"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear5A *)new collectionGear5A(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear5A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear5A__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  uint arg3 ;
  std::vector< atomgroup * > arg4 ;
  std::vector< interaction * > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  collectionGear5A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_collectionGear5A",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear5A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear5A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear5A" "', argument " "3"" of type '" "uint""'");
  } 
  arg3 = static_cast< uint >(val3);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear5A" "', argument " "4"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear5A" "', argument " "5"" of type '" "std::vector< interaction * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear5A *)new collectionGear5A(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear5A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear5A__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  uint arg3 ;
  std::vector< atomgroup * > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  collectionGear5A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_collectionGear5A",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear5A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear5A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear5A" "', argument " "3"" of type '" "uint""'");
  } 
  arg3 = static_cast< uint >(val3);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear5A" "', argument " "4"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear5A *)new collectionGear5A(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear5A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear5A__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  uint arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  collectionGear5A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_collectionGear5A",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear5A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear5A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear5A" "', argument " "3"" of type '" "uint""'");
  } 
  arg3 = static_cast< uint >(val3);
  result = (collectionGear5A *)new collectionGear5A(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear5A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear5A__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  std::vector< interaction * > arg4 ;
  std::vector< statetracker * > arg5 ;
  std::vector< constraint * > arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  collectionGear5A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_collectionGear5A",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear5A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear5A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear5A" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear5A" "', argument " "4"" of type '" "std::vector< interaction * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear5A" "', argument " "5"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<constraint*,std::allocator< constraint * > > *ptr = (std::vector<constraint*,std::allocator< constraint * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear5A" "', argument " "6"" of type '" "std::vector< constraint * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear5A *)new collectionGear5A(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear5A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear5A__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  std::vector< interaction * > arg4 ;
  std::vector< statetracker * > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  collectionGear5A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_collectionGear5A",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear5A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear5A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear5A" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear5A" "', argument " "4"" of type '" "std::vector< interaction * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear5A" "', argument " "5"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear5A *)new collectionGear5A(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear5A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear5A__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  std::vector< interaction * > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  collectionGear5A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_collectionGear5A",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear5A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear5A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear5A" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear5A" "', argument " "4"" of type '" "std::vector< interaction * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear5A *)new collectionGear5A(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear5A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear5A__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  collectionGear5A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_collectionGear5A",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear5A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear5A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear5A" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear5A *)new collectionGear5A(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear5A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear5A__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  collectionGear5A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_collectionGear5A",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear5A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear5A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  result = (collectionGear5A *)new collectionGear5A(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear5A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear5A(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_collectionGear5A__SWIG_9(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_collectionGear5A__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_collectionGear5A__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_collectionGear5A__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_collectionGear5A__SWIG_7(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_collectionGear5A__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_collectionGear5A__SWIG_6(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_collectionGear5A__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<constraint*,std::allocator< constraint * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_collectionGear5A__SWIG_5(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector<constraint*,std::allocator< constraint * > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_collectionGear5A__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_collectionGear5A'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    collectionGear5A::collectionGear5A(Box *,flt const,uint,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >,std::vector< constraint * >)\n"
    "    collectionGear5A::collectionGear5A(Box *,flt const,uint,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >)\n"
    "    collectionGear5A::collectionGear5A(Box *,flt const,uint,std::vector< atomgroup * >,std::vector< interaction * >)\n"
    "    collectionGear5A::collectionGear5A(Box *,flt const,uint,std::vector< atomgroup * >)\n"
    "    collectionGear5A::collectionGear5A(Box *,flt const,uint)\n"
    "    collectionGear5A::collectionGear5A(Box *,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >,std::vector< constraint * >)\n"
    "    collectionGear5A::collectionGear5A(Box *,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >)\n"
    "    collectionGear5A::collectionGear5A(Box *,flt const,std::vector< atomgroup * >,std::vector< interaction * >)\n"
    "    collectionGear5A::collectionGear5A(Box *,flt const,std::vector< atomgroup * >)\n"
    "    collectionGear5A::collectionGear5A(Box *,flt const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_collectionGear5A_timestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear5A *arg1 = (collectionGear5A *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear5A_timestep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear5A, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear5A_timestep" "', argument " "1"" of type '" "collectionGear5A *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear5A * >(argp1);
  (arg1)->timestep();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear5A_setdt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear5A *arg1 = (collectionGear5A *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionGear5A_setdt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear5A, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear5A_setdt" "', argument " "1"" of type '" "collectionGear5A *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear5A * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionGear5A_setdt" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  (arg1)->setdt(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_collectionGear5A(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear5A *arg1 = (collectionGear5A *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_collectionGear5A",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear5A, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_collectionGear5A" "', argument " "1"" of type '" "collectionGear5A *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear5A * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *collectionGear5A_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_collectionGear5A, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_collectionGear6A__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  uint arg3 ;
  std::vector< atomgroup * > arg4 ;
  std::vector< interaction * > arg5 ;
  std::vector< statetracker * > arg6 ;
  std::vector< constraint * > arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  collectionGear6A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_collectionGear6A",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear6A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear6A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear6A" "', argument " "3"" of type '" "uint""'");
  } 
  arg3 = static_cast< uint >(val3);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear6A" "', argument " "4"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear6A" "', argument " "5"" of type '" "std::vector< interaction * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear6A" "', argument " "6"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<constraint*,std::allocator< constraint * > > *ptr = (std::vector<constraint*,std::allocator< constraint * > > *)0;
    int res = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear6A" "', argument " "7"" of type '" "std::vector< constraint * >""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear6A *)new collectionGear6A(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear6A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear6A__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  uint arg3 ;
  std::vector< atomgroup * > arg4 ;
  std::vector< interaction * > arg5 ;
  std::vector< statetracker * > arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  collectionGear6A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_collectionGear6A",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear6A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear6A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear6A" "', argument " "3"" of type '" "uint""'");
  } 
  arg3 = static_cast< uint >(val3);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear6A" "', argument " "4"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear6A" "', argument " "5"" of type '" "std::vector< interaction * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear6A" "', argument " "6"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear6A *)new collectionGear6A(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear6A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear6A__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  uint arg3 ;
  std::vector< atomgroup * > arg4 ;
  std::vector< interaction * > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  collectionGear6A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_collectionGear6A",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear6A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear6A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear6A" "', argument " "3"" of type '" "uint""'");
  } 
  arg3 = static_cast< uint >(val3);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear6A" "', argument " "4"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear6A" "', argument " "5"" of type '" "std::vector< interaction * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear6A *)new collectionGear6A(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear6A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear6A__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  uint arg3 ;
  std::vector< atomgroup * > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  collectionGear6A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_collectionGear6A",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear6A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear6A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear6A" "', argument " "3"" of type '" "uint""'");
  } 
  arg3 = static_cast< uint >(val3);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear6A" "', argument " "4"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear6A *)new collectionGear6A(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear6A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear6A__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  uint arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  collectionGear6A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_collectionGear6A",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear6A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear6A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear6A" "', argument " "3"" of type '" "uint""'");
  } 
  arg3 = static_cast< uint >(val3);
  result = (collectionGear6A *)new collectionGear6A(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear6A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear6A__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  std::vector< interaction * > arg4 ;
  std::vector< statetracker * > arg5 ;
  std::vector< constraint * > arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  collectionGear6A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_collectionGear6A",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear6A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear6A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear6A" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear6A" "', argument " "4"" of type '" "std::vector< interaction * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear6A" "', argument " "5"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<constraint*,std::allocator< constraint * > > *ptr = (std::vector<constraint*,std::allocator< constraint * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear6A" "', argument " "6"" of type '" "std::vector< constraint * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear6A *)new collectionGear6A(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear6A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear6A__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  std::vector< interaction * > arg4 ;
  std::vector< statetracker * > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  collectionGear6A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_collectionGear6A",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear6A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear6A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear6A" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear6A" "', argument " "4"" of type '" "std::vector< interaction * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear6A" "', argument " "5"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear6A *)new collectionGear6A(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear6A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear6A__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  std::vector< interaction * > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  collectionGear6A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_collectionGear6A",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear6A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear6A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear6A" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear6A" "', argument " "4"" of type '" "std::vector< interaction * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear6A *)new collectionGear6A(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear6A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear6A__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  collectionGear6A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_collectionGear6A",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear6A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear6A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear6A" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear6A *)new collectionGear6A(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear6A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear6A__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  collectionGear6A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_collectionGear6A",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear6A" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear6A" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  result = (collectionGear6A *)new collectionGear6A(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear6A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear6A(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_collectionGear6A__SWIG_9(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_collectionGear6A__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_collectionGear6A__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_collectionGear6A__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_collectionGear6A__SWIG_7(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_collectionGear6A__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_collectionGear6A__SWIG_6(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_collectionGear6A__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<constraint*,std::allocator< constraint * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_collectionGear6A__SWIG_5(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector<constraint*,std::allocator< constraint * > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_collectionGear6A__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_collectionGear6A'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    collectionGear6A::collectionGear6A(Box *,flt const,uint,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >,std::vector< constraint * >)\n"
    "    collectionGear6A::collectionGear6A(Box *,flt const,uint,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >)\n"
    "    collectionGear6A::collectionGear6A(Box *,flt const,uint,std::vector< atomgroup * >,std::vector< interaction * >)\n"
    "    collectionGear6A::collectionGear6A(Box *,flt const,uint,std::vector< atomgroup * >)\n"
    "    collectionGear6A::collectionGear6A(Box *,flt const,uint)\n"
    "    collectionGear6A::collectionGear6A(Box *,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >,std::vector< constraint * >)\n"
    "    collectionGear6A::collectionGear6A(Box *,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >)\n"
    "    collectionGear6A::collectionGear6A(Box *,flt const,std::vector< atomgroup * >,std::vector< interaction * >)\n"
    "    collectionGear6A::collectionGear6A(Box *,flt const,std::vector< atomgroup * >)\n"
    "    collectionGear6A::collectionGear6A(Box *,flt const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_collectionGear6A_timestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear6A *arg1 = (collectionGear6A *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear6A_timestep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear6A, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear6A_timestep" "', argument " "1"" of type '" "collectionGear6A *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear6A * >(argp1);
  (arg1)->timestep();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear6A_setdt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear6A *arg1 = (collectionGear6A *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionGear6A_setdt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear6A, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear6A_setdt" "', argument " "1"" of type '" "collectionGear6A *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear6A * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionGear6A_setdt" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  (arg1)->setdt(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_collectionGear6A(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear6A *arg1 = (collectionGear6A *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_collectionGear6A",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear6A, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_collectionGear6A" "', argument " "1"" of type '" "collectionGear6A *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear6A * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *collectionGear6A_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_collectionGear6A, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_atomRK4_Kxa_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomRK4 *arg1 = (atomRK4 *) 0 ;
  Vec *arg2 = (Vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomRK4_Kxa_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomRK4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomRK4_Kxa_set" "', argument " "1"" of type '" "atomRK4 *""'"); 
  }
  arg1 = reinterpret_cast< atomRK4 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atomRK4_Kxa_set" "', argument " "2"" of type '" "Vec *""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  if (arg1) (arg1)->Kxa = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomRK4_Kxa_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomRK4 *arg1 = (atomRK4 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomRK4_Kxa_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomRK4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomRK4_Kxa_get" "', argument " "1"" of type '" "atomRK4 *""'"); 
  }
  arg1 = reinterpret_cast< atomRK4 * >(argp1);
  result = (Vec *)& ((arg1)->Kxa);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomRK4_Kxb_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomRK4 *arg1 = (atomRK4 *) 0 ;
  Vec *arg2 = (Vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomRK4_Kxb_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomRK4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomRK4_Kxb_set" "', argument " "1"" of type '" "atomRK4 *""'"); 
  }
  arg1 = reinterpret_cast< atomRK4 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atomRK4_Kxb_set" "', argument " "2"" of type '" "Vec *""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  if (arg1) (arg1)->Kxb = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomRK4_Kxb_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomRK4 *arg1 = (atomRK4 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomRK4_Kxb_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomRK4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomRK4_Kxb_get" "', argument " "1"" of type '" "atomRK4 *""'"); 
  }
  arg1 = reinterpret_cast< atomRK4 * >(argp1);
  result = (Vec *)& ((arg1)->Kxb);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomRK4_Kxc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomRK4 *arg1 = (atomRK4 *) 0 ;
  Vec *arg2 = (Vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomRK4_Kxc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomRK4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomRK4_Kxc_set" "', argument " "1"" of type '" "atomRK4 *""'"); 
  }
  arg1 = reinterpret_cast< atomRK4 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atomRK4_Kxc_set" "', argument " "2"" of type '" "Vec *""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  if (arg1) (arg1)->Kxc = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomRK4_Kxc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomRK4 *arg1 = (atomRK4 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomRK4_Kxc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomRK4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomRK4_Kxc_get" "', argument " "1"" of type '" "atomRK4 *""'"); 
  }
  arg1 = reinterpret_cast< atomRK4 * >(argp1);
  result = (Vec *)& ((arg1)->Kxc);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomRK4_Kxd_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomRK4 *arg1 = (atomRK4 *) 0 ;
  Vec *arg2 = (Vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomRK4_Kxd_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomRK4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomRK4_Kxd_set" "', argument " "1"" of type '" "atomRK4 *""'"); 
  }
  arg1 = reinterpret_cast< atomRK4 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atomRK4_Kxd_set" "', argument " "2"" of type '" "Vec *""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  if (arg1) (arg1)->Kxd = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomRK4_Kxd_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomRK4 *arg1 = (atomRK4 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomRK4_Kxd_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomRK4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomRK4_Kxd_get" "', argument " "1"" of type '" "atomRK4 *""'"); 
  }
  arg1 = reinterpret_cast< atomRK4 * >(argp1);
  result = (Vec *)& ((arg1)->Kxd);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomRK4_Kva_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomRK4 *arg1 = (atomRK4 *) 0 ;
  Vec *arg2 = (Vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomRK4_Kva_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomRK4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomRK4_Kva_set" "', argument " "1"" of type '" "atomRK4 *""'"); 
  }
  arg1 = reinterpret_cast< atomRK4 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atomRK4_Kva_set" "', argument " "2"" of type '" "Vec *""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  if (arg1) (arg1)->Kva = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomRK4_Kva_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomRK4 *arg1 = (atomRK4 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomRK4_Kva_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomRK4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomRK4_Kva_get" "', argument " "1"" of type '" "atomRK4 *""'"); 
  }
  arg1 = reinterpret_cast< atomRK4 * >(argp1);
  result = (Vec *)& ((arg1)->Kva);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomRK4_Kvb_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomRK4 *arg1 = (atomRK4 *) 0 ;
  Vec *arg2 = (Vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomRK4_Kvb_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomRK4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomRK4_Kvb_set" "', argument " "1"" of type '" "atomRK4 *""'"); 
  }
  arg1 = reinterpret_cast< atomRK4 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atomRK4_Kvb_set" "', argument " "2"" of type '" "Vec *""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  if (arg1) (arg1)->Kvb = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomRK4_Kvb_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomRK4 *arg1 = (atomRK4 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomRK4_Kvb_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomRK4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomRK4_Kvb_get" "', argument " "1"" of type '" "atomRK4 *""'"); 
  }
  arg1 = reinterpret_cast< atomRK4 * >(argp1);
  result = (Vec *)& ((arg1)->Kvb);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomRK4_Kvc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomRK4 *arg1 = (atomRK4 *) 0 ;
  Vec *arg2 = (Vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomRK4_Kvc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomRK4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomRK4_Kvc_set" "', argument " "1"" of type '" "atomRK4 *""'"); 
  }
  arg1 = reinterpret_cast< atomRK4 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atomRK4_Kvc_set" "', argument " "2"" of type '" "Vec *""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  if (arg1) (arg1)->Kvc = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomRK4_Kvc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomRK4 *arg1 = (atomRK4 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomRK4_Kvc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomRK4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomRK4_Kvc_get" "', argument " "1"" of type '" "atomRK4 *""'"); 
  }
  arg1 = reinterpret_cast< atomRK4 * >(argp1);
  result = (Vec *)& ((arg1)->Kvc);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomRK4_Kvd_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomRK4 *arg1 = (atomRK4 *) 0 ;
  Vec *arg2 = (Vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomRK4_Kvd_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomRK4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomRK4_Kvd_set" "', argument " "1"" of type '" "atomRK4 *""'"); 
  }
  arg1 = reinterpret_cast< atomRK4 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atomRK4_Kvd_set" "', argument " "2"" of type '" "Vec *""'"); 
  }
  arg2 = reinterpret_cast< Vec * >(argp2);
  if (arg1) (arg1)->Kvd = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomRK4_Kvd_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomRK4 *arg1 = (atomRK4 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomRK4_Kvd_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomRK4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomRK4_Kvd_get" "', argument " "1"" of type '" "atomRK4 *""'"); 
  }
  arg1 = reinterpret_cast< atomRK4 * >(argp1);
  result = (Vec *)& ((arg1)->Kvd);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector2T_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_atomRK4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomRK4 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_atomRK4")) SWIG_fail;
  result = (atomRK4 *)new atomRK4();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomRK4, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_atomRK4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomRK4 *arg1 = (atomRK4 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_atomRK4",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomRK4, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_atomRK4" "', argument " "1"" of type '" "atomRK4 *""'"); 
  }
  arg1 = reinterpret_cast< atomRK4 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *atomRK4_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_atomRK4, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_atomvecRK4__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< flt > arg1 ;
  PyObject * obj0 = 0 ;
  atomvecRK4 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_atomvecRK4",&obj0)) SWIG_fail;
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    int res = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_atomvecRK4" "', argument " "1"" of type '" "std::vector< flt >""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (atomvecRK4 *)new atomvecRK4(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomvecRK4, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_atomvecRK4__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomgroup *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  atomvecRK4 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_atomvecRK4",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_atomgroup,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_atomvecRK4" "', argument " "1"" of type '" "atomgroup &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_atomvecRK4" "', argument " "1"" of type '" "atomgroup &""'"); 
  }
  arg1 = reinterpret_cast< atomgroup * >(argp1);
  result = (atomvecRK4 *)new atomvecRK4(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomvecRK4, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_atomvecRK4(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atomgroup, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_atomvecRK4__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_atomvecRK4__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_atomvecRK4'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    atomvecRK4::atomvecRK4(std::vector< flt >)\n"
    "    atomvecRK4::atomvecRK4(atomgroup &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_atomvecRK4_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomvecRK4 *arg1 = (atomvecRK4 *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  atom *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomvecRK4_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomvecRK4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomvecRK4_get" "', argument " "1"" of type '" "atomvecRK4 *""'"); 
  }
  arg1 = reinterpret_cast< atomvecRK4 * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "atomvecRK4_get" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (atom *)(arg1)->get(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atom, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomvecRK4_getRK4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomvecRK4 *arg1 = (atomvecRK4 *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  atomRK4 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomvecRK4_getRK4",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomvecRK4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomvecRK4_getRK4" "', argument " "1"" of type '" "atomvecRK4 *""'"); 
  }
  arg1 = reinterpret_cast< atomvecRK4 * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "atomvecRK4_getRK4" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (atomRK4 *)(arg1)->getRK4(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_atomRK4, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomvecRK4_get_id__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomvecRK4 *arg1 = (atomvecRK4 *) 0 ;
  atom *arg2 = (atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  atomid result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomvecRK4_get_id",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomvecRK4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomvecRK4_get_id" "', argument " "1"" of type '" "atomvecRK4 *""'"); 
  }
  arg1 = reinterpret_cast< atomvecRK4 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_atom, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atomvecRK4_get_id" "', argument " "2"" of type '" "atom *""'"); 
  }
  arg2 = reinterpret_cast< atom * >(argp2);
  result = (arg1)->get_id(arg2);
  resultobj = SWIG_NewPointerObj((new atomid(static_cast< const atomid& >(result))), SWIGTYPE_p_atomid, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomvecRK4_get_id__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomvecRK4 *arg1 = (atomvecRK4 *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  atomid result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:atomvecRK4_get_id",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomvecRK4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomvecRK4_get_id" "', argument " "1"" of type '" "atomvecRK4 *""'"); 
  }
  arg1 = reinterpret_cast< atomvecRK4 * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "atomvecRK4_get_id" "', argument " "2"" of type '" "uint""'");
  } 
  arg2 = static_cast< uint >(val2);
  result = (arg1)->get_id(arg2);
  resultobj = SWIG_NewPointerObj((new atomid(static_cast< const atomid& >(result))), SWIGTYPE_p_atomid, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_atomvecRK4_get_id(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atomvecRK4, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_atom, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_atomvecRK4_get_id__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_atomvecRK4, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_atomvecRK4_get_id__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'atomvecRK4_get_id'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    atomvecRK4::get_id(atom *)\n"
    "    atomvecRK4::get_id(uint)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_atomvecRK4_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomvecRK4 *arg1 = (atomvecRK4 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:atomvecRK4_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomvecRK4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomvecRK4_size" "', argument " "1"" of type '" "atomvecRK4 const *""'"); 
  }
  arg1 = reinterpret_cast< atomvecRK4 * >(argp1);
  result = (uint)((atomvecRK4 const *)arg1)->size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_atomvecRK4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  atomvecRK4 *arg1 = (atomvecRK4 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_atomvecRK4",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_atomvecRK4, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_atomvecRK4" "', argument " "1"" of type '" "atomvecRK4 *""'"); 
  }
  arg1 = reinterpret_cast< atomvecRK4 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *atomvecRK4_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_atomvecRK4, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_collectionRK4__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomvecRK4 * > arg3 ;
  std::vector< interaction * > arg4 ;
  std::vector< statetracker * > arg5 ;
  std::vector< constraint * > arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  collectionRK4 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_collectionRK4",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionRK4" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionRK4" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > > *ptr = (std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionRK4" "', argument " "3"" of type '" "std::vector< atomvecRK4 * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionRK4" "', argument " "4"" of type '" "std::vector< interaction * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionRK4" "', argument " "5"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<constraint*,std::allocator< constraint * > > *ptr = (std::vector<constraint*,std::allocator< constraint * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionRK4" "', argument " "6"" of type '" "std::vector< constraint * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionRK4 *)new collectionRK4(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionRK4, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionRK4__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomvecRK4 * > arg3 ;
  std::vector< interaction * > arg4 ;
  std::vector< statetracker * > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  collectionRK4 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_collectionRK4",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionRK4" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionRK4" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > > *ptr = (std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionRK4" "', argument " "3"" of type '" "std::vector< atomvecRK4 * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionRK4" "', argument " "4"" of type '" "std::vector< interaction * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionRK4" "', argument " "5"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionRK4 *)new collectionRK4(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionRK4, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionRK4__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomvecRK4 * > arg3 ;
  std::vector< interaction * > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  collectionRK4 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_collectionRK4",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionRK4" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionRK4" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > > *ptr = (std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionRK4" "', argument " "3"" of type '" "std::vector< atomvecRK4 * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionRK4" "', argument " "4"" of type '" "std::vector< interaction * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionRK4 *)new collectionRK4(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionRK4, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionRK4__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  std::vector< atomvecRK4 * > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  collectionRK4 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_collectionRK4",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionRK4" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionRK4" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > > *ptr = (std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionRK4" "', argument " "3"" of type '" "std::vector< atomvecRK4 * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionRK4 *)new collectionRK4(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionRK4, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionRK4__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  collectionRK4 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_collectionRK4",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionRK4" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionRK4" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  result = (collectionRK4 *)new collectionRK4(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionRK4, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionRK4(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_collectionRK4__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_collectionRK4__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_collectionRK4__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_collectionRK4__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomvecRK4*,std::allocator< atomvecRK4 * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<constraint*,std::allocator< constraint * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_collectionRK4__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_collectionRK4'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    collectionRK4::collectionRK4(Box *,flt const,std::vector< atomvecRK4 * >,std::vector< interaction * >,std::vector< statetracker * >,std::vector< constraint * >)\n"
    "    collectionRK4::collectionRK4(Box *,flt const,std::vector< atomvecRK4 * >,std::vector< interaction * >,std::vector< statetracker * >)\n"
    "    collectionRK4::collectionRK4(Box *,flt const,std::vector< atomvecRK4 * >,std::vector< interaction * >)\n"
    "    collectionRK4::collectionRK4(Box *,flt const,std::vector< atomvecRK4 * >)\n"
    "    collectionRK4::collectionRK4(Box *,flt const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_collectionRK4_timestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionRK4 *arg1 = (collectionRK4 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionRK4_timestep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionRK4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionRK4_timestep" "', argument " "1"" of type '" "collectionRK4 *""'"); 
  }
  arg1 = reinterpret_cast< collectionRK4 * >(argp1);
  (arg1)->timestep();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionRK4_setdt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionRK4 *arg1 = (collectionRK4 *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionRK4_setdt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionRK4, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionRK4_setdt" "', argument " "1"" of type '" "collectionRK4 *""'"); 
  }
  arg1 = reinterpret_cast< collectionRK4 * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionRK4_setdt" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  (arg1)->setdt(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_collectionRK4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionRK4 *arg1 = (collectionRK4 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_collectionRK4",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionRK4, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_collectionRK4" "', argument " "1"" of type '" "collectionRK4 *""'"); 
  }
  arg1 = reinterpret_cast< collectionRK4 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *collectionRK4_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_collectionRK4, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_collectionGear4NPH__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  uint arg5 ;
  std::vector< atomgroup * > arg6 ;
  std::vector< interaction * > arg7 ;
  std::vector< statetracker * > arg8 ;
  std::vector< constraint * > arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  collectionGear4NPH *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_collectionGear4NPH",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4NPH" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4NPH" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear4NPH" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionGear4NPH" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_collectionGear4NPH" "', argument " "5"" of type '" "uint""'");
  } 
  arg5 = static_cast< uint >(val5);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPH" "', argument " "6"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPH" "', argument " "7"" of type '" "std::vector< interaction * >""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj7, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPH" "', argument " "8"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg8 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<constraint*,std::allocator< constraint * > > *ptr = (std::vector<constraint*,std::allocator< constraint * > > *)0;
    int res = swig::asptr(obj8, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPH" "', argument " "9"" of type '" "std::vector< constraint * >""'"); 
    }
    arg9 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear4NPH *)new collectionGear4NPH(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4NPH, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4NPH__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  uint arg5 ;
  std::vector< atomgroup * > arg6 ;
  std::vector< interaction * > arg7 ;
  std::vector< statetracker * > arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  collectionGear4NPH *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_collectionGear4NPH",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4NPH" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4NPH" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear4NPH" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionGear4NPH" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_collectionGear4NPH" "', argument " "5"" of type '" "uint""'");
  } 
  arg5 = static_cast< uint >(val5);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPH" "', argument " "6"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPH" "', argument " "7"" of type '" "std::vector< interaction * >""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj7, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPH" "', argument " "8"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg8 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear4NPH *)new collectionGear4NPH(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4NPH, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4NPH__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  uint arg5 ;
  std::vector< atomgroup * > arg6 ;
  std::vector< interaction * > arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  collectionGear4NPH *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_collectionGear4NPH",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4NPH" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4NPH" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear4NPH" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionGear4NPH" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_collectionGear4NPH" "', argument " "5"" of type '" "uint""'");
  } 
  arg5 = static_cast< uint >(val5);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPH" "', argument " "6"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPH" "', argument " "7"" of type '" "std::vector< interaction * >""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear4NPH *)new collectionGear4NPH(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4NPH, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4NPH__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  uint arg5 ;
  std::vector< atomgroup * > arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  collectionGear4NPH *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_collectionGear4NPH",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4NPH" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4NPH" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear4NPH" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionGear4NPH" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_collectionGear4NPH" "', argument " "5"" of type '" "uint""'");
  } 
  arg5 = static_cast< uint >(val5);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPH" "', argument " "6"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear4NPH *)new collectionGear4NPH(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4NPH, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4NPH__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  uint arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  collectionGear4NPH *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_collectionGear4NPH",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4NPH" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4NPH" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear4NPH" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionGear4NPH" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_collectionGear4NPH" "', argument " "5"" of type '" "uint""'");
  } 
  arg5 = static_cast< uint >(val5);
  result = (collectionGear4NPH *)new collectionGear4NPH(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4NPH, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4NPH__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  std::vector< atomgroup * > arg5 ;
  std::vector< interaction * > arg6 ;
  std::vector< statetracker * > arg7 ;
  std::vector< constraint * > arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  collectionGear4NPH *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_collectionGear4NPH",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4NPH" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4NPH" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear4NPH" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionGear4NPH" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPH" "', argument " "5"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPH" "', argument " "6"" of type '" "std::vector< interaction * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPH" "', argument " "7"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<constraint*,std::allocator< constraint * > > *ptr = (std::vector<constraint*,std::allocator< constraint * > > *)0;
    int res = swig::asptr(obj7, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPH" "', argument " "8"" of type '" "std::vector< constraint * >""'"); 
    }
    arg8 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear4NPH *)new collectionGear4NPH(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4NPH, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4NPH__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  std::vector< atomgroup * > arg5 ;
  std::vector< interaction * > arg6 ;
  std::vector< statetracker * > arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  collectionGear4NPH *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_collectionGear4NPH",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4NPH" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4NPH" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear4NPH" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionGear4NPH" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPH" "', argument " "5"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPH" "', argument " "6"" of type '" "std::vector< interaction * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPH" "', argument " "7"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear4NPH *)new collectionGear4NPH(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4NPH, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4NPH__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  std::vector< atomgroup * > arg5 ;
  std::vector< interaction * > arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  collectionGear4NPH *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_collectionGear4NPH",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4NPH" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4NPH" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear4NPH" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionGear4NPH" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPH" "', argument " "5"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPH" "', argument " "6"" of type '" "std::vector< interaction * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear4NPH *)new collectionGear4NPH(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4NPH, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4NPH__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  std::vector< atomgroup * > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  collectionGear4NPH *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_collectionGear4NPH",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4NPH" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4NPH" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear4NPH" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionGear4NPH" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPH" "', argument " "5"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear4NPH *)new collectionGear4NPH(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4NPH, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4NPH__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  collectionGear4NPH *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_collectionGear4NPH",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4NPH" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4NPH" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear4NPH" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionGear4NPH" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  result = (collectionGear4NPH *)new collectionGear4NPH(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4NPH, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4NPH(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[10];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_collectionGear4NPH__SWIG_9(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_collectionGear4NPH__SWIG_4(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_collectionGear4NPH__SWIG_8(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_collectionGear4NPH__SWIG_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_collectionGear4NPH__SWIG_7(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_collectionGear4NPH__SWIG_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_collectionGear4NPH__SWIG_6(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = swig::asptr(argv[7], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_new_collectionGear4NPH__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = swig::asptr(argv[7], (std::vector<constraint*,std::allocator< constraint * > >**)(0));
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_new_collectionGear4NPH__SWIG_5(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = swig::asptr(argv[7], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = swig::asptr(argv[8], (std::vector<constraint*,std::allocator< constraint * > >**)(0));
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_new_collectionGear4NPH__SWIG_0(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_collectionGear4NPH'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    collectionGear4NPH::collectionGear4NPH(OriginBox *,flt const,flt const,flt const,uint,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >,std::vector< constraint * >)\n"
    "    collectionGear4NPH::collectionGear4NPH(OriginBox *,flt const,flt const,flt const,uint,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >)\n"
    "    collectionGear4NPH::collectionGear4NPH(OriginBox *,flt const,flt const,flt const,uint,std::vector< atomgroup * >,std::vector< interaction * >)\n"
    "    collectionGear4NPH::collectionGear4NPH(OriginBox *,flt const,flt const,flt const,uint,std::vector< atomgroup * >)\n"
    "    collectionGear4NPH::collectionGear4NPH(OriginBox *,flt const,flt const,flt const,uint)\n"
    "    collectionGear4NPH::collectionGear4NPH(OriginBox *,flt const,flt const,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >,std::vector< constraint * >)\n"
    "    collectionGear4NPH::collectionGear4NPH(OriginBox *,flt const,flt const,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >)\n"
    "    collectionGear4NPH::collectionGear4NPH(OriginBox *,flt const,flt const,flt const,std::vector< atomgroup * >,std::vector< interaction * >)\n"
    "    collectionGear4NPH::collectionGear4NPH(OriginBox *,flt const,flt const,flt const,std::vector< atomgroup * >)\n"
    "    collectionGear4NPH::collectionGear4NPH(OriginBox *,flt const,flt const,flt const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPH_timestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPH *arg1 = (collectionGear4NPH *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear4NPH_timestep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPH_timestep" "', argument " "1"" of type '" "collectionGear4NPH *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPH * >(argp1);
  (arg1)->timestep();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPH_kinetic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPH *arg1 = (collectionGear4NPH *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear4NPH_kinetic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPH_kinetic" "', argument " "1"" of type '" "collectionGear4NPH *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPH * >(argp1);
  result = (flt)(arg1)->kinetic();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPH_temp__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPH *arg1 = (collectionGear4NPH *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionGear4NPH_temp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPH_temp" "', argument " "1"" of type '" "collectionGear4NPH *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPH * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionGear4NPH_temp" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (flt)(arg1)->temp(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPH_temp__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPH *arg1 = (collectionGear4NPH *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear4NPH_temp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPH_temp" "', argument " "1"" of type '" "collectionGear4NPH *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPH * >(argp1);
  result = (flt)(arg1)->temp();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPH_temp(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_collectionGear4NPH, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_collectionGear4NPH_temp__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_collectionGear4NPH, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_collectionGear4NPH_temp__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'collectionGear4NPH_temp'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    collectionGear4NPH::temp(bool)\n"
    "    collectionGear4NPH::temp()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPH_Hamiltonian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPH *arg1 = (collectionGear4NPH *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear4NPH_Hamiltonian",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPH_Hamiltonian" "', argument " "1"" of type '" "collectionGear4NPH *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPH * >(argp1);
  result = (flt)(arg1)->Hamiltonian();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPH_getdV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPH *arg1 = (collectionGear4NPH *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear4NPH_getdV",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPH_getdV" "', argument " "1"" of type '" "collectionGear4NPH *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPH * >(argp1);
  result = (flt)(arg1)->getdV();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPH_getddV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPH *arg1 = (collectionGear4NPH *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear4NPH_getddV",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPH_getddV" "', argument " "1"" of type '" "collectionGear4NPH *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPH * >(argp1);
  result = (flt)(arg1)->getddV();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPH_setdt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPH *arg1 = (collectionGear4NPH *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionGear4NPH_setdt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPH_setdt" "', argument " "1"" of type '" "collectionGear4NPH *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPH * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionGear4NPH_setdt" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  (arg1)->setdt(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_collectionGear4NPH(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPH *arg1 = (collectionGear4NPH *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_collectionGear4NPH",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPH, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_collectionGear4NPH" "', argument " "1"" of type '" "collectionGear4NPH *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPH * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *collectionGear4NPH_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_collectionGear4NPH, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_xrpsummer_xsum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xrpsummer *arg1 = (xrpsummer *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:xrpsummer_xsum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xrpsummer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xrpsummer_xsum_set" "', argument " "1"" of type '" "xrpsummer *""'"); 
  }
  arg1 = reinterpret_cast< xrpsummer * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xrpsummer_xsum_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->xsum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xrpsummer_xsum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xrpsummer *arg1 = (xrpsummer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:xrpsummer_xsum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xrpsummer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xrpsummer_xsum_get" "', argument " "1"" of type '" "xrpsummer *""'"); 
  }
  arg1 = reinterpret_cast< xrpsummer * >(argp1);
  result = (flt) ((arg1)->xsum);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xrpsummer_rpxsum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xrpsummer *arg1 = (xrpsummer *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:xrpsummer_rpxsum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xrpsummer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xrpsummer_rpxsum_set" "', argument " "1"" of type '" "xrpsummer *""'"); 
  }
  arg1 = reinterpret_cast< xrpsummer * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xrpsummer_rpxsum_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->rpxsum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xrpsummer_rpxsum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xrpsummer *arg1 = (xrpsummer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:xrpsummer_rpxsum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xrpsummer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xrpsummer_rpxsum_get" "', argument " "1"" of type '" "xrpsummer *""'"); 
  }
  arg1 = reinterpret_cast< xrpsummer * >(argp1);
  result = (flt) ((arg1)->rpxsum);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xrpsummer_vfsum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xrpsummer *arg1 = (xrpsummer *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:xrpsummer_vfsum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xrpsummer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xrpsummer_vfsum_set" "', argument " "1"" of type '" "xrpsummer *""'"); 
  }
  arg1 = reinterpret_cast< xrpsummer * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xrpsummer_vfsum_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->vfsum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xrpsummer_vfsum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xrpsummer *arg1 = (xrpsummer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:xrpsummer_vfsum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xrpsummer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xrpsummer_vfsum_get" "', argument " "1"" of type '" "xrpsummer *""'"); 
  }
  arg1 = reinterpret_cast< xrpsummer * >(argp1);
  result = (flt) ((arg1)->vfsum);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xrpsummer_rfsum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xrpsummer *arg1 = (xrpsummer *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:xrpsummer_rfsum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xrpsummer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xrpsummer_rfsum_set" "', argument " "1"" of type '" "xrpsummer *""'"); 
  }
  arg1 = reinterpret_cast< xrpsummer * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xrpsummer_rfsum_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->rfsum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xrpsummer_rfsum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xrpsummer *arg1 = (xrpsummer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:xrpsummer_rfsum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xrpsummer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xrpsummer_rfsum_get" "', argument " "1"" of type '" "xrpsummer *""'"); 
  }
  arg1 = reinterpret_cast< xrpsummer * >(argp1);
  result = (flt) ((arg1)->rfsum);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_xrpsummer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Box *arg1 = (Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  xrpsummer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_xrpsummer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_xrpsummer" "', argument " "1"" of type '" "Box *""'"); 
  }
  arg1 = reinterpret_cast< Box * >(argp1);
  result = (xrpsummer *)new xrpsummer(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xrpsummer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xrpsummer_run(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xrpsummer *arg1 = (xrpsummer *) 0 ;
  forcepairx *arg2 = (forcepairx *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:xrpsummer_run",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xrpsummer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xrpsummer_run" "', argument " "1"" of type '" "xrpsummer *""'"); 
  }
  arg1 = reinterpret_cast< xrpsummer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_forcepairx, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "xrpsummer_run" "', argument " "2"" of type '" "forcepairx *""'"); 
  }
  arg2 = reinterpret_cast< forcepairx * >(argp2);
  (arg1)->run(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xrpsummer_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xrpsummer *arg1 = (xrpsummer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:xrpsummer_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xrpsummer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xrpsummer_reset" "', argument " "1"" of type '" "xrpsummer *""'"); 
  }
  arg1 = reinterpret_cast< xrpsummer * >(argp1);
  (arg1)->reset();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_xrpsummer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xrpsummer *arg1 = (xrpsummer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_xrpsummer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xrpsummer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_xrpsummer" "', argument " "1"" of type '" "xrpsummer *""'"); 
  }
  arg1 = reinterpret_cast< xrpsummer * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *xrpsummer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_xrpsummer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_collectionGear4NPT_dt_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionGear4NPT_dt_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_dt_set" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionGear4NPT_dt_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->dt = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_dt_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear4NPT_dt_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_dt_get" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  result = (flt) ((arg1)->dt);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_xrpsums_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  xrpsummer *arg2 = (xrpsummer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionGear4NPT_xrpsums_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_xrpsums_set" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_xrpsummer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "collectionGear4NPT_xrpsums_set" "', argument " "2"" of type '" "xrpsummer *""'"); 
  }
  arg2 = reinterpret_cast< xrpsummer * >(argp2);
  if (arg1) (arg1)->xrpsums = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_xrpsums_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  xrpsummer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear4NPT_xrpsums_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_xrpsums_get" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  result = (xrpsummer *)& ((arg1)->xrpsums);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xrpsummer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_ncorrec_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionGear4NPT_ncorrec_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_ncorrec_set" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionGear4NPT_ncorrec_set" "', argument " "2"" of type '" "uint""'");
  } 
  arg2 = static_cast< uint >(val2);
  if (arg1) (arg1)->ncorrec = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_ncorrec_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear4NPT_ncorrec_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_ncorrec_get" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  result = (uint) ((arg1)->ncorrec);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_V1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionGear4NPT_V1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_V1_set" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionGear4NPT_V1_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->V1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_V1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear4NPT_V1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_V1_get" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  result = (flt) ((arg1)->V1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_V2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionGear4NPT_V2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_V2_set" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionGear4NPT_V2_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->V2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_V2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear4NPT_V2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_V2_get" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  result = (flt) ((arg1)->V2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_V3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionGear4NPT_V3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_V3_set" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionGear4NPT_V3_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->V3 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_V3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear4NPT_V3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_V3_get" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  result = (flt) ((arg1)->V3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_chi_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionGear4NPT_chi_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_chi_set" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionGear4NPT_chi_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->chi = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_chi_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear4NPT_chi_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_chi_get" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  result = (flt) ((arg1)->chi);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_chixi_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionGear4NPT_chixi_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_chixi_set" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionGear4NPT_chixi_set" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  if (arg1) (arg1)->chixi = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_chixi_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear4NPT_chixi_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_chixi_get" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  result = (flt) ((arg1)->chixi);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_xs1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  std::vector< Vec > *arg2 = (std::vector< Vec > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionGear4NPT_xs1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_xs1_set" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "collectionGear4NPT_xs1_set" "', argument " "2"" of type '" "std::vector< Vec > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Vec > * >(argp2);
  if (arg1) (arg1)->xs1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_xs1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Vec > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear4NPT_xs1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_xs1_get" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  result = (std::vector< Vec > *)& ((arg1)->xs1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_xs2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  std::vector< Vec > *arg2 = (std::vector< Vec > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionGear4NPT_xs2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_xs2_set" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "collectionGear4NPT_xs2_set" "', argument " "2"" of type '" "std::vector< Vec > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Vec > * >(argp2);
  if (arg1) (arg1)->xs2 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_xs2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Vec > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear4NPT_xs2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_xs2_get" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  result = (std::vector< Vec > *)& ((arg1)->xs2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_xs3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  std::vector< Vec > *arg2 = (std::vector< Vec > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionGear4NPT_xs3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_xs3_set" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "collectionGear4NPT_xs3_set" "', argument " "2"" of type '" "std::vector< Vec > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Vec > * >(argp2);
  if (arg1) (arg1)->xs3 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_xs3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Vec > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear4NPT_xs3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_xs3_get" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  result = (std::vector< Vec > *)& ((arg1)->xs3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_vs2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  std::vector< Vec > *arg2 = (std::vector< Vec > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionGear4NPT_vs2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_vs2_set" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "collectionGear4NPT_vs2_set" "', argument " "2"" of type '" "std::vector< Vec > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Vec > * >(argp2);
  if (arg1) (arg1)->vs2 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_vs2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Vec > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear4NPT_vs2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_vs2_get" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  result = (std::vector< Vec > *)& ((arg1)->vs2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_vs3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  std::vector< Vec > *arg2 = (std::vector< Vec > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionGear4NPT_vs3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_vs3_set" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "collectionGear4NPT_vs3_set" "', argument " "2"" of type '" "std::vector< Vec > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Vec > * >(argp2);
  if (arg1) (arg1)->vs3 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_vs3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Vec > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear4NPT_vs3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_vs3_get" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  result = (std::vector< Vec > *)& ((arg1)->vs3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_resetbs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear4NPT_resetbs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_resetbs" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  (arg1)->resetbs();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_tointerpair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< interactionpairsx * > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< interaction * > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear4NPT_tointerpair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_tointerpair" "', argument " "1"" of type '" "std::vector< interactionpairsx * > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "collectionGear4NPT_tointerpair" "', argument " "1"" of type '" "std::vector< interactionpairsx * > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< interactionpairsx * > * >(argp1);
  result = collectionGear4NPT::tointerpair(*arg1);
  resultobj = swig::from(static_cast< std::vector<interaction*,std::allocator< interaction * > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4NPT__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  uint arg3 ;
  std::vector< atomgroup * > arg4 ;
  std::vector< interactionpairsx * > arg5 ;
  std::vector< statetracker * > arg6 ;
  std::vector< constraint * > arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  collectionGear4NPT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_collectionGear4NPT",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4NPT" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4NPT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear4NPT" "', argument " "3"" of type '" "uint""'");
  } 
  arg3 = static_cast< uint >(val3);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPT" "', argument " "4"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interactionpairsx*,std::allocator< interactionpairsx * > > *ptr = (std::vector<interactionpairsx*,std::allocator< interactionpairsx * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPT" "', argument " "5"" of type '" "std::vector< interactionpairsx * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPT" "', argument " "6"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<constraint*,std::allocator< constraint * > > *ptr = (std::vector<constraint*,std::allocator< constraint * > > *)0;
    int res = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPT" "', argument " "7"" of type '" "std::vector< constraint * >""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear4NPT *)new collectionGear4NPT(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4NPT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4NPT__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  uint arg3 ;
  std::vector< atomgroup * > arg4 ;
  std::vector< interactionpairsx * > arg5 ;
  std::vector< statetracker * > arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  collectionGear4NPT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_collectionGear4NPT",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4NPT" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4NPT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear4NPT" "', argument " "3"" of type '" "uint""'");
  } 
  arg3 = static_cast< uint >(val3);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPT" "', argument " "4"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interactionpairsx*,std::allocator< interactionpairsx * > > *ptr = (std::vector<interactionpairsx*,std::allocator< interactionpairsx * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPT" "', argument " "5"" of type '" "std::vector< interactionpairsx * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPT" "', argument " "6"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear4NPT *)new collectionGear4NPT(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4NPT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4NPT__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  uint arg3 ;
  std::vector< atomgroup * > arg4 ;
  std::vector< interactionpairsx * > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  collectionGear4NPT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_collectionGear4NPT",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4NPT" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4NPT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear4NPT" "', argument " "3"" of type '" "uint""'");
  } 
  arg3 = static_cast< uint >(val3);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPT" "', argument " "4"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interactionpairsx*,std::allocator< interactionpairsx * > > *ptr = (std::vector<interactionpairsx*,std::allocator< interactionpairsx * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPT" "', argument " "5"" of type '" "std::vector< interactionpairsx * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear4NPT *)new collectionGear4NPT(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4NPT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4NPT__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  uint arg3 ;
  std::vector< atomgroup * > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  collectionGear4NPT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_collectionGear4NPT",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4NPT" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4NPT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear4NPT" "', argument " "3"" of type '" "uint""'");
  } 
  arg3 = static_cast< uint >(val3);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPT" "', argument " "4"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear4NPT *)new collectionGear4NPT(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4NPT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4NPT__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  uint arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  collectionGear4NPT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_collectionGear4NPT",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4NPT" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4NPT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionGear4NPT" "', argument " "3"" of type '" "uint""'");
  } 
  arg3 = static_cast< uint >(val3);
  result = (collectionGear4NPT *)new collectionGear4NPT(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4NPT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4NPT__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  std::vector< interactionpairsx * > arg4 ;
  std::vector< statetracker * > arg5 ;
  std::vector< constraint * > arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  collectionGear4NPT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_collectionGear4NPT",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4NPT" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4NPT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPT" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interactionpairsx*,std::allocator< interactionpairsx * > > *ptr = (std::vector<interactionpairsx*,std::allocator< interactionpairsx * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPT" "', argument " "4"" of type '" "std::vector< interactionpairsx * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPT" "', argument " "5"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<constraint*,std::allocator< constraint * > > *ptr = (std::vector<constraint*,std::allocator< constraint * > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPT" "', argument " "6"" of type '" "std::vector< constraint * >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear4NPT *)new collectionGear4NPT(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4NPT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4NPT__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  std::vector< interactionpairsx * > arg4 ;
  std::vector< statetracker * > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  collectionGear4NPT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_collectionGear4NPT",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4NPT" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4NPT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPT" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interactionpairsx*,std::allocator< interactionpairsx * > > *ptr = (std::vector<interactionpairsx*,std::allocator< interactionpairsx * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPT" "', argument " "4"" of type '" "std::vector< interactionpairsx * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPT" "', argument " "5"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear4NPT *)new collectionGear4NPT(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4NPT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4NPT__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  std::vector< interactionpairsx * > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  collectionGear4NPT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_collectionGear4NPT",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4NPT" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4NPT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPT" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interactionpairsx*,std::allocator< interactionpairsx * > > *ptr = (std::vector<interactionpairsx*,std::allocator< interactionpairsx * > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPT" "', argument " "4"" of type '" "std::vector< interactionpairsx * >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear4NPT *)new collectionGear4NPT(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4NPT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4NPT__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  std::vector< atomgroup * > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  collectionGear4NPT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_collectionGear4NPT",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4NPT" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4NPT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionGear4NPT" "', argument " "3"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionGear4NPT *)new collectionGear4NPT(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4NPT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4NPT__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  collectionGear4NPT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_collectionGear4NPT",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionGear4NPT" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionGear4NPT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  result = (collectionGear4NPT *)new collectionGear4NPT(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionGear4NPT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionGear4NPT(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_collectionGear4NPT__SWIG_9(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_collectionGear4NPT__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_collectionGear4NPT__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_collectionGear4NPT__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interactionpairsx*,std::allocator< interactionpairsx * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_collectionGear4NPT__SWIG_7(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<interactionpairsx*,std::allocator< interactionpairsx * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_collectionGear4NPT__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interactionpairsx*,std::allocator< interactionpairsx * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_collectionGear4NPT__SWIG_6(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<interactionpairsx*,std::allocator< interactionpairsx * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_collectionGear4NPT__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<interactionpairsx*,std::allocator< interactionpairsx * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<constraint*,std::allocator< constraint * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_collectionGear4NPT__SWIG_5(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<interactionpairsx*,std::allocator< interactionpairsx * > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector<constraint*,std::allocator< constraint * > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_collectionGear4NPT__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_collectionGear4NPT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    collectionGear4NPT::collectionGear4NPT(OriginBox *,flt const,uint,std::vector< atomgroup * >,std::vector< interactionpairsx * >,std::vector< statetracker * >,std::vector< constraint * >)\n"
    "    collectionGear4NPT::collectionGear4NPT(OriginBox *,flt const,uint,std::vector< atomgroup * >,std::vector< interactionpairsx * >,std::vector< statetracker * >)\n"
    "    collectionGear4NPT::collectionGear4NPT(OriginBox *,flt const,uint,std::vector< atomgroup * >,std::vector< interactionpairsx * >)\n"
    "    collectionGear4NPT::collectionGear4NPT(OriginBox *,flt const,uint,std::vector< atomgroup * >)\n"
    "    collectionGear4NPT::collectionGear4NPT(OriginBox *,flt const,uint)\n"
    "    collectionGear4NPT::collectionGear4NPT(OriginBox *,flt const,std::vector< atomgroup * >,std::vector< interactionpairsx * >,std::vector< statetracker * >,std::vector< constraint * >)\n"
    "    collectionGear4NPT::collectionGear4NPT(OriginBox *,flt const,std::vector< atomgroup * >,std::vector< interactionpairsx * >,std::vector< statetracker * >)\n"
    "    collectionGear4NPT::collectionGear4NPT(OriginBox *,flt const,std::vector< atomgroup * >,std::vector< interactionpairsx * >)\n"
    "    collectionGear4NPT::collectionGear4NPT(OriginBox *,flt const,std::vector< atomgroup * >)\n"
    "    collectionGear4NPT::collectionGear4NPT(OriginBox *,flt const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_setForces__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionGear4NPT_setForces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_setForces" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionGear4NPT_setForces" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setForces(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_setForces__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear4NPT_setForces",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_setForces" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  (arg1)->setForces();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_setForces(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_collectionGear4NPT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_collectionGear4NPT_setForces__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_collectionGear4NPT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_collectionGear4NPT_setForces__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'collectionGear4NPT_setForces'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    collectionGear4NPT::setForces(bool)\n"
    "    collectionGear4NPT::setForces()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_collectionGear4NPT_timestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionGear4NPT_timestep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionGear4NPT_timestep" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  (arg1)->timestep();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_collectionGear4NPT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionGear4NPT *arg1 = (collectionGear4NPT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_collectionGear4NPT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionGear4NPT, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_collectionGear4NPT" "', argument " "1"" of type '" "collectionGear4NPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionGear4NPT * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *collectionGear4NPT_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_collectionGear4NPT, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_collectionVerletNPT__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  flt arg5 ;
  flt arg6 ;
  std::vector< atomgroup * > arg7 ;
  std::vector< interaction * > arg8 ;
  std::vector< statetracker * > arg9 ;
  std::vector< constraint * > arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  collectionVerletNPT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:new_collectionVerletNPT",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionVerletNPT" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionVerletNPT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionVerletNPT" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionVerletNPT" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_collectionVerletNPT" "', argument " "5"" of type '" "flt""'");
  } 
  arg5 = static_cast< flt >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_collectionVerletNPT" "', argument " "6"" of type '" "flt""'");
  } 
  arg6 = static_cast< flt >(val6);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionVerletNPT" "', argument " "7"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj7, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionVerletNPT" "', argument " "8"" of type '" "std::vector< interaction * >""'"); 
    }
    arg8 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj8, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionVerletNPT" "', argument " "9"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg9 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<constraint*,std::allocator< constraint * > > *ptr = (std::vector<constraint*,std::allocator< constraint * > > *)0;
    int res = swig::asptr(obj9, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionVerletNPT" "', argument " "10"" of type '" "std::vector< constraint * >""'"); 
    }
    arg10 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionVerletNPT *)new collectionVerletNPT(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionVerletNPT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionVerletNPT__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  flt arg5 ;
  flt arg6 ;
  std::vector< atomgroup * > arg7 ;
  std::vector< interaction * > arg8 ;
  std::vector< statetracker * > arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  collectionVerletNPT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_collectionVerletNPT",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionVerletNPT" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionVerletNPT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionVerletNPT" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionVerletNPT" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_collectionVerletNPT" "', argument " "5"" of type '" "flt""'");
  } 
  arg5 = static_cast< flt >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_collectionVerletNPT" "', argument " "6"" of type '" "flt""'");
  } 
  arg6 = static_cast< flt >(val6);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionVerletNPT" "', argument " "7"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj7, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionVerletNPT" "', argument " "8"" of type '" "std::vector< interaction * >""'"); 
    }
    arg8 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<statetracker*,std::allocator< statetracker * > > *ptr = (std::vector<statetracker*,std::allocator< statetracker * > > *)0;
    int res = swig::asptr(obj8, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionVerletNPT" "', argument " "9"" of type '" "std::vector< statetracker * >""'"); 
    }
    arg9 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionVerletNPT *)new collectionVerletNPT(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionVerletNPT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionVerletNPT__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  flt arg5 ;
  flt arg6 ;
  std::vector< atomgroup * > arg7 ;
  std::vector< interaction * > arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  collectionVerletNPT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_collectionVerletNPT",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionVerletNPT" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionVerletNPT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionVerletNPT" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionVerletNPT" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_collectionVerletNPT" "', argument " "5"" of type '" "flt""'");
  } 
  arg5 = static_cast< flt >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_collectionVerletNPT" "', argument " "6"" of type '" "flt""'");
  } 
  arg6 = static_cast< flt >(val6);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionVerletNPT" "', argument " "7"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<interaction*,std::allocator< interaction * > > *ptr = (std::vector<interaction*,std::allocator< interaction * > > *)0;
    int res = swig::asptr(obj7, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionVerletNPT" "', argument " "8"" of type '" "std::vector< interaction * >""'"); 
    }
    arg8 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionVerletNPT *)new collectionVerletNPT(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionVerletNPT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionVerletNPT__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  flt arg5 ;
  flt arg6 ;
  std::vector< atomgroup * > arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  collectionVerletNPT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_collectionVerletNPT",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionVerletNPT" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionVerletNPT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionVerletNPT" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionVerletNPT" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_collectionVerletNPT" "', argument " "5"" of type '" "flt""'");
  } 
  arg5 = static_cast< flt >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_collectionVerletNPT" "', argument " "6"" of type '" "flt""'");
  } 
  arg6 = static_cast< flt >(val6);
  {
    std::vector<atomgroup*,std::allocator< atomgroup * > > *ptr = (std::vector<atomgroup*,std::allocator< atomgroup * > > *)0;
    int res = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_collectionVerletNPT" "', argument " "7"" of type '" "std::vector< atomgroup * >""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (collectionVerletNPT *)new collectionVerletNPT(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionVerletNPT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionVerletNPT__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OriginBox *arg1 = (OriginBox *) 0 ;
  flt arg2 ;
  flt arg3 ;
  flt arg4 ;
  flt arg5 ;
  flt arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  collectionVerletNPT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_collectionVerletNPT",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OriginBox, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_collectionVerletNPT" "', argument " "1"" of type '" "OriginBox *""'"); 
  }
  arg1 = reinterpret_cast< OriginBox * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_collectionVerletNPT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_collectionVerletNPT" "', argument " "3"" of type '" "flt""'");
  } 
  arg3 = static_cast< flt >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_collectionVerletNPT" "', argument " "4"" of type '" "flt""'");
  } 
  arg4 = static_cast< flt >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_collectionVerletNPT" "', argument " "5"" of type '" "flt""'");
  } 
  arg5 = static_cast< flt >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_collectionVerletNPT" "', argument " "6"" of type '" "flt""'");
  } 
  arg6 = static_cast< flt >(val6);
  result = (collectionVerletNPT *)new collectionVerletNPT(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_collectionVerletNPT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_collectionVerletNPT(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[11];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 10) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_collectionVerletNPT__SWIG_4(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_collectionVerletNPT__SWIG_3(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = swig::asptr(argv[7], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_new_collectionVerletNPT__SWIG_2(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = swig::asptr(argv[7], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = swig::asptr(argv[8], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_new_collectionVerletNPT__SWIG_1(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OriginBox, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = swig::asptr(argv[6], (std::vector<atomgroup*,std::allocator< atomgroup * > >**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = swig::asptr(argv[7], (std::vector<interaction*,std::allocator< interaction * > >**)(0));
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = swig::asptr(argv[8], (std::vector<statetracker*,std::allocator< statetracker * > >**)(0));
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      int res = swig::asptr(argv[9], (std::vector<constraint*,std::allocator< constraint * > >**)(0));
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        return _wrap_new_collectionVerletNPT__SWIG_0(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_collectionVerletNPT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    collectionVerletNPT::collectionVerletNPT(OriginBox *,flt const,flt const,flt const,flt const,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >,std::vector< constraint * >)\n"
    "    collectionVerletNPT::collectionVerletNPT(OriginBox *,flt const,flt const,flt const,flt const,flt const,std::vector< atomgroup * >,std::vector< interaction * >,std::vector< statetracker * >)\n"
    "    collectionVerletNPT::collectionVerletNPT(OriginBox *,flt const,flt const,flt const,flt const,flt const,std::vector< atomgroup * >,std::vector< interaction * >)\n"
    "    collectionVerletNPT::collectionVerletNPT(OriginBox *,flt const,flt const,flt const,flt const,flt const,std::vector< atomgroup * >)\n"
    "    collectionVerletNPT::collectionVerletNPT(OriginBox *,flt const,flt const,flt const,flt const,flt const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_collectionVerletNPT_timestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionVerletNPT *arg1 = (collectionVerletNPT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionVerletNPT_timestep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionVerletNPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionVerletNPT_timestep" "', argument " "1"" of type '" "collectionVerletNPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionVerletNPT * >(argp1);
  (arg1)->timestep();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionVerletNPT_setdt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionVerletNPT *arg1 = (collectionVerletNPT *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionVerletNPT_setdt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionVerletNPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionVerletNPT_setdt" "', argument " "1"" of type '" "collectionVerletNPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionVerletNPT * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionVerletNPT_setdt" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  (arg1)->setdt(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionVerletNPT_resetcomv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionVerletNPT *arg1 = (collectionVerletNPT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionVerletNPT_resetcomv",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionVerletNPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionVerletNPT_resetcomv" "', argument " "1"" of type '" "collectionVerletNPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionVerletNPT * >(argp1);
  (arg1)->resetcomv();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionVerletNPT_resetL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionVerletNPT *arg1 = (collectionVerletNPT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionVerletNPT_resetL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionVerletNPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionVerletNPT_resetL" "', argument " "1"" of type '" "collectionVerletNPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionVerletNPT * >(argp1);
  (arg1)->resetL();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionVerletNPT_scaleVs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionVerletNPT *arg1 = (collectionVerletNPT *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionVerletNPT_scaleVs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionVerletNPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionVerletNPT_scaleVs" "', argument " "1"" of type '" "collectionVerletNPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionVerletNPT * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionVerletNPT_scaleVs" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  (arg1)->scaleVs(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionVerletNPT_scaleVelocitiesT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionVerletNPT *arg1 = (collectionVerletNPT *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionVerletNPT_scaleVelocitiesT",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionVerletNPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionVerletNPT_scaleVelocitiesT" "', argument " "1"" of type '" "collectionVerletNPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionVerletNPT * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionVerletNPT_scaleVelocitiesT" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  (arg1)->scaleVelocitiesT(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionVerletNPT_scaleVelocitiesE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionVerletNPT *arg1 = (collectionVerletNPT *) 0 ;
  flt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionVerletNPT_scaleVelocitiesE",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionVerletNPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionVerletNPT_scaleVelocitiesE" "', argument " "1"" of type '" "collectionVerletNPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionVerletNPT * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionVerletNPT_scaleVelocitiesE" "', argument " "2"" of type '" "flt""'");
  } 
  arg2 = static_cast< flt >(val2);
  (arg1)->scaleVelocitiesE(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionVerletNPT_geteta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionVerletNPT *arg1 = (collectionVerletNPT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionVerletNPT_geteta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionVerletNPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionVerletNPT_geteta" "', argument " "1"" of type '" "collectionVerletNPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionVerletNPT * >(argp1);
  result = (flt)(arg1)->geteta();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionVerletNPT_getxidot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionVerletNPT *arg1 = (collectionVerletNPT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionVerletNPT_getxidot",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionVerletNPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionVerletNPT_getxidot" "', argument " "1"" of type '" "collectionVerletNPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionVerletNPT * >(argp1);
  result = (flt)(arg1)->getxidot();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionVerletNPT_getP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionVerletNPT *arg1 = (collectionVerletNPT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  flt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:collectionVerletNPT_getP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionVerletNPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionVerletNPT_getP" "', argument " "1"" of type '" "collectionVerletNPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionVerletNPT * >(argp1);
  result = (flt)(arg1)->getP();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_collectionVerletNPT_getvhalf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionVerletNPT *arg1 = (collectionVerletNPT *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:collectionVerletNPT_getvhalf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionVerletNPT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collectionVerletNPT_getvhalf" "', argument " "1"" of type '" "collectionVerletNPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionVerletNPT * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "collectionVerletNPT_getvhalf" "', argument " "2"" of type '" "uint""'");
  } 
  arg2 = static_cast< uint >(val2);
  result = (arg1)->getvhalf(arg2);
  resultobj = SWIG_NewPointerObj((new Vec(static_cast< const Vec& >(result))), SWIGTYPE_p_Vector2T_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_collectionVerletNPT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  collectionVerletNPT *arg1 = (collectionVerletNPT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_collectionVerletNPT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_collectionVerletNPT, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_collectionVerletNPT" "', argument " "1"" of type '" "collectionVerletNPT *""'"); 
  }
  arg1 = reinterpret_cast< collectionVerletNPT * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *collectionVerletNPT_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_collectionVerletNPT, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, (char *)"delete_SwigPyIterator(SwigPyIterator self)"},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, (char *)"SwigPyIterator_value(SwigPyIterator self) -> PyObject *"},
	 { (char *)"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, (char *)"\n"
		"incr(size_t n=1) -> SwigPyIterator\n"
		"SwigPyIterator_incr(SwigPyIterator self) -> SwigPyIterator\n"
		""},
	 { (char *)"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, (char *)"\n"
		"decr(size_t n=1) -> SwigPyIterator\n"
		"SwigPyIterator_decr(SwigPyIterator self) -> SwigPyIterator\n"
		""},
	 { (char *)"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, (char *)"SwigPyIterator_distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"},
	 { (char *)"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, (char *)"SwigPyIterator_equal(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, (char *)"SwigPyIterator_copy(SwigPyIterator self) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, (char *)"SwigPyIterator_next(SwigPyIterator self) -> PyObject *"},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, (char *)"SwigPyIterator___next__(SwigPyIterator self) -> PyObject *"},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, (char *)"SwigPyIterator_previous(SwigPyIterator self) -> PyObject *"},
	 { (char *)"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, (char *)"SwigPyIterator_advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, (char *)"SwigPyIterator___eq__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, (char *)"SwigPyIterator___ne__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, (char *)"SwigPyIterator___iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, (char *)"SwigPyIterator___isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, (char *)"SwigPyIterator___add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, (char *)"\n"
		"__sub__(ptrdiff_t n) -> SwigPyIterator\n"
		"SwigPyIterator___sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t\n"
		""},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new__Nvector3", _wrap_new__Nvector3, METH_VARARGS, (char *)"\n"
		"_Nvector3()\n"
		"_Nvector3(_Nvector3 rhs)\n"
		"new__Nvector3(double const [3] locs) -> _Nvector3\n"
		""},
	 { (char *)"_Nvector3_get", _wrap__Nvector3_get, METH_VARARGS, (char *)"_Nvector3_get(_Nvector3 self, unsigned int const n) -> double const &"},
	 { (char *)"_Nvector3_set", _wrap__Nvector3_set, METH_VARARGS, (char *)"_Nvector3_set(_Nvector3 self, unsigned int const n, double const a)"},
	 { (char *)"_Nvector3_len", _wrap__Nvector3_len, METH_VARARGS, (char *)"_Nvector3_len(_Nvector3 self) -> unsigned int"},
	 { (char *)"_Nvector3___iadd__", _wrap__Nvector3___iadd__, METH_VARARGS, (char *)"_Nvector3___iadd__(_Nvector3 self, _Nvector3 rhs) -> _Nvector3"},
	 { (char *)"_Nvector3___isub__", _wrap__Nvector3___isub__, METH_VARARGS, (char *)"_Nvector3___isub__(_Nvector3 self, _Nvector3 rhs) -> _Nvector3"},
	 { (char *)"_Nvector3___neg__", _wrap__Nvector3___neg__, METH_VARARGS, (char *)"_Nvector3___neg__(_Nvector3 self) -> _Nvector3"},
	 { (char *)"_Nvector3___add__", _wrap__Nvector3___add__, METH_VARARGS, (char *)"_Nvector3___add__(_Nvector3 self, _Nvector3 rhs) -> _Nvector3"},
	 { (char *)"_Nvector3___sub__", _wrap__Nvector3___sub__, METH_VARARGS, (char *)"_Nvector3___sub__(_Nvector3 self, _Nvector3 rhs) -> _Nvector3"},
	 { (char *)"_Nvector3_begin", _wrap__Nvector3_begin, METH_VARARGS, (char *)"_Nvector3_begin(_Nvector3 self) -> double *"},
	 { (char *)"_Nvector3_end", _wrap__Nvector3_end, METH_VARARGS, (char *)"_Nvector3_end(_Nvector3 self) -> double *"},
	 { (char *)"delete__Nvector3", _wrap_delete__Nvector3, METH_VARARGS, (char *)"delete__Nvector3(_Nvector3 self)"},
	 { (char *)"_Nvector3___mul__", _wrap__Nvector3___mul__, METH_VARARGS, (char *)"_Nvector3___mul__(_Nvector3 self, double const rhs) -> _Nvector3"},
	 { (char *)"_Nvector3___div__", _wrap__Nvector3___div__, METH_VARARGS, (char *)"_Nvector3___div__(_Nvector3 self, double const rhs) -> _Nvector3"},
	 { (char *)"_Nvector3___truediv__", _wrap__Nvector3___truediv__, METH_VARARGS, (char *)"_Nvector3___truediv__(_Nvector3 self, double const n) -> _Nvector3"},
	 { (char *)"_Nvector3___getitem__", _wrap__Nvector3___getitem__, METH_VARARGS, (char *)"_Nvector3___getitem__(_Nvector3 self, unsigned int const n) -> double"},
	 { (char *)"_Nvector3___setitem__", _wrap__Nvector3___setitem__, METH_VARARGS, (char *)"_Nvector3___setitem__(_Nvector3 self, unsigned int const n, double const val)"},
	 { (char *)"_Nvector3___len__", _wrap__Nvector3___len__, METH_VARARGS, (char *)"_Nvector3___len__(_Nvector3 self) -> unsigned int"},
	 { (char *)"_Nvector3_swigregister", _Nvector3_swigregister, METH_VARARGS, NULL},
	 { (char *)"new__Nvector2", _wrap_new__Nvector2, METH_VARARGS, (char *)"\n"
		"_Nvector2()\n"
		"_Nvector2(_Nvector2 rhs)\n"
		"new__Nvector2(double const [2] locs) -> _Nvector2\n"
		""},
	 { (char *)"_Nvector2_get", _wrap__Nvector2_get, METH_VARARGS, (char *)"_Nvector2_get(_Nvector2 self, unsigned int const n) -> double const &"},
	 { (char *)"_Nvector2_set", _wrap__Nvector2_set, METH_VARARGS, (char *)"_Nvector2_set(_Nvector2 self, unsigned int const n, double const a)"},
	 { (char *)"_Nvector2_len", _wrap__Nvector2_len, METH_VARARGS, (char *)"_Nvector2_len(_Nvector2 self) -> unsigned int"},
	 { (char *)"_Nvector2___iadd__", _wrap__Nvector2___iadd__, METH_VARARGS, (char *)"_Nvector2___iadd__(_Nvector2 self, _Nvector2 rhs) -> _Nvector2"},
	 { (char *)"_Nvector2___isub__", _wrap__Nvector2___isub__, METH_VARARGS, (char *)"_Nvector2___isub__(_Nvector2 self, _Nvector2 rhs) -> _Nvector2"},
	 { (char *)"_Nvector2___neg__", _wrap__Nvector2___neg__, METH_VARARGS, (char *)"_Nvector2___neg__(_Nvector2 self) -> _Nvector2"},
	 { (char *)"_Nvector2___add__", _wrap__Nvector2___add__, METH_VARARGS, (char *)"_Nvector2___add__(_Nvector2 self, _Nvector2 rhs) -> _Nvector2"},
	 { (char *)"_Nvector2___sub__", _wrap__Nvector2___sub__, METH_VARARGS, (char *)"_Nvector2___sub__(_Nvector2 self, _Nvector2 rhs) -> _Nvector2"},
	 { (char *)"_Nvector2_begin", _wrap__Nvector2_begin, METH_VARARGS, (char *)"_Nvector2_begin(_Nvector2 self) -> double *"},
	 { (char *)"_Nvector2_end", _wrap__Nvector2_end, METH_VARARGS, (char *)"_Nvector2_end(_Nvector2 self) -> double *"},
	 { (char *)"delete__Nvector2", _wrap_delete__Nvector2, METH_VARARGS, (char *)"delete__Nvector2(_Nvector2 self)"},
	 { (char *)"_Nvector2___mul__", _wrap__Nvector2___mul__, METH_VARARGS, (char *)"_Nvector2___mul__(_Nvector2 self, double const rhs) -> _Nvector2"},
	 { (char *)"_Nvector2___div__", _wrap__Nvector2___div__, METH_VARARGS, (char *)"_Nvector2___div__(_Nvector2 self, double const rhs) -> _Nvector2"},
	 { (char *)"_Nvector2___truediv__", _wrap__Nvector2___truediv__, METH_VARARGS, (char *)"_Nvector2___truediv__(_Nvector2 self, double const n) -> _Nvector2"},
	 { (char *)"_Nvector2___getitem__", _wrap__Nvector2___getitem__, METH_VARARGS, (char *)"_Nvector2___getitem__(_Nvector2 self, unsigned int const n) -> double"},
	 { (char *)"_Nvector2___setitem__", _wrap__Nvector2___setitem__, METH_VARARGS, (char *)"_Nvector2___setitem__(_Nvector2 self, unsigned int const n, double const val)"},
	 { (char *)"_Nvector2___len__", _wrap__Nvector2___len__, METH_VARARGS, (char *)"_Nvector2___len__(_Nvector2 self) -> unsigned int"},
	 { (char *)"_Nvector2_swigregister", _Nvector2_swigregister, METH_VARARGS, NULL},
	 { (char *)"new__Numvector3", _wrap_new__Numvector3, METH_VARARGS, (char *)"\n"
		"_Numvector3()\n"
		"_Numvector3(_Nvector3 rhs)\n"
		"new__Numvector3(double const [3] rhs) -> _Numvector3\n"
		""},
	 { (char *)"_Numvector3_dot", _wrap__Numvector3_dot, METH_VARARGS, (char *)"_Numvector3_dot(_Numvector3 self, _Numvector3 other) -> double"},
	 { (char *)"_Numvector3_sq", _wrap__Numvector3_sq, METH_VARARGS, (char *)"_Numvector3_sq(_Numvector3 self) -> double"},
	 { (char *)"_Numvector3_mag", _wrap__Numvector3_mag, METH_VARARGS, (char *)"_Numvector3_mag(_Numvector3 self) -> double"},
	 { (char *)"_Numvector3_distance", _wrap__Numvector3_distance, METH_VARARGS, (char *)"_Numvector3_distance(_Numvector3 self, _Numvector3 rhs) -> double"},
	 { (char *)"_Numvector3_perpto", _wrap__Numvector3_perpto, METH_VARARGS, (char *)"_Numvector3_perpto(_Numvector3 self, _Numvector3 other) -> _Numvector3"},
	 { (char *)"_Numvector3_normalize", _wrap__Numvector3_normalize, METH_VARARGS, (char *)"_Numvector3_normalize(_Numvector3 self)"},
	 { (char *)"_Numvector3_norm", _wrap__Numvector3_norm, METH_VARARGS, (char *)"_Numvector3_norm(_Numvector3 self) -> _Numvector3"},
	 { (char *)"delete__Numvector3", _wrap_delete__Numvector3, METH_VARARGS, (char *)"delete__Numvector3(_Numvector3 self)"},
	 { (char *)"_Numvector3_swigregister", _Numvector3_swigregister, METH_VARARGS, NULL},
	 { (char *)"new__Numvector2", _wrap_new__Numvector2, METH_VARARGS, (char *)"\n"
		"_Numvector2()\n"
		"_Numvector2(_Nvector2 rhs)\n"
		"new__Numvector2(double const [2] rhs) -> _Numvector2\n"
		""},
	 { (char *)"_Numvector2_dot", _wrap__Numvector2_dot, METH_VARARGS, (char *)"_Numvector2_dot(_Numvector2 self, _Numvector2 other) -> double"},
	 { (char *)"_Numvector2_sq", _wrap__Numvector2_sq, METH_VARARGS, (char *)"_Numvector2_sq(_Numvector2 self) -> double"},
	 { (char *)"_Numvector2_mag", _wrap__Numvector2_mag, METH_VARARGS, (char *)"_Numvector2_mag(_Numvector2 self) -> double"},
	 { (char *)"_Numvector2_distance", _wrap__Numvector2_distance, METH_VARARGS, (char *)"_Numvector2_distance(_Numvector2 self, _Numvector2 rhs) -> double"},
	 { (char *)"_Numvector2_perpto", _wrap__Numvector2_perpto, METH_VARARGS, (char *)"_Numvector2_perpto(_Numvector2 self, _Numvector2 other) -> _Numvector2"},
	 { (char *)"_Numvector2_normalize", _wrap__Numvector2_normalize, METH_VARARGS, (char *)"_Numvector2_normalize(_Numvector2 self)"},
	 { (char *)"_Numvector2_norm", _wrap__Numvector2_norm, METH_VARARGS, (char *)"_Numvector2_norm(_Numvector2 self) -> _Numvector2"},
	 { (char *)"delete__Numvector2", _wrap_delete__Numvector2, METH_VARARGS, (char *)"delete__Numvector2(_Numvector2 self)"},
	 { (char *)"_Numvector2_swigregister", _Numvector2_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Vec", _wrap_new_Vec, METH_VARARGS, (char *)"\n"
		"Vec()\n"
		"Vec(double const a, double const b)\n"
		"Vec(_Numvector2 rhs)\n"
		"new_Vec(_Nvector2 rhs) -> Vec\n"
		""},
	 { (char *)"Vec_getx", _wrap_Vec_getx, METH_VARARGS, (char *)"Vec_getx(Vec self) -> double const"},
	 { (char *)"Vec_gety", _wrap_Vec_gety, METH_VARARGS, (char *)"Vec_gety(Vec self) -> double const"},
	 { (char *)"Vec_setx", _wrap_Vec_setx, METH_VARARGS, (char *)"Vec_setx(Vec self, double const a)"},
	 { (char *)"Vec_sety", _wrap_Vec_sety, METH_VARARGS, (char *)"Vec_sety(Vec self, double const b)"},
	 { (char *)"Vec_set", _wrap_Vec_set, METH_VARARGS, (char *)"Vec_set(Vec self, double const a, double const b)"},
	 { (char *)"Vec___neg__", _wrap_Vec___neg__, METH_VARARGS, (char *)"Vec___neg__(Vec self) -> Vec"},
	 { (char *)"Vec___add__", _wrap_Vec___add__, METH_VARARGS, (char *)"Vec___add__(Vec self, Vec rhs) -> Vec"},
	 { (char *)"Vec___sub__", _wrap_Vec___sub__, METH_VARARGS, (char *)"Vec___sub__(Vec self, Vec rhs) -> Vec"},
	 { (char *)"Vec_cross", _wrap_Vec_cross, METH_VARARGS, (char *)"Vec_cross(Vec self, Vec rhs) -> double"},
	 { (char *)"Vec_perp", _wrap_Vec_perp, METH_VARARGS, (char *)"Vec_perp(Vec self) -> Vec"},
	 { (char *)"Vec_norm", _wrap_Vec_norm, METH_VARARGS, (char *)"Vec_norm(Vec self) -> Vec"},
	 { (char *)"Vec___isub__", _wrap_Vec___isub__, METH_VARARGS, (char *)"Vec___isub__(Vec self, Vec rhs) -> Vec"},
	 { (char *)"Vec___iadd__", _wrap_Vec___iadd__, METH_VARARGS, (char *)"Vec___iadd__(Vec self, Vec rhs) -> Vec"},
	 { (char *)"Vec_rotate", _wrap_Vec_rotate, METH_VARARGS, (char *)"Vec_rotate(Vec self, uint i) -> Vec"},
	 { (char *)"Vec_flip", _wrap_Vec_flip, METH_VARARGS, (char *)"Vec_flip(Vec self) -> Vec"},
	 { (char *)"Vec_rotate_flip", _wrap_Vec_rotate_flip, METH_VARARGS, (char *)"Vec_rotate_flip(Vec self, uint i) -> Vec"},
	 { (char *)"Vec_rotate_flip_inv", _wrap_Vec_rotate_flip_inv, METH_VARARGS, (char *)"Vec_rotate_flip_inv(Vec self, uint i) -> Vec"},
	 { (char *)"Vec_angle", _wrap_Vec_angle, METH_VARARGS, (char *)"\n"
		"angle(Vec dx1, Vec dx2) -> double\n"
		"Vec_angle(Vec x1, Vec x2, Vec x3) -> double\n"
		""},
	 { (char *)"delete_Vec", _wrap_delete_Vec, METH_VARARGS, (char *)"delete_Vec(Vec self)"},
	 { (char *)"Vec___str__", _wrap_Vec___str__, METH_VARARGS, (char *)"Vec___str__(Vec self) -> char *"},
	 { (char *)"Vec___repr__", _wrap_Vec___repr__, METH_VARARGS, (char *)"Vec___repr__(Vec self) -> char *"},
	 { (char *)"Vec___truediv__", _wrap_Vec___truediv__, METH_VARARGS, (char *)"Vec___truediv__(Vec self, double const n) -> Vec"},
	 { (char *)"Vec___mul__", _wrap_Vec___mul__, METH_VARARGS, (char *)"\n"
		"__mul__(Vec rhs) -> double\n"
		"Vec___mul__(Vec self, double const n) -> Vec\n"
		""},
	 { (char *)"Vec_swigregister", Vec_swigregister, METH_VARARGS, NULL},
	 { (char *)"vecptrvector_iterator", _wrap_vecptrvector_iterator, METH_VARARGS, (char *)"vecptrvector_iterator(vecptrvector self) -> SwigPyIterator"},
	 { (char *)"vecptrvector___nonzero__", _wrap_vecptrvector___nonzero__, METH_VARARGS, (char *)"vecptrvector___nonzero__(vecptrvector self) -> bool"},
	 { (char *)"vecptrvector___bool__", _wrap_vecptrvector___bool__, METH_VARARGS, (char *)"vecptrvector___bool__(vecptrvector self) -> bool"},
	 { (char *)"vecptrvector___len__", _wrap_vecptrvector___len__, METH_VARARGS, (char *)"vecptrvector___len__(vecptrvector self) -> vector< Vector2< double > * >::size_type"},
	 { (char *)"vecptrvector_pop", _wrap_vecptrvector_pop, METH_VARARGS, (char *)"vecptrvector_pop(vecptrvector self) -> Vec"},
	 { (char *)"vecptrvector___getslice__", _wrap_vecptrvector___getslice__, METH_VARARGS, (char *)"vecptrvector___getslice__(vecptrvector self, vector< Vector2< double > * >::difference_type i, vector< Vector2< double > * >::difference_type j) -> std::vector< Vector2< double > *,std::allocator< Vector2< double > * > > *"},
	 { (char *)"vecptrvector___setslice__", _wrap_vecptrvector___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(vector< Vector2< double > * >::difference_type i, vector< Vector2< double > * >::difference_type j, \n"
		"    std::vector< Vector2< double > *,std::allocator< Vector2< double > * > > const & v=std::vector< Vector2< double > *,std::allocator< Vector2< double > * > >())\n"
		"vecptrvector___setslice__(vecptrvector self, vector< Vector2< double > * >::difference_type i, vector< Vector2< double > * >::difference_type j)\n"
		""},
	 { (char *)"vecptrvector___delslice__", _wrap_vecptrvector___delslice__, METH_VARARGS, (char *)"vecptrvector___delslice__(vecptrvector self, vector< Vector2< double > * >::difference_type i, vector< Vector2< double > * >::difference_type j)"},
	 { (char *)"vecptrvector___delitem__", _wrap_vecptrvector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(vector< Vector2< double > * >::difference_type i)\n"
		"vecptrvector___delitem__(vecptrvector self, PySliceObject * slice)\n"
		""},
	 { (char *)"vecptrvector___getitem__", _wrap_vecptrvector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> std::vector< Vector2< double > *,std::allocator< Vector2< double > * > >\n"
		"vecptrvector___getitem__(vecptrvector self, vector< Vector2< double > * >::difference_type i) -> Vec\n"
		""},
	 { (char *)"vecptrvector___setitem__", _wrap_vecptrvector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, std::vector< Vector2< double > *,std::allocator< Vector2< double > * > > const & v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"vecptrvector___setitem__(vecptrvector self, vector< Vector2< double > * >::difference_type i, Vec x)\n"
		""},
	 { (char *)"vecptrvector_append", _wrap_vecptrvector_append, METH_VARARGS, (char *)"vecptrvector_append(vecptrvector self, Vec x)"},
	 { (char *)"vecptrvector_empty", _wrap_vecptrvector_empty, METH_VARARGS, (char *)"vecptrvector_empty(vecptrvector self) -> bool"},
	 { (char *)"vecptrvector_size", _wrap_vecptrvector_size, METH_VARARGS, (char *)"vecptrvector_size(vecptrvector self) -> vector< Vector2< double > * >::size_type"},
	 { (char *)"vecptrvector_clear", _wrap_vecptrvector_clear, METH_VARARGS, (char *)"vecptrvector_clear(vecptrvector self)"},
	 { (char *)"vecptrvector_swap", _wrap_vecptrvector_swap, METH_VARARGS, (char *)"vecptrvector_swap(vecptrvector self, vecptrvector v)"},
	 { (char *)"vecptrvector_get_allocator", _wrap_vecptrvector_get_allocator, METH_VARARGS, (char *)"vecptrvector_get_allocator(vecptrvector self) -> vector< Vector2< double > * >::allocator_type"},
	 { (char *)"vecptrvector_begin", _wrap_vecptrvector_begin, METH_VARARGS, (char *)"vecptrvector_begin(vecptrvector self) -> vector< Vector2< double > * >::iterator"},
	 { (char *)"vecptrvector_end", _wrap_vecptrvector_end, METH_VARARGS, (char *)"vecptrvector_end(vecptrvector self) -> vector< Vector2< double > * >::iterator"},
	 { (char *)"vecptrvector_rbegin", _wrap_vecptrvector_rbegin, METH_VARARGS, (char *)"vecptrvector_rbegin(vecptrvector self) -> vector< Vector2< double > * >::reverse_iterator"},
	 { (char *)"vecptrvector_rend", _wrap_vecptrvector_rend, METH_VARARGS, (char *)"vecptrvector_rend(vecptrvector self) -> vector< Vector2< double > * >::reverse_iterator"},
	 { (char *)"vecptrvector_pop_back", _wrap_vecptrvector_pop_back, METH_VARARGS, (char *)"vecptrvector_pop_back(vecptrvector self)"},
	 { (char *)"vecptrvector_erase", _wrap_vecptrvector_erase, METH_VARARGS, (char *)"\n"
		"erase(vector< Vector2< double > * >::iterator pos) -> vector< Vector2< double > * >::iterator\n"
		"vecptrvector_erase(vecptrvector self, vector< Vector2< double > * >::iterator first, vector< Vector2< double > * >::iterator last) -> vector< Vector2< double > * >::iterator\n"
		""},
	 { (char *)"new_vecptrvector", _wrap_new_vecptrvector, METH_VARARGS, (char *)"\n"
		"vecptrvector()\n"
		"vecptrvector(vecptrvector arg2)\n"
		"vecptrvector(vector< Vector2< double > * >::size_type size)\n"
		"new_vecptrvector(vector< Vector2< double > * >::size_type size, Vec value) -> vecptrvector\n"
		""},
	 { (char *)"vecptrvector_push_back", _wrap_vecptrvector_push_back, METH_VARARGS, (char *)"vecptrvector_push_back(vecptrvector self, Vec x)"},
	 { (char *)"vecptrvector_front", _wrap_vecptrvector_front, METH_VARARGS, (char *)"vecptrvector_front(vecptrvector self) -> Vec"},
	 { (char *)"vecptrvector_back", _wrap_vecptrvector_back, METH_VARARGS, (char *)"vecptrvector_back(vecptrvector self) -> Vec"},
	 { (char *)"vecptrvector_assign", _wrap_vecptrvector_assign, METH_VARARGS, (char *)"vecptrvector_assign(vecptrvector self, vector< Vector2< double > * >::size_type n, Vec x)"},
	 { (char *)"vecptrvector_resize", _wrap_vecptrvector_resize, METH_VARARGS, (char *)"\n"
		"resize(vector< Vector2< double > * >::size_type new_size)\n"
		"vecptrvector_resize(vecptrvector self, vector< Vector2< double > * >::size_type new_size, Vec x)\n"
		""},
	 { (char *)"vecptrvector_insert", _wrap_vecptrvector_insert, METH_VARARGS, (char *)"\n"
		"insert(vector< Vector2< double > * >::iterator pos, Vec x) -> vector< Vector2< double > * >::iterator\n"
		"vecptrvector_insert(vecptrvector self, vector< Vector2< double > * >::iterator pos, vector< Vector2< double > * >::size_type n, \n"
		"    Vec x)\n"
		""},
	 { (char *)"vecptrvector_reserve", _wrap_vecptrvector_reserve, METH_VARARGS, (char *)"vecptrvector_reserve(vecptrvector self, vector< Vector2< double > * >::size_type n)"},
	 { (char *)"vecptrvector_capacity", _wrap_vecptrvector_capacity, METH_VARARGS, (char *)"vecptrvector_capacity(vecptrvector self) -> vector< Vector2< double > * >::size_type"},
	 { (char *)"delete_vecptrvector", _wrap_delete_vecptrvector, METH_VARARGS, (char *)"delete_vecptrvector(vecptrvector self)"},
	 { (char *)"vecptrvector_swigregister", vecptrvector_swigregister, METH_VARARGS, NULL},
	 { (char *)"vecvector_iterator", _wrap_vecvector_iterator, METH_VARARGS, (char *)"vecvector_iterator(vecvector self) -> SwigPyIterator"},
	 { (char *)"vecvector___nonzero__", _wrap_vecvector___nonzero__, METH_VARARGS, (char *)"vecvector___nonzero__(vecvector self) -> bool"},
	 { (char *)"vecvector___bool__", _wrap_vecvector___bool__, METH_VARARGS, (char *)"vecvector___bool__(vecvector self) -> bool"},
	 { (char *)"vecvector___len__", _wrap_vecvector___len__, METH_VARARGS, (char *)"vecvector___len__(vecvector self) -> vector< Vector2< double > >::size_type"},
	 { (char *)"vecvector_pop", _wrap_vecvector_pop, METH_VARARGS, (char *)"vecvector_pop(vecvector self) -> Vec"},
	 { (char *)"vecvector___getslice__", _wrap_vecvector___getslice__, METH_VARARGS, (char *)"vecvector___getslice__(vecvector self, vector< Vector2< double > >::difference_type i, vector< Vector2< double > >::difference_type j) -> std::vector< Vector2< double >,std::allocator< Vector2< double > > > *"},
	 { (char *)"vecvector___setslice__", _wrap_vecvector___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(vector< Vector2< double > >::difference_type i, vector< Vector2< double > >::difference_type j, \n"
		"    std::vector< Vector2< double >,std::allocator< Vector2< double > > > const & v=std::vector< Vector2< double >,std::allocator< Vector2< double > > >())\n"
		"vecvector___setslice__(vecvector self, vector< Vector2< double > >::difference_type i, vector< Vector2< double > >::difference_type j)\n"
		""},
	 { (char *)"vecvector___delslice__", _wrap_vecvector___delslice__, METH_VARARGS, (char *)"vecvector___delslice__(vecvector self, vector< Vector2< double > >::difference_type i, vector< Vector2< double > >::difference_type j)"},
	 { (char *)"vecvector___delitem__", _wrap_vecvector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(vector< Vector2< double > >::difference_type i)\n"
		"vecvector___delitem__(vecvector self, PySliceObject * slice)\n"
		""},
	 { (char *)"vecvector___getitem__", _wrap_vecvector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> std::vector< Vector2< double >,std::allocator< Vector2< double > > >\n"
		"vecvector___getitem__(vecvector self, vector< Vector2< double > >::difference_type i) -> Vec\n"
		""},
	 { (char *)"vecvector___setitem__", _wrap_vecvector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, std::vector< Vector2< double >,std::allocator< Vector2< double > > > const & v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"vecvector___setitem__(vecvector self, vector< Vector2< double > >::difference_type i, Vec x)\n"
		""},
	 { (char *)"vecvector_append", _wrap_vecvector_append, METH_VARARGS, (char *)"vecvector_append(vecvector self, Vec x)"},
	 { (char *)"vecvector_empty", _wrap_vecvector_empty, METH_VARARGS, (char *)"vecvector_empty(vecvector self) -> bool"},
	 { (char *)"vecvector_size", _wrap_vecvector_size, METH_VARARGS, (char *)"vecvector_size(vecvector self) -> vector< Vector2< double > >::size_type"},
	 { (char *)"vecvector_clear", _wrap_vecvector_clear, METH_VARARGS, (char *)"vecvector_clear(vecvector self)"},
	 { (char *)"vecvector_swap", _wrap_vecvector_swap, METH_VARARGS, (char *)"vecvector_swap(vecvector self, vecvector v)"},
	 { (char *)"vecvector_get_allocator", _wrap_vecvector_get_allocator, METH_VARARGS, (char *)"vecvector_get_allocator(vecvector self) -> vector< Vector2< double > >::allocator_type"},
	 { (char *)"vecvector_begin", _wrap_vecvector_begin, METH_VARARGS, (char *)"vecvector_begin(vecvector self) -> vector< Vector2< double > >::iterator"},
	 { (char *)"vecvector_end", _wrap_vecvector_end, METH_VARARGS, (char *)"vecvector_end(vecvector self) -> vector< Vector2< double > >::iterator"},
	 { (char *)"vecvector_rbegin", _wrap_vecvector_rbegin, METH_VARARGS, (char *)"vecvector_rbegin(vecvector self) -> vector< Vector2< double > >::reverse_iterator"},
	 { (char *)"vecvector_rend", _wrap_vecvector_rend, METH_VARARGS, (char *)"vecvector_rend(vecvector self) -> vector< Vector2< double > >::reverse_iterator"},
	 { (char *)"vecvector_pop_back", _wrap_vecvector_pop_back, METH_VARARGS, (char *)"vecvector_pop_back(vecvector self)"},
	 { (char *)"vecvector_erase", _wrap_vecvector_erase, METH_VARARGS, (char *)"\n"
		"erase(vector< Vector2< double > >::iterator pos) -> vector< Vector2< double > >::iterator\n"
		"vecvector_erase(vecvector self, vector< Vector2< double > >::iterator first, vector< Vector2< double > >::iterator last) -> vector< Vector2< double > >::iterator\n"
		""},
	 { (char *)"new_vecvector", _wrap_new_vecvector, METH_VARARGS, (char *)"\n"
		"vecvector()\n"
		"vecvector(vecvector arg2)\n"
		"vecvector(vector< Vector2< double > >::size_type size)\n"
		"new_vecvector(vector< Vector2< double > >::size_type size, Vec value) -> vecvector\n"
		""},
	 { (char *)"vecvector_push_back", _wrap_vecvector_push_back, METH_VARARGS, (char *)"vecvector_push_back(vecvector self, Vec x)"},
	 { (char *)"vecvector_front", _wrap_vecvector_front, METH_VARARGS, (char *)"vecvector_front(vecvector self) -> Vec"},
	 { (char *)"vecvector_back", _wrap_vecvector_back, METH_VARARGS, (char *)"vecvector_back(vecvector self) -> Vec"},
	 { (char *)"vecvector_assign", _wrap_vecvector_assign, METH_VARARGS, (char *)"vecvector_assign(vecvector self, vector< Vector2< double > >::size_type n, Vec x)"},
	 { (char *)"vecvector_resize", _wrap_vecvector_resize, METH_VARARGS, (char *)"\n"
		"resize(vector< Vector2< double > >::size_type new_size)\n"
		"vecvector_resize(vecvector self, vector< Vector2< double > >::size_type new_size, Vec x)\n"
		""},
	 { (char *)"vecvector_insert", _wrap_vecvector_insert, METH_VARARGS, (char *)"\n"
		"insert(vector< Vector2< double > >::iterator pos, Vec x) -> vector< Vector2< double > >::iterator\n"
		"vecvector_insert(vecvector self, vector< Vector2< double > >::iterator pos, vector< Vector2< double > >::size_type n, \n"
		"    Vec x)\n"
		""},
	 { (char *)"vecvector_reserve", _wrap_vecvector_reserve, METH_VARARGS, (char *)"vecvector_reserve(vecvector self, vector< Vector2< double > >::size_type n)"},
	 { (char *)"vecvector_capacity", _wrap_vecvector_capacity, METH_VARARGS, (char *)"vecvector_capacity(vecvector self) -> vector< Vector2< double > >::size_type"},
	 { (char *)"delete_vecvector", _wrap_delete_vecvector, METH_VARARGS, (char *)"delete_vecvector(vecvector self)"},
	 { (char *)"vecvector_swigregister", vecvector_swigregister, METH_VARARGS, NULL},
	 { (char *)"_jamminglist_iterator", _wrap__jamminglist_iterator, METH_VARARGS, (char *)"_jamminglist_iterator(_jamminglist self) -> SwigPyIterator"},
	 { (char *)"_jamminglist___nonzero__", _wrap__jamminglist___nonzero__, METH_VARARGS, (char *)"_jamminglist___nonzero__(_jamminglist self) -> bool"},
	 { (char *)"_jamminglist___bool__", _wrap__jamminglist___bool__, METH_VARARGS, (char *)"_jamminglist___bool__(_jamminglist self) -> bool"},
	 { (char *)"_jamminglist___len__", _wrap__jamminglist___len__, METH_VARARGS, (char *)"_jamminglist___len__(_jamminglist self) -> list< jamminglist >::size_type"},
	 { (char *)"_jamminglist_pop", _wrap__jamminglist_pop, METH_VARARGS, (char *)"_jamminglist_pop(_jamminglist self) -> jamminglist"},
	 { (char *)"_jamminglist___getslice__", _wrap__jamminglist___getslice__, METH_VARARGS, (char *)"_jamminglist___getslice__(_jamminglist self, list< jamminglist >::difference_type i, list< jamminglist >::difference_type j) -> std::list< jamminglist,std::allocator< jamminglist > > *"},
	 { (char *)"_jamminglist___setslice__", _wrap__jamminglist___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(list< jamminglist >::difference_type i, list< jamminglist >::difference_type j, std::list< jamminglist,std::allocator< jamminglist > > const & v=std::list< jamminglist,std::allocator< jamminglist > >())\n"
		"_jamminglist___setslice__(_jamminglist self, list< jamminglist >::difference_type i, list< jamminglist >::difference_type j)\n"
		""},
	 { (char *)"_jamminglist___delslice__", _wrap__jamminglist___delslice__, METH_VARARGS, (char *)"_jamminglist___delslice__(_jamminglist self, list< jamminglist >::difference_type i, list< jamminglist >::difference_type j)"},
	 { (char *)"_jamminglist___delitem__", _wrap__jamminglist___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(list< jamminglist >::difference_type i)\n"
		"_jamminglist___delitem__(_jamminglist self, PySliceObject * slice)\n"
		""},
	 { (char *)"_jamminglist___getitem__", _wrap__jamminglist___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> std::list< jamminglist,std::allocator< jamminglist > >\n"
		"_jamminglist___getitem__(_jamminglist self, list< jamminglist >::difference_type i) -> jamminglist\n"
		""},
	 { (char *)"_jamminglist___setitem__", _wrap__jamminglist___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, std::list< jamminglist,std::allocator< jamminglist > > const & v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"_jamminglist___setitem__(_jamminglist self, list< jamminglist >::difference_type i, jamminglist x)\n"
		""},
	 { (char *)"_jamminglist_append", _wrap__jamminglist_append, METH_VARARGS, (char *)"_jamminglist_append(_jamminglist self, jamminglist x)"},
	 { (char *)"_jamminglist_empty", _wrap__jamminglist_empty, METH_VARARGS, (char *)"_jamminglist_empty(_jamminglist self) -> bool"},
	 { (char *)"_jamminglist_size", _wrap__jamminglist_size, METH_VARARGS, (char *)"_jamminglist_size(_jamminglist self) -> list< jamminglist >::size_type"},
	 { (char *)"_jamminglist_clear", _wrap__jamminglist_clear, METH_VARARGS, (char *)"_jamminglist_clear(_jamminglist self)"},
	 { (char *)"_jamminglist_swap", _wrap__jamminglist_swap, METH_VARARGS, (char *)"_jamminglist_swap(_jamminglist self, _jamminglist v)"},
	 { (char *)"_jamminglist_get_allocator", _wrap__jamminglist_get_allocator, METH_VARARGS, (char *)"_jamminglist_get_allocator(_jamminglist self) -> list< jamminglist >::allocator_type"},
	 { (char *)"_jamminglist_begin", _wrap__jamminglist_begin, METH_VARARGS, (char *)"_jamminglist_begin(_jamminglist self) -> list< jamminglist >::iterator"},
	 { (char *)"_jamminglist_end", _wrap__jamminglist_end, METH_VARARGS, (char *)"_jamminglist_end(_jamminglist self) -> list< jamminglist >::iterator"},
	 { (char *)"_jamminglist_rbegin", _wrap__jamminglist_rbegin, METH_VARARGS, (char *)"_jamminglist_rbegin(_jamminglist self) -> list< jamminglist >::reverse_iterator"},
	 { (char *)"_jamminglist_rend", _wrap__jamminglist_rend, METH_VARARGS, (char *)"_jamminglist_rend(_jamminglist self) -> list< jamminglist >::reverse_iterator"},
	 { (char *)"_jamminglist_pop_back", _wrap__jamminglist_pop_back, METH_VARARGS, (char *)"_jamminglist_pop_back(_jamminglist self)"},
	 { (char *)"_jamminglist_erase", _wrap__jamminglist_erase, METH_VARARGS, (char *)"\n"
		"erase(list< jamminglist >::iterator pos) -> list< jamminglist >::iterator\n"
		"_jamminglist_erase(_jamminglist self, list< jamminglist >::iterator first, list< jamminglist >::iterator last) -> list< jamminglist >::iterator\n"
		""},
	 { (char *)"new__jamminglist", _wrap_new__jamminglist, METH_VARARGS, (char *)"\n"
		"_jamminglist()\n"
		"_jamminglist(_jamminglist arg2)\n"
		"_jamminglist(list< jamminglist >::size_type size)\n"
		"new__jamminglist(list< jamminglist >::size_type size, jamminglist value) -> _jamminglist\n"
		""},
	 { (char *)"_jamminglist_push_back", _wrap__jamminglist_push_back, METH_VARARGS, (char *)"_jamminglist_push_back(_jamminglist self, jamminglist x)"},
	 { (char *)"_jamminglist_front", _wrap__jamminglist_front, METH_VARARGS, (char *)"_jamminglist_front(_jamminglist self) -> jamminglist"},
	 { (char *)"_jamminglist_back", _wrap__jamminglist_back, METH_VARARGS, (char *)"_jamminglist_back(_jamminglist self) -> jamminglist"},
	 { (char *)"_jamminglist_assign", _wrap__jamminglist_assign, METH_VARARGS, (char *)"_jamminglist_assign(_jamminglist self, list< jamminglist >::size_type n, jamminglist x)"},
	 { (char *)"_jamminglist_resize", _wrap__jamminglist_resize, METH_VARARGS, (char *)"\n"
		"resize(list< jamminglist >::size_type new_size)\n"
		"_jamminglist_resize(_jamminglist self, list< jamminglist >::size_type new_size, jamminglist x)\n"
		""},
	 { (char *)"_jamminglist_insert", _wrap__jamminglist_insert, METH_VARARGS, (char *)"\n"
		"insert(list< jamminglist >::iterator pos, jamminglist x) -> list< jamminglist >::iterator\n"
		"_jamminglist_insert(_jamminglist self, list< jamminglist >::iterator pos, list< jamminglist >::size_type n, \n"
		"    jamminglist x)\n"
		""},
	 { (char *)"_jamminglist_pop_front", _wrap__jamminglist_pop_front, METH_VARARGS, (char *)"_jamminglist_pop_front(_jamminglist self)"},
	 { (char *)"_jamminglist_push_front", _wrap__jamminglist_push_front, METH_VARARGS, (char *)"_jamminglist_push_front(_jamminglist self, jamminglist x)"},
	 { (char *)"_jamminglist_reverse", _wrap__jamminglist_reverse, METH_VARARGS, (char *)"_jamminglist_reverse(_jamminglist self)"},
	 { (char *)"delete__jamminglist", _wrap_delete__jamminglist, METH_VARARGS, (char *)"delete__jamminglist(_jamminglist self)"},
	 { (char *)"_jamminglist_swigregister", _jamminglist_swigregister, METH_VARARGS, NULL},
	 { (char *)"_jamminglistrot_iterator", _wrap__jamminglistrot_iterator, METH_VARARGS, (char *)"_jamminglistrot_iterator(_jamminglistrot self) -> SwigPyIterator"},
	 { (char *)"_jamminglistrot___nonzero__", _wrap__jamminglistrot___nonzero__, METH_VARARGS, (char *)"_jamminglistrot___nonzero__(_jamminglistrot self) -> bool"},
	 { (char *)"_jamminglistrot___bool__", _wrap__jamminglistrot___bool__, METH_VARARGS, (char *)"_jamminglistrot___bool__(_jamminglistrot self) -> bool"},
	 { (char *)"_jamminglistrot___len__", _wrap__jamminglistrot___len__, METH_VARARGS, (char *)"_jamminglistrot___len__(_jamminglistrot self) -> list< jamminglistrot >::size_type"},
	 { (char *)"_jamminglistrot_pop", _wrap__jamminglistrot_pop, METH_VARARGS, (char *)"_jamminglistrot_pop(_jamminglistrot self) -> jamminglistrot"},
	 { (char *)"_jamminglistrot___getslice__", _wrap__jamminglistrot___getslice__, METH_VARARGS, (char *)"_jamminglistrot___getslice__(_jamminglistrot self, list< jamminglistrot >::difference_type i, list< jamminglistrot >::difference_type j) -> std::list< jamminglistrot,std::allocator< jamminglistrot > > *"},
	 { (char *)"_jamminglistrot___setslice__", _wrap__jamminglistrot___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(list< jamminglistrot >::difference_type i, list< jamminglistrot >::difference_type j, \n"
		"    std::list< jamminglistrot,std::allocator< jamminglistrot > > const & v=std::list< jamminglistrot,std::allocator< jamminglistrot > >())\n"
		"_jamminglistrot___setslice__(_jamminglistrot self, list< jamminglistrot >::difference_type i, list< jamminglistrot >::difference_type j)\n"
		""},
	 { (char *)"_jamminglistrot___delslice__", _wrap__jamminglistrot___delslice__, METH_VARARGS, (char *)"_jamminglistrot___delslice__(_jamminglistrot self, list< jamminglistrot >::difference_type i, list< jamminglistrot >::difference_type j)"},
	 { (char *)"_jamminglistrot___delitem__", _wrap__jamminglistrot___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(list< jamminglistrot >::difference_type i)\n"
		"_jamminglistrot___delitem__(_jamminglistrot self, PySliceObject * slice)\n"
		""},
	 { (char *)"_jamminglistrot___getitem__", _wrap__jamminglistrot___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> std::list< jamminglistrot,std::allocator< jamminglistrot > >\n"
		"_jamminglistrot___getitem__(_jamminglistrot self, list< jamminglistrot >::difference_type i) -> jamminglistrot\n"
		""},
	 { (char *)"_jamminglistrot___setitem__", _wrap__jamminglistrot___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, std::list< jamminglistrot,std::allocator< jamminglistrot > > const & v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"_jamminglistrot___setitem__(_jamminglistrot self, list< jamminglistrot >::difference_type i, jamminglistrot x)\n"
		""},
	 { (char *)"_jamminglistrot_append", _wrap__jamminglistrot_append, METH_VARARGS, (char *)"_jamminglistrot_append(_jamminglistrot self, jamminglistrot x)"},
	 { (char *)"_jamminglistrot_empty", _wrap__jamminglistrot_empty, METH_VARARGS, (char *)"_jamminglistrot_empty(_jamminglistrot self) -> bool"},
	 { (char *)"_jamminglistrot_size", _wrap__jamminglistrot_size, METH_VARARGS, (char *)"_jamminglistrot_size(_jamminglistrot self) -> list< jamminglistrot >::size_type"},
	 { (char *)"_jamminglistrot_clear", _wrap__jamminglistrot_clear, METH_VARARGS, (char *)"_jamminglistrot_clear(_jamminglistrot self)"},
	 { (char *)"_jamminglistrot_swap", _wrap__jamminglistrot_swap, METH_VARARGS, (char *)"_jamminglistrot_swap(_jamminglistrot self, _jamminglistrot v)"},
	 { (char *)"_jamminglistrot_get_allocator", _wrap__jamminglistrot_get_allocator, METH_VARARGS, (char *)"_jamminglistrot_get_allocator(_jamminglistrot self) -> list< jamminglistrot >::allocator_type"},
	 { (char *)"_jamminglistrot_begin", _wrap__jamminglistrot_begin, METH_VARARGS, (char *)"_jamminglistrot_begin(_jamminglistrot self) -> list< jamminglistrot >::iterator"},
	 { (char *)"_jamminglistrot_end", _wrap__jamminglistrot_end, METH_VARARGS, (char *)"_jamminglistrot_end(_jamminglistrot self) -> list< jamminglistrot >::iterator"},
	 { (char *)"_jamminglistrot_rbegin", _wrap__jamminglistrot_rbegin, METH_VARARGS, (char *)"_jamminglistrot_rbegin(_jamminglistrot self) -> list< jamminglistrot >::reverse_iterator"},
	 { (char *)"_jamminglistrot_rend", _wrap__jamminglistrot_rend, METH_VARARGS, (char *)"_jamminglistrot_rend(_jamminglistrot self) -> list< jamminglistrot >::reverse_iterator"},
	 { (char *)"_jamminglistrot_pop_back", _wrap__jamminglistrot_pop_back, METH_VARARGS, (char *)"_jamminglistrot_pop_back(_jamminglistrot self)"},
	 { (char *)"_jamminglistrot_erase", _wrap__jamminglistrot_erase, METH_VARARGS, (char *)"\n"
		"erase(list< jamminglistrot >::iterator pos) -> list< jamminglistrot >::iterator\n"
		"_jamminglistrot_erase(_jamminglistrot self, list< jamminglistrot >::iterator first, list< jamminglistrot >::iterator last) -> list< jamminglistrot >::iterator\n"
		""},
	 { (char *)"new__jamminglistrot", _wrap_new__jamminglistrot, METH_VARARGS, (char *)"\n"
		"_jamminglistrot()\n"
		"_jamminglistrot(_jamminglistrot arg2)\n"
		"_jamminglistrot(list< jamminglistrot >::size_type size)\n"
		"new__jamminglistrot(list< jamminglistrot >::size_type size, jamminglistrot value) -> _jamminglistrot\n"
		""},
	 { (char *)"_jamminglistrot_push_back", _wrap__jamminglistrot_push_back, METH_VARARGS, (char *)"_jamminglistrot_push_back(_jamminglistrot self, jamminglistrot x)"},
	 { (char *)"_jamminglistrot_front", _wrap__jamminglistrot_front, METH_VARARGS, (char *)"_jamminglistrot_front(_jamminglistrot self) -> jamminglistrot"},
	 { (char *)"_jamminglistrot_back", _wrap__jamminglistrot_back, METH_VARARGS, (char *)"_jamminglistrot_back(_jamminglistrot self) -> jamminglistrot"},
	 { (char *)"_jamminglistrot_assign", _wrap__jamminglistrot_assign, METH_VARARGS, (char *)"_jamminglistrot_assign(_jamminglistrot self, list< jamminglistrot >::size_type n, jamminglistrot x)"},
	 { (char *)"_jamminglistrot_resize", _wrap__jamminglistrot_resize, METH_VARARGS, (char *)"\n"
		"resize(list< jamminglistrot >::size_type new_size)\n"
		"_jamminglistrot_resize(_jamminglistrot self, list< jamminglistrot >::size_type new_size, jamminglistrot x)\n"
		""},
	 { (char *)"_jamminglistrot_insert", _wrap__jamminglistrot_insert, METH_VARARGS, (char *)"\n"
		"insert(list< jamminglistrot >::iterator pos, jamminglistrot x) -> list< jamminglistrot >::iterator\n"
		"_jamminglistrot_insert(_jamminglistrot self, list< jamminglistrot >::iterator pos, list< jamminglistrot >::size_type n, \n"
		"    jamminglistrot x)\n"
		""},
	 { (char *)"_jamminglistrot_pop_front", _wrap__jamminglistrot_pop_front, METH_VARARGS, (char *)"_jamminglistrot_pop_front(_jamminglistrot self)"},
	 { (char *)"_jamminglistrot_push_front", _wrap__jamminglistrot_push_front, METH_VARARGS, (char *)"_jamminglistrot_push_front(_jamminglistrot self, jamminglistrot x)"},
	 { (char *)"_jamminglistrot_reverse", _wrap__jamminglistrot_reverse, METH_VARARGS, (char *)"_jamminglistrot_reverse(_jamminglistrot self)"},
	 { (char *)"delete__jamminglistrot", _wrap_delete__jamminglistrot, METH_VARARGS, (char *)"delete__jamminglistrot(_jamminglistrot self)"},
	 { (char *)"_jamminglistrot_swigregister", _jamminglistrot_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Pair", _wrap_new_Pair, METH_VARARGS, (char *)"\n"
		"Pair()\n"
		"Pair(_Nvector2 rhs)\n"
		"new_Pair(double const [2] rhs) -> _Numvector2\n"
		""},
	 { (char *)"Pair_dot", _wrap_Pair_dot, METH_VARARGS, (char *)"Pair_dot(_Numvector2 self, _Numvector2 other) -> double"},
	 { (char *)"Pair_sq", _wrap_Pair_sq, METH_VARARGS, (char *)"Pair_sq(_Numvector2 self) -> double"},
	 { (char *)"Pair_mag", _wrap_Pair_mag, METH_VARARGS, (char *)"Pair_mag(_Numvector2 self) -> double"},
	 { (char *)"Pair_distance", _wrap_Pair_distance, METH_VARARGS, (char *)"Pair_distance(_Numvector2 self, _Numvector2 rhs) -> double"},
	 { (char *)"Pair_perpto", _wrap_Pair_perpto, METH_VARARGS, (char *)"Pair_perpto(_Numvector2 self, _Numvector2 other) -> _Numvector2"},
	 { (char *)"Pair_normalize", _wrap_Pair_normalize, METH_VARARGS, (char *)"Pair_normalize(_Numvector2 self)"},
	 { (char *)"Pair_norm", _wrap_Pair_norm, METH_VARARGS, (char *)"Pair_norm(_Numvector2 self) -> _Numvector2"},
	 { (char *)"delete_Pair", _wrap_delete_Pair, METH_VARARGS, (char *)"delete_Pair(_Numvector2 self)"},
	 { (char *)"Pair_swigregister", Pair_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_VecPair", _wrap_new_VecPair, METH_VARARGS, (char *)"\n"
		"VecPair()\n"
		"VecPair(VecPair rhs)\n"
		"new_VecPair(Vec locs) -> VecPair\n"
		""},
	 { (char *)"VecPair_get", _wrap_VecPair_get, METH_VARARGS, (char *)"VecPair_get(VecPair self, unsigned int const n) -> Vec"},
	 { (char *)"VecPair_set", _wrap_VecPair_set, METH_VARARGS, (char *)"VecPair_set(VecPair self, unsigned int const n, Vec a)"},
	 { (char *)"VecPair_len", _wrap_VecPair_len, METH_VARARGS, (char *)"VecPair_len(VecPair self) -> unsigned int"},
	 { (char *)"VecPair___iadd__", _wrap_VecPair___iadd__, METH_VARARGS, (char *)"VecPair___iadd__(VecPair self, VecPair rhs) -> VecPair"},
	 { (char *)"VecPair___isub__", _wrap_VecPair___isub__, METH_VARARGS, (char *)"VecPair___isub__(VecPair self, VecPair rhs) -> VecPair"},
	 { (char *)"VecPair___neg__", _wrap_VecPair___neg__, METH_VARARGS, (char *)"VecPair___neg__(VecPair self) -> VecPair"},
	 { (char *)"VecPair___add__", _wrap_VecPair___add__, METH_VARARGS, (char *)"VecPair___add__(VecPair self, VecPair rhs) -> VecPair"},
	 { (char *)"VecPair___sub__", _wrap_VecPair___sub__, METH_VARARGS, (char *)"VecPair___sub__(VecPair self, VecPair rhs) -> VecPair"},
	 { (char *)"VecPair_begin", _wrap_VecPair_begin, METH_VARARGS, (char *)"VecPair_begin(VecPair self) -> Vec"},
	 { (char *)"VecPair_end", _wrap_VecPair_end, METH_VARARGS, (char *)"VecPair_end(VecPair self) -> Vec"},
	 { (char *)"delete_VecPair", _wrap_delete_VecPair, METH_VARARGS, (char *)"delete_VecPair(VecPair self)"},
	 { (char *)"VecPair___mul__", _wrap_VecPair___mul__, METH_VARARGS, (char *)"VecPair___mul__(VecPair self, double const rhs) -> VecPair"},
	 { (char *)"VecPair___div__", _wrap_VecPair___div__, METH_VARARGS, (char *)"VecPair___div__(VecPair self, double const rhs) -> VecPair"},
	 { (char *)"VecPair___truediv__", _wrap_VecPair___truediv__, METH_VARARGS, (char *)"VecPair___truediv__(VecPair self, double const n) -> VecPair"},
	 { (char *)"VecPair___getitem__", _wrap_VecPair___getitem__, METH_VARARGS, (char *)"VecPair___getitem__(VecPair self, unsigned int const n) -> Vec"},
	 { (char *)"VecPair___setitem__", _wrap_VecPair___setitem__, METH_VARARGS, (char *)"VecPair___setitem__(VecPair self, unsigned int const n, Vec val)"},
	 { (char *)"VecPair___len__", _wrap_VecPair___len__, METH_VARARGS, (char *)"VecPair___len__(VecPair self) -> unsigned int"},
	 { (char *)"VecPair_swigregister", VecPair_swigregister, METH_VARARGS, NULL},
	 { (char *)"new__atomarray2", _wrap_new__atomarray2, METH_VARARGS, (char *)"\n"
		"_atomarray2()\n"
		"_atomarray2(_atomarray2 rhs)\n"
		"new__atomarray2(atom *const [2] locs) -> _atomarray2\n"
		""},
	 { (char *)"_atomarray2_get", _wrap__atomarray2_get, METH_VARARGS, (char *)"_atomarray2_get(_atomarray2 self, unsigned int const n) -> atom"},
	 { (char *)"_atomarray2_set", _wrap__atomarray2_set, METH_VARARGS, (char *)"_atomarray2_set(_atomarray2 self, unsigned int const n, atom a)"},
	 { (char *)"_atomarray2_len", _wrap__atomarray2_len, METH_VARARGS, (char *)"_atomarray2_len(_atomarray2 self) -> unsigned int"},
	 { (char *)"_atomarray2_begin", _wrap__atomarray2_begin, METH_VARARGS, (char *)"_atomarray2_begin(_atomarray2 self) -> atom **"},
	 { (char *)"_atomarray2_end", _wrap__atomarray2_end, METH_VARARGS, (char *)"_atomarray2_end(_atomarray2 self) -> atom **"},
	 { (char *)"delete__atomarray2", _wrap_delete__atomarray2, METH_VARARGS, (char *)"delete__atomarray2(_atomarray2 self)"},
	 { (char *)"_atomarray2_swigregister", _atomarray2_swigregister, METH_VARARGS, NULL},
	 { (char *)"new__idarray2", _wrap_new__idarray2, METH_VARARGS, (char *)"\n"
		"_idarray2()\n"
		"_idarray2(_idarray2 rhs)\n"
		"new__idarray2(atomid locs) -> _idarray2\n"
		""},
	 { (char *)"_idarray2_get", _wrap__idarray2_get, METH_VARARGS, (char *)"_idarray2_get(_idarray2 self, unsigned int const n) -> atomid"},
	 { (char *)"_idarray2_set", _wrap__idarray2_set, METH_VARARGS, (char *)"_idarray2_set(_idarray2 self, unsigned int const n, atomid a)"},
	 { (char *)"_idarray2_len", _wrap__idarray2_len, METH_VARARGS, (char *)"_idarray2_len(_idarray2 self) -> unsigned int"},
	 { (char *)"_idarray2_begin", _wrap__idarray2_begin, METH_VARARGS, (char *)"_idarray2_begin(_idarray2 self) -> atomid"},
	 { (char *)"_idarray2_end", _wrap__idarray2_end, METH_VARARGS, (char *)"_idarray2_end(_idarray2 self) -> atomid"},
	 { (char *)"delete__idarray2", _wrap_delete__idarray2, METH_VARARGS, (char *)"delete__idarray2(_idarray2 self)"},
	 { (char *)"_idarray2_swigregister", _idarray2_swigregister, METH_VARARGS, NULL},
	 { (char *)"new__atomarray3", _wrap_new__atomarray3, METH_VARARGS, (char *)"\n"
		"_atomarray3()\n"
		"_atomarray3(_atomarray3 rhs)\n"
		"new__atomarray3(atom *const [3] locs) -> _atomarray3\n"
		""},
	 { (char *)"_atomarray3_get", _wrap__atomarray3_get, METH_VARARGS, (char *)"_atomarray3_get(_atomarray3 self, unsigned int const n) -> atom"},
	 { (char *)"_atomarray3_set", _wrap__atomarray3_set, METH_VARARGS, (char *)"_atomarray3_set(_atomarray3 self, unsigned int const n, atom a)"},
	 { (char *)"_atomarray3_len", _wrap__atomarray3_len, METH_VARARGS, (char *)"_atomarray3_len(_atomarray3 self) -> unsigned int"},
	 { (char *)"_atomarray3_begin", _wrap__atomarray3_begin, METH_VARARGS, (char *)"_atomarray3_begin(_atomarray3 self) -> atom **"},
	 { (char *)"_atomarray3_end", _wrap__atomarray3_end, METH_VARARGS, (char *)"_atomarray3_end(_atomarray3 self) -> atom **"},
	 { (char *)"delete__atomarray3", _wrap_delete__atomarray3, METH_VARARGS, (char *)"delete__atomarray3(_atomarray3 self)"},
	 { (char *)"_atomarray3_swigregister", _atomarray3_swigregister, METH_VARARGS, NULL},
	 { (char *)"new__atomarray4", _wrap_new__atomarray4, METH_VARARGS, (char *)"\n"
		"_atomarray4()\n"
		"_atomarray4(_atomarray4 rhs)\n"
		"new__atomarray4(atom *const [4] locs) -> _atomarray4\n"
		""},
	 { (char *)"_atomarray4_get", _wrap__atomarray4_get, METH_VARARGS, (char *)"_atomarray4_get(_atomarray4 self, unsigned int const n) -> atom"},
	 { (char *)"_atomarray4_set", _wrap__atomarray4_set, METH_VARARGS, (char *)"_atomarray4_set(_atomarray4 self, unsigned int const n, atom a)"},
	 { (char *)"_atomarray4_len", _wrap__atomarray4_len, METH_VARARGS, (char *)"_atomarray4_len(_atomarray4 self) -> unsigned int"},
	 { (char *)"_atomarray4_begin", _wrap__atomarray4_begin, METH_VARARGS, (char *)"_atomarray4_begin(_atomarray4 self) -> atom **"},
	 { (char *)"_atomarray4_end", _wrap__atomarray4_end, METH_VARARGS, (char *)"_atomarray4_end(_atomarray4 self) -> atom **"},
	 { (char *)"delete__atomarray4", _wrap_delete__atomarray4, METH_VARARGS, (char *)"delete__atomarray4(_atomarray4 self)"},
	 { (char *)"_atomarray4_swigregister", _atomarray4_swigregister, METH_VARARGS, NULL},
	 { (char *)"fvector_iterator", _wrap_fvector_iterator, METH_VARARGS, (char *)"fvector_iterator(fvector self) -> SwigPyIterator"},
	 { (char *)"fvector___nonzero__", _wrap_fvector___nonzero__, METH_VARARGS, (char *)"fvector___nonzero__(fvector self) -> bool"},
	 { (char *)"fvector___bool__", _wrap_fvector___bool__, METH_VARARGS, (char *)"fvector___bool__(fvector self) -> bool"},
	 { (char *)"fvector___len__", _wrap_fvector___len__, METH_VARARGS, (char *)"fvector___len__(fvector self) -> vector< double >::size_type"},
	 { (char *)"fvector_pop", _wrap_fvector_pop, METH_VARARGS, (char *)"fvector_pop(fvector self) -> vector< double >::value_type"},
	 { (char *)"fvector___getslice__", _wrap_fvector___getslice__, METH_VARARGS, (char *)"fvector___getslice__(fvector self, vector< double >::difference_type i, vector< double >::difference_type j) -> std::vector< double,std::allocator< double > > *"},
	 { (char *)"fvector___setslice__", _wrap_fvector___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(vector< double >::difference_type i, vector< double >::difference_type j, std::vector< double,std::allocator< double > > const & v=std::vector< double,std::allocator< double > >())\n"
		"fvector___setslice__(fvector self, vector< double >::difference_type i, vector< double >::difference_type j)\n"
		""},
	 { (char *)"fvector___delslice__", _wrap_fvector___delslice__, METH_VARARGS, (char *)"fvector___delslice__(fvector self, vector< double >::difference_type i, vector< double >::difference_type j)"},
	 { (char *)"fvector___delitem__", _wrap_fvector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(vector< double >::difference_type i)\n"
		"fvector___delitem__(fvector self, PySliceObject * slice)\n"
		""},
	 { (char *)"fvector___getitem__", _wrap_fvector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> std::vector< double,std::allocator< double > >\n"
		"fvector___getitem__(fvector self, vector< double >::difference_type i) -> vector< double >::value_type const &\n"
		""},
	 { (char *)"fvector___setitem__", _wrap_fvector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, std::vector< double,std::allocator< double > > const & v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"fvector___setitem__(fvector self, vector< double >::difference_type i, vector< double >::value_type const & x)\n"
		""},
	 { (char *)"fvector_append", _wrap_fvector_append, METH_VARARGS, (char *)"fvector_append(fvector self, vector< double >::value_type const & x)"},
	 { (char *)"fvector_empty", _wrap_fvector_empty, METH_VARARGS, (char *)"fvector_empty(fvector self) -> bool"},
	 { (char *)"fvector_size", _wrap_fvector_size, METH_VARARGS, (char *)"fvector_size(fvector self) -> vector< double >::size_type"},
	 { (char *)"fvector_clear", _wrap_fvector_clear, METH_VARARGS, (char *)"fvector_clear(fvector self)"},
	 { (char *)"fvector_swap", _wrap_fvector_swap, METH_VARARGS, (char *)"fvector_swap(fvector self, fvector v)"},
	 { (char *)"fvector_get_allocator", _wrap_fvector_get_allocator, METH_VARARGS, (char *)"fvector_get_allocator(fvector self) -> vector< double >::allocator_type"},
	 { (char *)"fvector_begin", _wrap_fvector_begin, METH_VARARGS, (char *)"fvector_begin(fvector self) -> vector< double >::iterator"},
	 { (char *)"fvector_end", _wrap_fvector_end, METH_VARARGS, (char *)"fvector_end(fvector self) -> vector< double >::iterator"},
	 { (char *)"fvector_rbegin", _wrap_fvector_rbegin, METH_VARARGS, (char *)"fvector_rbegin(fvector self) -> vector< double >::reverse_iterator"},
	 { (char *)"fvector_rend", _wrap_fvector_rend, METH_VARARGS, (char *)"fvector_rend(fvector self) -> vector< double >::reverse_iterator"},
	 { (char *)"fvector_pop_back", _wrap_fvector_pop_back, METH_VARARGS, (char *)"fvector_pop_back(fvector self)"},
	 { (char *)"fvector_erase", _wrap_fvector_erase, METH_VARARGS, (char *)"\n"
		"erase(vector< double >::iterator pos) -> vector< double >::iterator\n"
		"fvector_erase(fvector self, vector< double >::iterator first, vector< double >::iterator last) -> vector< double >::iterator\n"
		""},
	 { (char *)"new_fvector", _wrap_new_fvector, METH_VARARGS, (char *)"\n"
		"fvector()\n"
		"fvector(fvector arg2)\n"
		"fvector(vector< double >::size_type size)\n"
		"new_fvector(vector< double >::size_type size, vector< double >::value_type const & value) -> fvector\n"
		""},
	 { (char *)"fvector_push_back", _wrap_fvector_push_back, METH_VARARGS, (char *)"fvector_push_back(fvector self, vector< double >::value_type const & x)"},
	 { (char *)"fvector_front", _wrap_fvector_front, METH_VARARGS, (char *)"fvector_front(fvector self) -> vector< double >::value_type const &"},
	 { (char *)"fvector_back", _wrap_fvector_back, METH_VARARGS, (char *)"fvector_back(fvector self) -> vector< double >::value_type const &"},
	 { (char *)"fvector_assign", _wrap_fvector_assign, METH_VARARGS, (char *)"fvector_assign(fvector self, vector< double >::size_type n, vector< double >::value_type const & x)"},
	 { (char *)"fvector_resize", _wrap_fvector_resize, METH_VARARGS, (char *)"\n"
		"resize(vector< double >::size_type new_size)\n"
		"fvector_resize(fvector self, vector< double >::size_type new_size, vector< double >::value_type const & x)\n"
		""},
	 { (char *)"fvector_insert", _wrap_fvector_insert, METH_VARARGS, (char *)"\n"
		"insert(vector< double >::iterator pos, vector< double >::value_type const & x) -> vector< double >::iterator\n"
		"fvector_insert(fvector self, vector< double >::iterator pos, vector< double >::size_type n, vector< double >::value_type const & x)\n"
		""},
	 { (char *)"fvector_reserve", _wrap_fvector_reserve, METH_VARARGS, (char *)"fvector_reserve(fvector self, vector< double >::size_type n)"},
	 { (char *)"fvector_capacity", _wrap_fvector_capacity, METH_VARARGS, (char *)"fvector_capacity(fvector self) -> vector< double >::size_type"},
	 { (char *)"delete_fvector", _wrap_delete_fvector, METH_VARARGS, (char *)"delete_fvector(fvector self)"},
	 { (char *)"fvector_swigregister", fvector_swigregister, METH_VARARGS, NULL},
	 { (char *)"avector_iterator", _wrap_avector_iterator, METH_VARARGS, (char *)"avector_iterator(avector self) -> SwigPyIterator"},
	 { (char *)"avector___nonzero__", _wrap_avector___nonzero__, METH_VARARGS, (char *)"avector___nonzero__(avector self) -> bool"},
	 { (char *)"avector___bool__", _wrap_avector___bool__, METH_VARARGS, (char *)"avector___bool__(avector self) -> bool"},
	 { (char *)"avector___len__", _wrap_avector___len__, METH_VARARGS, (char *)"avector___len__(avector self) -> vector< atomgroup * >::size_type"},
	 { (char *)"avector_pop", _wrap_avector_pop, METH_VARARGS, (char *)"avector_pop(avector self) -> atomgroup"},
	 { (char *)"avector___getslice__", _wrap_avector___getslice__, METH_VARARGS, (char *)"avector___getslice__(avector self, vector< atomgroup * >::difference_type i, vector< atomgroup * >::difference_type j) -> std::vector< atomgroup *,std::allocator< atomgroup * > > *"},
	 { (char *)"avector___setslice__", _wrap_avector___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(vector< atomgroup * >::difference_type i, vector< atomgroup * >::difference_type j, \n"
		"    std::vector< atomgroup *,std::allocator< atomgroup * > > const & v=std::vector< atomgroup *,std::allocator< atomgroup * > >())\n"
		"avector___setslice__(avector self, vector< atomgroup * >::difference_type i, vector< atomgroup * >::difference_type j)\n"
		""},
	 { (char *)"avector___delslice__", _wrap_avector___delslice__, METH_VARARGS, (char *)"avector___delslice__(avector self, vector< atomgroup * >::difference_type i, vector< atomgroup * >::difference_type j)"},
	 { (char *)"avector___delitem__", _wrap_avector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(vector< atomgroup * >::difference_type i)\n"
		"avector___delitem__(avector self, PySliceObject * slice)\n"
		""},
	 { (char *)"avector___getitem__", _wrap_avector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> std::vector< atomgroup *,std::allocator< atomgroup * > >\n"
		"avector___getitem__(avector self, vector< atomgroup * >::difference_type i) -> atomgroup\n"
		""},
	 { (char *)"avector___setitem__", _wrap_avector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, std::vector< atomgroup *,std::allocator< atomgroup * > > const & v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"avector___setitem__(avector self, vector< atomgroup * >::difference_type i, atomgroup x)\n"
		""},
	 { (char *)"avector_append", _wrap_avector_append, METH_VARARGS, (char *)"avector_append(avector self, atomgroup x)"},
	 { (char *)"avector_empty", _wrap_avector_empty, METH_VARARGS, (char *)"avector_empty(avector self) -> bool"},
	 { (char *)"avector_size", _wrap_avector_size, METH_VARARGS, (char *)"avector_size(avector self) -> vector< atomgroup * >::size_type"},
	 { (char *)"avector_clear", _wrap_avector_clear, METH_VARARGS, (char *)"avector_clear(avector self)"},
	 { (char *)"avector_swap", _wrap_avector_swap, METH_VARARGS, (char *)"avector_swap(avector self, avector v)"},
	 { (char *)"avector_get_allocator", _wrap_avector_get_allocator, METH_VARARGS, (char *)"avector_get_allocator(avector self) -> vector< atomgroup * >::allocator_type"},
	 { (char *)"avector_begin", _wrap_avector_begin, METH_VARARGS, (char *)"avector_begin(avector self) -> vector< atomgroup * >::iterator"},
	 { (char *)"avector_end", _wrap_avector_end, METH_VARARGS, (char *)"avector_end(avector self) -> vector< atomgroup * >::iterator"},
	 { (char *)"avector_rbegin", _wrap_avector_rbegin, METH_VARARGS, (char *)"avector_rbegin(avector self) -> vector< atomgroup * >::reverse_iterator"},
	 { (char *)"avector_rend", _wrap_avector_rend, METH_VARARGS, (char *)"avector_rend(avector self) -> vector< atomgroup * >::reverse_iterator"},
	 { (char *)"avector_pop_back", _wrap_avector_pop_back, METH_VARARGS, (char *)"avector_pop_back(avector self)"},
	 { (char *)"avector_erase", _wrap_avector_erase, METH_VARARGS, (char *)"\n"
		"erase(vector< atomgroup * >::iterator pos) -> vector< atomgroup * >::iterator\n"
		"avector_erase(avector self, vector< atomgroup * >::iterator first, vector< atomgroup * >::iterator last) -> vector< atomgroup * >::iterator\n"
		""},
	 { (char *)"new_avector", _wrap_new_avector, METH_VARARGS, (char *)"\n"
		"avector()\n"
		"avector(avector arg2)\n"
		"avector(vector< atomgroup * >::size_type size)\n"
		"new_avector(vector< atomgroup * >::size_type size, atomgroup value) -> avector\n"
		""},
	 { (char *)"avector_push_back", _wrap_avector_push_back, METH_VARARGS, (char *)"avector_push_back(avector self, atomgroup x)"},
	 { (char *)"avector_front", _wrap_avector_front, METH_VARARGS, (char *)"avector_front(avector self) -> atomgroup"},
	 { (char *)"avector_back", _wrap_avector_back, METH_VARARGS, (char *)"avector_back(avector self) -> atomgroup"},
	 { (char *)"avector_assign", _wrap_avector_assign, METH_VARARGS, (char *)"avector_assign(avector self, vector< atomgroup * >::size_type n, atomgroup x)"},
	 { (char *)"avector_resize", _wrap_avector_resize, METH_VARARGS, (char *)"\n"
		"resize(vector< atomgroup * >::size_type new_size)\n"
		"avector_resize(avector self, vector< atomgroup * >::size_type new_size, atomgroup x)\n"
		""},
	 { (char *)"avector_insert", _wrap_avector_insert, METH_VARARGS, (char *)"\n"
		"insert(vector< atomgroup * >::iterator pos, atomgroup x) -> vector< atomgroup * >::iterator\n"
		"avector_insert(avector self, vector< atomgroup * >::iterator pos, vector< atomgroup * >::size_type n, \n"
		"    atomgroup x)\n"
		""},
	 { (char *)"avector_reserve", _wrap_avector_reserve, METH_VARARGS, (char *)"avector_reserve(avector self, vector< atomgroup * >::size_type n)"},
	 { (char *)"avector_capacity", _wrap_avector_capacity, METH_VARARGS, (char *)"avector_capacity(avector self) -> vector< atomgroup * >::size_type"},
	 { (char *)"delete_avector", _wrap_delete_avector, METH_VARARGS, (char *)"delete_avector(avector self)"},
	 { (char *)"avector_swigregister", avector_swigregister, METH_VARARGS, NULL},
	 { (char *)"ivector_iterator", _wrap_ivector_iterator, METH_VARARGS, (char *)"ivector_iterator(ivector self) -> SwigPyIterator"},
	 { (char *)"ivector___nonzero__", _wrap_ivector___nonzero__, METH_VARARGS, (char *)"ivector___nonzero__(ivector self) -> bool"},
	 { (char *)"ivector___bool__", _wrap_ivector___bool__, METH_VARARGS, (char *)"ivector___bool__(ivector self) -> bool"},
	 { (char *)"ivector___len__", _wrap_ivector___len__, METH_VARARGS, (char *)"ivector___len__(ivector self) -> vector< interaction * >::size_type"},
	 { (char *)"ivector_pop", _wrap_ivector_pop, METH_VARARGS, (char *)"ivector_pop(ivector self) -> interaction"},
	 { (char *)"ivector___getslice__", _wrap_ivector___getslice__, METH_VARARGS, (char *)"ivector___getslice__(ivector self, vector< interaction * >::difference_type i, vector< interaction * >::difference_type j) -> std::vector< interaction *,std::allocator< interaction * > > *"},
	 { (char *)"ivector___setslice__", _wrap_ivector___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(vector< interaction * >::difference_type i, vector< interaction * >::difference_type j, \n"
		"    std::vector< interaction *,std::allocator< interaction * > > const & v=std::vector< interaction *,std::allocator< interaction * > >())\n"
		"ivector___setslice__(ivector self, vector< interaction * >::difference_type i, vector< interaction * >::difference_type j)\n"
		""},
	 { (char *)"ivector___delslice__", _wrap_ivector___delslice__, METH_VARARGS, (char *)"ivector___delslice__(ivector self, vector< interaction * >::difference_type i, vector< interaction * >::difference_type j)"},
	 { (char *)"ivector___delitem__", _wrap_ivector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(vector< interaction * >::difference_type i)\n"
		"ivector___delitem__(ivector self, PySliceObject * slice)\n"
		""},
	 { (char *)"ivector___getitem__", _wrap_ivector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> std::vector< interaction *,std::allocator< interaction * > >\n"
		"ivector___getitem__(ivector self, vector< interaction * >::difference_type i) -> interaction\n"
		""},
	 { (char *)"ivector___setitem__", _wrap_ivector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, std::vector< interaction *,std::allocator< interaction * > > const & v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"ivector___setitem__(ivector self, vector< interaction * >::difference_type i, interaction x)\n"
		""},
	 { (char *)"ivector_append", _wrap_ivector_append, METH_VARARGS, (char *)"ivector_append(ivector self, interaction x)"},
	 { (char *)"ivector_empty", _wrap_ivector_empty, METH_VARARGS, (char *)"ivector_empty(ivector self) -> bool"},
	 { (char *)"ivector_size", _wrap_ivector_size, METH_VARARGS, (char *)"ivector_size(ivector self) -> vector< interaction * >::size_type"},
	 { (char *)"ivector_clear", _wrap_ivector_clear, METH_VARARGS, (char *)"ivector_clear(ivector self)"},
	 { (char *)"ivector_swap", _wrap_ivector_swap, METH_VARARGS, (char *)"ivector_swap(ivector self, ivector v)"},
	 { (char *)"ivector_get_allocator", _wrap_ivector_get_allocator, METH_VARARGS, (char *)"ivector_get_allocator(ivector self) -> vector< interaction * >::allocator_type"},
	 { (char *)"ivector_begin", _wrap_ivector_begin, METH_VARARGS, (char *)"ivector_begin(ivector self) -> vector< interaction * >::iterator"},
	 { (char *)"ivector_end", _wrap_ivector_end, METH_VARARGS, (char *)"ivector_end(ivector self) -> vector< interaction * >::iterator"},
	 { (char *)"ivector_rbegin", _wrap_ivector_rbegin, METH_VARARGS, (char *)"ivector_rbegin(ivector self) -> vector< interaction * >::reverse_iterator"},
	 { (char *)"ivector_rend", _wrap_ivector_rend, METH_VARARGS, (char *)"ivector_rend(ivector self) -> vector< interaction * >::reverse_iterator"},
	 { (char *)"ivector_pop_back", _wrap_ivector_pop_back, METH_VARARGS, (char *)"ivector_pop_back(ivector self)"},
	 { (char *)"ivector_erase", _wrap_ivector_erase, METH_VARARGS, (char *)"\n"
		"erase(vector< interaction * >::iterator pos) -> vector< interaction * >::iterator\n"
		"ivector_erase(ivector self, vector< interaction * >::iterator first, vector< interaction * >::iterator last) -> vector< interaction * >::iterator\n"
		""},
	 { (char *)"new_ivector", _wrap_new_ivector, METH_VARARGS, (char *)"\n"
		"ivector()\n"
		"ivector(ivector arg2)\n"
		"ivector(vector< interaction * >::size_type size)\n"
		"new_ivector(vector< interaction * >::size_type size, interaction value) -> ivector\n"
		""},
	 { (char *)"ivector_push_back", _wrap_ivector_push_back, METH_VARARGS, (char *)"ivector_push_back(ivector self, interaction x)"},
	 { (char *)"ivector_front", _wrap_ivector_front, METH_VARARGS, (char *)"ivector_front(ivector self) -> interaction"},
	 { (char *)"ivector_back", _wrap_ivector_back, METH_VARARGS, (char *)"ivector_back(ivector self) -> interaction"},
	 { (char *)"ivector_assign", _wrap_ivector_assign, METH_VARARGS, (char *)"ivector_assign(ivector self, vector< interaction * >::size_type n, interaction x)"},
	 { (char *)"ivector_resize", _wrap_ivector_resize, METH_VARARGS, (char *)"\n"
		"resize(vector< interaction * >::size_type new_size)\n"
		"ivector_resize(ivector self, vector< interaction * >::size_type new_size, interaction x)\n"
		""},
	 { (char *)"ivector_insert", _wrap_ivector_insert, METH_VARARGS, (char *)"\n"
		"insert(vector< interaction * >::iterator pos, interaction x) -> vector< interaction * >::iterator\n"
		"ivector_insert(ivector self, vector< interaction * >::iterator pos, vector< interaction * >::size_type n, \n"
		"    interaction x)\n"
		""},
	 { (char *)"ivector_reserve", _wrap_ivector_reserve, METH_VARARGS, (char *)"ivector_reserve(ivector self, vector< interaction * >::size_type n)"},
	 { (char *)"ivector_capacity", _wrap_ivector_capacity, METH_VARARGS, (char *)"ivector_capacity(ivector self) -> vector< interaction * >::size_type"},
	 { (char *)"delete_ivector", _wrap_delete_ivector, METH_VARARGS, (char *)"delete_ivector(ivector self)"},
	 { (char *)"ivector_swigregister", ivector_swigregister, METH_VARARGS, NULL},
	 { (char *)"ifxvector_iterator", _wrap_ifxvector_iterator, METH_VARARGS, (char *)"ifxvector_iterator(ifxvector self) -> SwigPyIterator"},
	 { (char *)"ifxvector___nonzero__", _wrap_ifxvector___nonzero__, METH_VARARGS, (char *)"ifxvector___nonzero__(ifxvector self) -> bool"},
	 { (char *)"ifxvector___bool__", _wrap_ifxvector___bool__, METH_VARARGS, (char *)"ifxvector___bool__(ifxvector self) -> bool"},
	 { (char *)"ifxvector___len__", _wrap_ifxvector___len__, METH_VARARGS, (char *)"ifxvector___len__(ifxvector self) -> vector< interactionpairsx * >::size_type"},
	 { (char *)"ifxvector_pop", _wrap_ifxvector_pop, METH_VARARGS, (char *)"ifxvector_pop(ifxvector self) -> interactionpairsx"},
	 { (char *)"ifxvector___getslice__", _wrap_ifxvector___getslice__, METH_VARARGS, (char *)"ifxvector___getslice__(ifxvector self, vector< interactionpairsx * >::difference_type i, vector< interactionpairsx * >::difference_type j) -> std::vector< interactionpairsx *,std::allocator< interactionpairsx * > > *"},
	 { (char *)"ifxvector___setslice__", _wrap_ifxvector___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(vector< interactionpairsx * >::difference_type i, vector< interactionpairsx * >::difference_type j, \n"
		"    std::vector< interactionpairsx *,std::allocator< interactionpairsx * > > const & v=std::vector< interactionpairsx *,std::allocator< interactionpairsx * > >())\n"
		"ifxvector___setslice__(ifxvector self, vector< interactionpairsx * >::difference_type i, vector< interactionpairsx * >::difference_type j)\n"
		""},
	 { (char *)"ifxvector___delslice__", _wrap_ifxvector___delslice__, METH_VARARGS, (char *)"ifxvector___delslice__(ifxvector self, vector< interactionpairsx * >::difference_type i, vector< interactionpairsx * >::difference_type j)"},
	 { (char *)"ifxvector___delitem__", _wrap_ifxvector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(vector< interactionpairsx * >::difference_type i)\n"
		"ifxvector___delitem__(ifxvector self, PySliceObject * slice)\n"
		""},
	 { (char *)"ifxvector___getitem__", _wrap_ifxvector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> std::vector< interactionpairsx *,std::allocator< interactionpairsx * > >\n"
		"ifxvector___getitem__(ifxvector self, vector< interactionpairsx * >::difference_type i) -> interactionpairsx\n"
		""},
	 { (char *)"ifxvector___setitem__", _wrap_ifxvector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, std::vector< interactionpairsx *,std::allocator< interactionpairsx * > > const & v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"ifxvector___setitem__(ifxvector self, vector< interactionpairsx * >::difference_type i, interactionpairsx x)\n"
		""},
	 { (char *)"ifxvector_append", _wrap_ifxvector_append, METH_VARARGS, (char *)"ifxvector_append(ifxvector self, interactionpairsx x)"},
	 { (char *)"ifxvector_empty", _wrap_ifxvector_empty, METH_VARARGS, (char *)"ifxvector_empty(ifxvector self) -> bool"},
	 { (char *)"ifxvector_size", _wrap_ifxvector_size, METH_VARARGS, (char *)"ifxvector_size(ifxvector self) -> vector< interactionpairsx * >::size_type"},
	 { (char *)"ifxvector_clear", _wrap_ifxvector_clear, METH_VARARGS, (char *)"ifxvector_clear(ifxvector self)"},
	 { (char *)"ifxvector_swap", _wrap_ifxvector_swap, METH_VARARGS, (char *)"ifxvector_swap(ifxvector self, ifxvector v)"},
	 { (char *)"ifxvector_get_allocator", _wrap_ifxvector_get_allocator, METH_VARARGS, (char *)"ifxvector_get_allocator(ifxvector self) -> vector< interactionpairsx * >::allocator_type"},
	 { (char *)"ifxvector_begin", _wrap_ifxvector_begin, METH_VARARGS, (char *)"ifxvector_begin(ifxvector self) -> vector< interactionpairsx * >::iterator"},
	 { (char *)"ifxvector_end", _wrap_ifxvector_end, METH_VARARGS, (char *)"ifxvector_end(ifxvector self) -> vector< interactionpairsx * >::iterator"},
	 { (char *)"ifxvector_rbegin", _wrap_ifxvector_rbegin, METH_VARARGS, (char *)"ifxvector_rbegin(ifxvector self) -> vector< interactionpairsx * >::reverse_iterator"},
	 { (char *)"ifxvector_rend", _wrap_ifxvector_rend, METH_VARARGS, (char *)"ifxvector_rend(ifxvector self) -> vector< interactionpairsx * >::reverse_iterator"},
	 { (char *)"ifxvector_pop_back", _wrap_ifxvector_pop_back, METH_VARARGS, (char *)"ifxvector_pop_back(ifxvector self)"},
	 { (char *)"ifxvector_erase", _wrap_ifxvector_erase, METH_VARARGS, (char *)"\n"
		"erase(vector< interactionpairsx * >::iterator pos) -> vector< interactionpairsx * >::iterator\n"
		"ifxvector_erase(ifxvector self, vector< interactionpairsx * >::iterator first, vector< interactionpairsx * >::iterator last) -> vector< interactionpairsx * >::iterator\n"
		""},
	 { (char *)"new_ifxvector", _wrap_new_ifxvector, METH_VARARGS, (char *)"\n"
		"ifxvector()\n"
		"ifxvector(ifxvector arg2)\n"
		"ifxvector(vector< interactionpairsx * >::size_type size)\n"
		"new_ifxvector(vector< interactionpairsx * >::size_type size, interactionpairsx value) -> ifxvector\n"
		""},
	 { (char *)"ifxvector_push_back", _wrap_ifxvector_push_back, METH_VARARGS, (char *)"ifxvector_push_back(ifxvector self, interactionpairsx x)"},
	 { (char *)"ifxvector_front", _wrap_ifxvector_front, METH_VARARGS, (char *)"ifxvector_front(ifxvector self) -> interactionpairsx"},
	 { (char *)"ifxvector_back", _wrap_ifxvector_back, METH_VARARGS, (char *)"ifxvector_back(ifxvector self) -> interactionpairsx"},
	 { (char *)"ifxvector_assign", _wrap_ifxvector_assign, METH_VARARGS, (char *)"ifxvector_assign(ifxvector self, vector< interactionpairsx * >::size_type n, interactionpairsx x)"},
	 { (char *)"ifxvector_resize", _wrap_ifxvector_resize, METH_VARARGS, (char *)"\n"
		"resize(vector< interactionpairsx * >::size_type new_size)\n"
		"ifxvector_resize(ifxvector self, vector< interactionpairsx * >::size_type new_size, interactionpairsx x)\n"
		""},
	 { (char *)"ifxvector_insert", _wrap_ifxvector_insert, METH_VARARGS, (char *)"\n"
		"insert(vector< interactionpairsx * >::iterator pos, interactionpairsx x) -> vector< interactionpairsx * >::iterator\n"
		"ifxvector_insert(ifxvector self, vector< interactionpairsx * >::iterator pos, vector< interactionpairsx * >::size_type n, \n"
		"    interactionpairsx x)\n"
		""},
	 { (char *)"ifxvector_reserve", _wrap_ifxvector_reserve, METH_VARARGS, (char *)"ifxvector_reserve(ifxvector self, vector< interactionpairsx * >::size_type n)"},
	 { (char *)"ifxvector_capacity", _wrap_ifxvector_capacity, METH_VARARGS, (char *)"ifxvector_capacity(ifxvector self) -> vector< interactionpairsx * >::size_type"},
	 { (char *)"delete_ifxvector", _wrap_delete_ifxvector, METH_VARARGS, (char *)"delete_ifxvector(ifxvector self)"},
	 { (char *)"ifxvector_swigregister", ifxvector_swigregister, METH_VARARGS, NULL},
	 { (char *)"tvector_iterator", _wrap_tvector_iterator, METH_VARARGS, (char *)"tvector_iterator(tvector self) -> SwigPyIterator"},
	 { (char *)"tvector___nonzero__", _wrap_tvector___nonzero__, METH_VARARGS, (char *)"tvector___nonzero__(tvector self) -> bool"},
	 { (char *)"tvector___bool__", _wrap_tvector___bool__, METH_VARARGS, (char *)"tvector___bool__(tvector self) -> bool"},
	 { (char *)"tvector___len__", _wrap_tvector___len__, METH_VARARGS, (char *)"tvector___len__(tvector self) -> vector< statetracker * >::size_type"},
	 { (char *)"tvector_pop", _wrap_tvector_pop, METH_VARARGS, (char *)"tvector_pop(tvector self) -> statetracker"},
	 { (char *)"tvector___getslice__", _wrap_tvector___getslice__, METH_VARARGS, (char *)"tvector___getslice__(tvector self, vector< statetracker * >::difference_type i, vector< statetracker * >::difference_type j) -> std::vector< statetracker *,std::allocator< statetracker * > > *"},
	 { (char *)"tvector___setslice__", _wrap_tvector___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(vector< statetracker * >::difference_type i, vector< statetracker * >::difference_type j, \n"
		"    std::vector< statetracker *,std::allocator< statetracker * > > const & v=std::vector< statetracker *,std::allocator< statetracker * > >())\n"
		"tvector___setslice__(tvector self, vector< statetracker * >::difference_type i, vector< statetracker * >::difference_type j)\n"
		""},
	 { (char *)"tvector___delslice__", _wrap_tvector___delslice__, METH_VARARGS, (char *)"tvector___delslice__(tvector self, vector< statetracker * >::difference_type i, vector< statetracker * >::difference_type j)"},
	 { (char *)"tvector___delitem__", _wrap_tvector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(vector< statetracker * >::difference_type i)\n"
		"tvector___delitem__(tvector self, PySliceObject * slice)\n"
		""},
	 { (char *)"tvector___getitem__", _wrap_tvector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> std::vector< statetracker *,std::allocator< statetracker * > >\n"
		"tvector___getitem__(tvector self, vector< statetracker * >::difference_type i) -> statetracker\n"
		""},
	 { (char *)"tvector___setitem__", _wrap_tvector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, std::vector< statetracker *,std::allocator< statetracker * > > const & v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"tvector___setitem__(tvector self, vector< statetracker * >::difference_type i, statetracker x)\n"
		""},
	 { (char *)"tvector_append", _wrap_tvector_append, METH_VARARGS, (char *)"tvector_append(tvector self, statetracker x)"},
	 { (char *)"tvector_empty", _wrap_tvector_empty, METH_VARARGS, (char *)"tvector_empty(tvector self) -> bool"},
	 { (char *)"tvector_size", _wrap_tvector_size, METH_VARARGS, (char *)"tvector_size(tvector self) -> vector< statetracker * >::size_type"},
	 { (char *)"tvector_clear", _wrap_tvector_clear, METH_VARARGS, (char *)"tvector_clear(tvector self)"},
	 { (char *)"tvector_swap", _wrap_tvector_swap, METH_VARARGS, (char *)"tvector_swap(tvector self, tvector v)"},
	 { (char *)"tvector_get_allocator", _wrap_tvector_get_allocator, METH_VARARGS, (char *)"tvector_get_allocator(tvector self) -> vector< statetracker * >::allocator_type"},
	 { (char *)"tvector_begin", _wrap_tvector_begin, METH_VARARGS, (char *)"tvector_begin(tvector self) -> vector< statetracker * >::iterator"},
	 { (char *)"tvector_end", _wrap_tvector_end, METH_VARARGS, (char *)"tvector_end(tvector self) -> vector< statetracker * >::iterator"},
	 { (char *)"tvector_rbegin", _wrap_tvector_rbegin, METH_VARARGS, (char *)"tvector_rbegin(tvector self) -> vector< statetracker * >::reverse_iterator"},
	 { (char *)"tvector_rend", _wrap_tvector_rend, METH_VARARGS, (char *)"tvector_rend(tvector self) -> vector< statetracker * >::reverse_iterator"},
	 { (char *)"tvector_pop_back", _wrap_tvector_pop_back, METH_VARARGS, (char *)"tvector_pop_back(tvector self)"},
	 { (char *)"tvector_erase", _wrap_tvector_erase, METH_VARARGS, (char *)"\n"
		"erase(vector< statetracker * >::iterator pos) -> vector< statetracker * >::iterator\n"
		"tvector_erase(tvector self, vector< statetracker * >::iterator first, vector< statetracker * >::iterator last) -> vector< statetracker * >::iterator\n"
		""},
	 { (char *)"new_tvector", _wrap_new_tvector, METH_VARARGS, (char *)"\n"
		"tvector()\n"
		"tvector(tvector arg2)\n"
		"tvector(vector< statetracker * >::size_type size)\n"
		"new_tvector(vector< statetracker * >::size_type size, statetracker value) -> tvector\n"
		""},
	 { (char *)"tvector_push_back", _wrap_tvector_push_back, METH_VARARGS, (char *)"tvector_push_back(tvector self, statetracker x)"},
	 { (char *)"tvector_front", _wrap_tvector_front, METH_VARARGS, (char *)"tvector_front(tvector self) -> statetracker"},
	 { (char *)"tvector_back", _wrap_tvector_back, METH_VARARGS, (char *)"tvector_back(tvector self) -> statetracker"},
	 { (char *)"tvector_assign", _wrap_tvector_assign, METH_VARARGS, (char *)"tvector_assign(tvector self, vector< statetracker * >::size_type n, statetracker x)"},
	 { (char *)"tvector_resize", _wrap_tvector_resize, METH_VARARGS, (char *)"\n"
		"resize(vector< statetracker * >::size_type new_size)\n"
		"tvector_resize(tvector self, vector< statetracker * >::size_type new_size, statetracker x)\n"
		""},
	 { (char *)"tvector_insert", _wrap_tvector_insert, METH_VARARGS, (char *)"\n"
		"insert(vector< statetracker * >::iterator pos, statetracker x) -> vector< statetracker * >::iterator\n"
		"tvector_insert(tvector self, vector< statetracker * >::iterator pos, vector< statetracker * >::size_type n, \n"
		"    statetracker x)\n"
		""},
	 { (char *)"tvector_reserve", _wrap_tvector_reserve, METH_VARARGS, (char *)"tvector_reserve(tvector self, vector< statetracker * >::size_type n)"},
	 { (char *)"tvector_capacity", _wrap_tvector_capacity, METH_VARARGS, (char *)"tvector_capacity(tvector self) -> vector< statetracker * >::size_type"},
	 { (char *)"delete_tvector", _wrap_delete_tvector, METH_VARARGS, (char *)"delete_tvector(tvector self)"},
	 { (char *)"tvector_swigregister", tvector_swigregister, METH_VARARGS, NULL},
	 { (char *)"constraintvector_iterator", _wrap_constraintvector_iterator, METH_VARARGS, (char *)"constraintvector_iterator(constraintvector self) -> SwigPyIterator"},
	 { (char *)"constraintvector___nonzero__", _wrap_constraintvector___nonzero__, METH_VARARGS, (char *)"constraintvector___nonzero__(constraintvector self) -> bool"},
	 { (char *)"constraintvector___bool__", _wrap_constraintvector___bool__, METH_VARARGS, (char *)"constraintvector___bool__(constraintvector self) -> bool"},
	 { (char *)"constraintvector___len__", _wrap_constraintvector___len__, METH_VARARGS, (char *)"constraintvector___len__(constraintvector self) -> vector< constraint * >::size_type"},
	 { (char *)"constraintvector_pop", _wrap_constraintvector_pop, METH_VARARGS, (char *)"constraintvector_pop(constraintvector self) -> constraint"},
	 { (char *)"constraintvector___getslice__", _wrap_constraintvector___getslice__, METH_VARARGS, (char *)"constraintvector___getslice__(constraintvector self, vector< constraint * >::difference_type i, vector< constraint * >::difference_type j) -> std::vector< constraint *,std::allocator< constraint * > > *"},
	 { (char *)"constraintvector___setslice__", _wrap_constraintvector___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(vector< constraint * >::difference_type i, vector< constraint * >::difference_type j, \n"
		"    std::vector< constraint *,std::allocator< constraint * > > const & v=std::vector< constraint *,std::allocator< constraint * > >())\n"
		"constraintvector___setslice__(constraintvector self, vector< constraint * >::difference_type i, vector< constraint * >::difference_type j)\n"
		""},
	 { (char *)"constraintvector___delslice__", _wrap_constraintvector___delslice__, METH_VARARGS, (char *)"constraintvector___delslice__(constraintvector self, vector< constraint * >::difference_type i, vector< constraint * >::difference_type j)"},
	 { (char *)"constraintvector___delitem__", _wrap_constraintvector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(vector< constraint * >::difference_type i)\n"
		"constraintvector___delitem__(constraintvector self, PySliceObject * slice)\n"
		""},
	 { (char *)"constraintvector___getitem__", _wrap_constraintvector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> std::vector< constraint *,std::allocator< constraint * > >\n"
		"constraintvector___getitem__(constraintvector self, vector< constraint * >::difference_type i) -> constraint\n"
		""},
	 { (char *)"constraintvector___setitem__", _wrap_constraintvector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, std::vector< constraint *,std::allocator< constraint * > > const & v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"constraintvector___setitem__(constraintvector self, vector< constraint * >::difference_type i, constraint x)\n"
		""},
	 { (char *)"constraintvector_append", _wrap_constraintvector_append, METH_VARARGS, (char *)"constraintvector_append(constraintvector self, constraint x)"},
	 { (char *)"constraintvector_empty", _wrap_constraintvector_empty, METH_VARARGS, (char *)"constraintvector_empty(constraintvector self) -> bool"},
	 { (char *)"constraintvector_size", _wrap_constraintvector_size, METH_VARARGS, (char *)"constraintvector_size(constraintvector self) -> vector< constraint * >::size_type"},
	 { (char *)"constraintvector_clear", _wrap_constraintvector_clear, METH_VARARGS, (char *)"constraintvector_clear(constraintvector self)"},
	 { (char *)"constraintvector_swap", _wrap_constraintvector_swap, METH_VARARGS, (char *)"constraintvector_swap(constraintvector self, constraintvector v)"},
	 { (char *)"constraintvector_get_allocator", _wrap_constraintvector_get_allocator, METH_VARARGS, (char *)"constraintvector_get_allocator(constraintvector self) -> vector< constraint * >::allocator_type"},
	 { (char *)"constraintvector_begin", _wrap_constraintvector_begin, METH_VARARGS, (char *)"constraintvector_begin(constraintvector self) -> vector< constraint * >::iterator"},
	 { (char *)"constraintvector_end", _wrap_constraintvector_end, METH_VARARGS, (char *)"constraintvector_end(constraintvector self) -> vector< constraint * >::iterator"},
	 { (char *)"constraintvector_rbegin", _wrap_constraintvector_rbegin, METH_VARARGS, (char *)"constraintvector_rbegin(constraintvector self) -> vector< constraint * >::reverse_iterator"},
	 { (char *)"constraintvector_rend", _wrap_constraintvector_rend, METH_VARARGS, (char *)"constraintvector_rend(constraintvector self) -> vector< constraint * >::reverse_iterator"},
	 { (char *)"constraintvector_pop_back", _wrap_constraintvector_pop_back, METH_VARARGS, (char *)"constraintvector_pop_back(constraintvector self)"},
	 { (char *)"constraintvector_erase", _wrap_constraintvector_erase, METH_VARARGS, (char *)"\n"
		"erase(vector< constraint * >::iterator pos) -> vector< constraint * >::iterator\n"
		"constraintvector_erase(constraintvector self, vector< constraint * >::iterator first, vector< constraint * >::iterator last) -> vector< constraint * >::iterator\n"
		""},
	 { (char *)"new_constraintvector", _wrap_new_constraintvector, METH_VARARGS, (char *)"\n"
		"constraintvector()\n"
		"constraintvector(constraintvector arg2)\n"
		"constraintvector(vector< constraint * >::size_type size)\n"
		"new_constraintvector(vector< constraint * >::size_type size, constraint value) -> constraintvector\n"
		""},
	 { (char *)"constraintvector_push_back", _wrap_constraintvector_push_back, METH_VARARGS, (char *)"constraintvector_push_back(constraintvector self, constraint x)"},
	 { (char *)"constraintvector_front", _wrap_constraintvector_front, METH_VARARGS, (char *)"constraintvector_front(constraintvector self) -> constraint"},
	 { (char *)"constraintvector_back", _wrap_constraintvector_back, METH_VARARGS, (char *)"constraintvector_back(constraintvector self) -> constraint"},
	 { (char *)"constraintvector_assign", _wrap_constraintvector_assign, METH_VARARGS, (char *)"constraintvector_assign(constraintvector self, vector< constraint * >::size_type n, constraint x)"},
	 { (char *)"constraintvector_resize", _wrap_constraintvector_resize, METH_VARARGS, (char *)"\n"
		"resize(vector< constraint * >::size_type new_size)\n"
		"constraintvector_resize(constraintvector self, vector< constraint * >::size_type new_size, constraint x)\n"
		""},
	 { (char *)"constraintvector_insert", _wrap_constraintvector_insert, METH_VARARGS, (char *)"\n"
		"insert(vector< constraint * >::iterator pos, constraint x) -> vector< constraint * >::iterator\n"
		"constraintvector_insert(constraintvector self, vector< constraint * >::iterator pos, vector< constraint * >::size_type n, \n"
		"    constraint x)\n"
		""},
	 { (char *)"constraintvector_reserve", _wrap_constraintvector_reserve, METH_VARARGS, (char *)"constraintvector_reserve(constraintvector self, vector< constraint * >::size_type n)"},
	 { (char *)"constraintvector_capacity", _wrap_constraintvector_capacity, METH_VARARGS, (char *)"constraintvector_capacity(constraintvector self) -> vector< constraint * >::size_type"},
	 { (char *)"delete_constraintvector", _wrap_delete_constraintvector, METH_VARARGS, (char *)"delete_constraintvector(constraintvector self)"},
	 { (char *)"constraintvector_swigregister", constraintvector_swigregister, METH_VARARGS, NULL},
	 { (char *)"aRK4vector_iterator", _wrap_aRK4vector_iterator, METH_VARARGS, (char *)"aRK4vector_iterator(aRK4vector self) -> SwigPyIterator"},
	 { (char *)"aRK4vector___nonzero__", _wrap_aRK4vector___nonzero__, METH_VARARGS, (char *)"aRK4vector___nonzero__(aRK4vector self) -> bool"},
	 { (char *)"aRK4vector___bool__", _wrap_aRK4vector___bool__, METH_VARARGS, (char *)"aRK4vector___bool__(aRK4vector self) -> bool"},
	 { (char *)"aRK4vector___len__", _wrap_aRK4vector___len__, METH_VARARGS, (char *)"aRK4vector___len__(aRK4vector self) -> vector< atomvecRK4 * >::size_type"},
	 { (char *)"aRK4vector_pop", _wrap_aRK4vector_pop, METH_VARARGS, (char *)"aRK4vector_pop(aRK4vector self) -> atomvecRK4"},
	 { (char *)"aRK4vector___getslice__", _wrap_aRK4vector___getslice__, METH_VARARGS, (char *)"aRK4vector___getslice__(aRK4vector self, vector< atomvecRK4 * >::difference_type i, vector< atomvecRK4 * >::difference_type j) -> std::vector< atomvecRK4 *,std::allocator< atomvecRK4 * > > *"},
	 { (char *)"aRK4vector___setslice__", _wrap_aRK4vector___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(vector< atomvecRK4 * >::difference_type i, vector< atomvecRK4 * >::difference_type j, \n"
		"    std::vector< atomvecRK4 *,std::allocator< atomvecRK4 * > > const & v=std::vector< atomvecRK4 *,std::allocator< atomvecRK4 * > >())\n"
		"aRK4vector___setslice__(aRK4vector self, vector< atomvecRK4 * >::difference_type i, vector< atomvecRK4 * >::difference_type j)\n"
		""},
	 { (char *)"aRK4vector___delslice__", _wrap_aRK4vector___delslice__, METH_VARARGS, (char *)"aRK4vector___delslice__(aRK4vector self, vector< atomvecRK4 * >::difference_type i, vector< atomvecRK4 * >::difference_type j)"},
	 { (char *)"aRK4vector___delitem__", _wrap_aRK4vector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(vector< atomvecRK4 * >::difference_type i)\n"
		"aRK4vector___delitem__(aRK4vector self, PySliceObject * slice)\n"
		""},
	 { (char *)"aRK4vector___getitem__", _wrap_aRK4vector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> std::vector< atomvecRK4 *,std::allocator< atomvecRK4 * > >\n"
		"aRK4vector___getitem__(aRK4vector self, vector< atomvecRK4 * >::difference_type i) -> atomvecRK4\n"
		""},
	 { (char *)"aRK4vector___setitem__", _wrap_aRK4vector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, std::vector< atomvecRK4 *,std::allocator< atomvecRK4 * > > const & v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"aRK4vector___setitem__(aRK4vector self, vector< atomvecRK4 * >::difference_type i, atomvecRK4 x)\n"
		""},
	 { (char *)"aRK4vector_append", _wrap_aRK4vector_append, METH_VARARGS, (char *)"aRK4vector_append(aRK4vector self, atomvecRK4 x)"},
	 { (char *)"aRK4vector_empty", _wrap_aRK4vector_empty, METH_VARARGS, (char *)"aRK4vector_empty(aRK4vector self) -> bool"},
	 { (char *)"aRK4vector_size", _wrap_aRK4vector_size, METH_VARARGS, (char *)"aRK4vector_size(aRK4vector self) -> vector< atomvecRK4 * >::size_type"},
	 { (char *)"aRK4vector_clear", _wrap_aRK4vector_clear, METH_VARARGS, (char *)"aRK4vector_clear(aRK4vector self)"},
	 { (char *)"aRK4vector_swap", _wrap_aRK4vector_swap, METH_VARARGS, (char *)"aRK4vector_swap(aRK4vector self, aRK4vector v)"},
	 { (char *)"aRK4vector_get_allocator", _wrap_aRK4vector_get_allocator, METH_VARARGS, (char *)"aRK4vector_get_allocator(aRK4vector self) -> vector< atomvecRK4 * >::allocator_type"},
	 { (char *)"aRK4vector_begin", _wrap_aRK4vector_begin, METH_VARARGS, (char *)"aRK4vector_begin(aRK4vector self) -> vector< atomvecRK4 * >::iterator"},
	 { (char *)"aRK4vector_end", _wrap_aRK4vector_end, METH_VARARGS, (char *)"aRK4vector_end(aRK4vector self) -> vector< atomvecRK4 * >::iterator"},
	 { (char *)"aRK4vector_rbegin", _wrap_aRK4vector_rbegin, METH_VARARGS, (char *)"aRK4vector_rbegin(aRK4vector self) -> vector< atomvecRK4 * >::reverse_iterator"},
	 { (char *)"aRK4vector_rend", _wrap_aRK4vector_rend, METH_VARARGS, (char *)"aRK4vector_rend(aRK4vector self) -> vector< atomvecRK4 * >::reverse_iterator"},
	 { (char *)"aRK4vector_pop_back", _wrap_aRK4vector_pop_back, METH_VARARGS, (char *)"aRK4vector_pop_back(aRK4vector self)"},
	 { (char *)"aRK4vector_erase", _wrap_aRK4vector_erase, METH_VARARGS, (char *)"\n"
		"erase(vector< atomvecRK4 * >::iterator pos) -> vector< atomvecRK4 * >::iterator\n"
		"aRK4vector_erase(aRK4vector self, vector< atomvecRK4 * >::iterator first, vector< atomvecRK4 * >::iterator last) -> vector< atomvecRK4 * >::iterator\n"
		""},
	 { (char *)"new_aRK4vector", _wrap_new_aRK4vector, METH_VARARGS, (char *)"\n"
		"aRK4vector()\n"
		"aRK4vector(aRK4vector arg2)\n"
		"aRK4vector(vector< atomvecRK4 * >::size_type size)\n"
		"new_aRK4vector(vector< atomvecRK4 * >::size_type size, atomvecRK4 value) -> aRK4vector\n"
		""},
	 { (char *)"aRK4vector_push_back", _wrap_aRK4vector_push_back, METH_VARARGS, (char *)"aRK4vector_push_back(aRK4vector self, atomvecRK4 x)"},
	 { (char *)"aRK4vector_front", _wrap_aRK4vector_front, METH_VARARGS, (char *)"aRK4vector_front(aRK4vector self) -> atomvecRK4"},
	 { (char *)"aRK4vector_back", _wrap_aRK4vector_back, METH_VARARGS, (char *)"aRK4vector_back(aRK4vector self) -> atomvecRK4"},
	 { (char *)"aRK4vector_assign", _wrap_aRK4vector_assign, METH_VARARGS, (char *)"aRK4vector_assign(aRK4vector self, vector< atomvecRK4 * >::size_type n, atomvecRK4 x)"},
	 { (char *)"aRK4vector_resize", _wrap_aRK4vector_resize, METH_VARARGS, (char *)"\n"
		"resize(vector< atomvecRK4 * >::size_type new_size)\n"
		"aRK4vector_resize(aRK4vector self, vector< atomvecRK4 * >::size_type new_size, atomvecRK4 x)\n"
		""},
	 { (char *)"aRK4vector_insert", _wrap_aRK4vector_insert, METH_VARARGS, (char *)"\n"
		"insert(vector< atomvecRK4 * >::iterator pos, atomvecRK4 x) -> vector< atomvecRK4 * >::iterator\n"
		"aRK4vector_insert(aRK4vector self, vector< atomvecRK4 * >::iterator pos, vector< atomvecRK4 * >::size_type n, \n"
		"    atomvecRK4 x)\n"
		""},
	 { (char *)"aRK4vector_reserve", _wrap_aRK4vector_reserve, METH_VARARGS, (char *)"aRK4vector_reserve(aRK4vector self, vector< atomvecRK4 * >::size_type n)"},
	 { (char *)"aRK4vector_capacity", _wrap_aRK4vector_capacity, METH_VARARGS, (char *)"aRK4vector_capacity(aRK4vector self) -> vector< atomvecRK4 * >::size_type"},
	 { (char *)"delete_aRK4vector", _wrap_delete_aRK4vector, METH_VARARGS, (char *)"delete_aRK4vector(aRK4vector self)"},
	 { (char *)"aRK4vector_swigregister", aRK4vector_swigregister, METH_VARARGS, NULL},
	 { (char *)"_uintvector_iterator", _wrap__uintvector_iterator, METH_VARARGS, (char *)"_uintvector_iterator(_uintvector self) -> SwigPyIterator"},
	 { (char *)"_uintvector___nonzero__", _wrap__uintvector___nonzero__, METH_VARARGS, (char *)"_uintvector___nonzero__(_uintvector self) -> bool"},
	 { (char *)"_uintvector___bool__", _wrap__uintvector___bool__, METH_VARARGS, (char *)"_uintvector___bool__(_uintvector self) -> bool"},
	 { (char *)"_uintvector___len__", _wrap__uintvector___len__, METH_VARARGS, (char *)"_uintvector___len__(_uintvector self) -> vector< unsigned int >::size_type"},
	 { (char *)"_uintvector_pop", _wrap__uintvector_pop, METH_VARARGS, (char *)"_uintvector_pop(_uintvector self) -> vector< unsigned int >::value_type"},
	 { (char *)"_uintvector___getslice__", _wrap__uintvector___getslice__, METH_VARARGS, (char *)"_uintvector___getslice__(_uintvector self, vector< unsigned int >::difference_type i, vector< unsigned int >::difference_type j) -> std::vector< unsigned int,std::allocator< unsigned int > > *"},
	 { (char *)"_uintvector___setslice__", _wrap__uintvector___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(vector< unsigned int >::difference_type i, vector< unsigned int >::difference_type j, \n"
		"    std::vector< unsigned int,std::allocator< unsigned int > > const & v=std::vector< unsigned int,std::allocator< unsigned int > >())\n"
		"_uintvector___setslice__(_uintvector self, vector< unsigned int >::difference_type i, vector< unsigned int >::difference_type j)\n"
		""},
	 { (char *)"_uintvector___delslice__", _wrap__uintvector___delslice__, METH_VARARGS, (char *)"_uintvector___delslice__(_uintvector self, vector< unsigned int >::difference_type i, vector< unsigned int >::difference_type j)"},
	 { (char *)"_uintvector___delitem__", _wrap__uintvector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(vector< unsigned int >::difference_type i)\n"
		"_uintvector___delitem__(_uintvector self, PySliceObject * slice)\n"
		""},
	 { (char *)"_uintvector___getitem__", _wrap__uintvector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> std::vector< unsigned int,std::allocator< unsigned int > >\n"
		"_uintvector___getitem__(_uintvector self, vector< unsigned int >::difference_type i) -> vector< unsigned int >::value_type const &\n"
		""},
	 { (char *)"_uintvector___setitem__", _wrap__uintvector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, std::vector< unsigned int,std::allocator< unsigned int > > const & v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"_uintvector___setitem__(_uintvector self, vector< unsigned int >::difference_type i, vector< unsigned int >::value_type const & x)\n"
		""},
	 { (char *)"_uintvector_append", _wrap__uintvector_append, METH_VARARGS, (char *)"_uintvector_append(_uintvector self, vector< unsigned int >::value_type const & x)"},
	 { (char *)"_uintvector_empty", _wrap__uintvector_empty, METH_VARARGS, (char *)"_uintvector_empty(_uintvector self) -> bool"},
	 { (char *)"_uintvector_size", _wrap__uintvector_size, METH_VARARGS, (char *)"_uintvector_size(_uintvector self) -> vector< unsigned int >::size_type"},
	 { (char *)"_uintvector_clear", _wrap__uintvector_clear, METH_VARARGS, (char *)"_uintvector_clear(_uintvector self)"},
	 { (char *)"_uintvector_swap", _wrap__uintvector_swap, METH_VARARGS, (char *)"_uintvector_swap(_uintvector self, _uintvector v)"},
	 { (char *)"_uintvector_get_allocator", _wrap__uintvector_get_allocator, METH_VARARGS, (char *)"_uintvector_get_allocator(_uintvector self) -> vector< unsigned int >::allocator_type"},
	 { (char *)"_uintvector_begin", _wrap__uintvector_begin, METH_VARARGS, (char *)"_uintvector_begin(_uintvector self) -> vector< unsigned int >::iterator"},
	 { (char *)"_uintvector_end", _wrap__uintvector_end, METH_VARARGS, (char *)"_uintvector_end(_uintvector self) -> vector< unsigned int >::iterator"},
	 { (char *)"_uintvector_rbegin", _wrap__uintvector_rbegin, METH_VARARGS, (char *)"_uintvector_rbegin(_uintvector self) -> vector< unsigned int >::reverse_iterator"},
	 { (char *)"_uintvector_rend", _wrap__uintvector_rend, METH_VARARGS, (char *)"_uintvector_rend(_uintvector self) -> vector< unsigned int >::reverse_iterator"},
	 { (char *)"_uintvector_pop_back", _wrap__uintvector_pop_back, METH_VARARGS, (char *)"_uintvector_pop_back(_uintvector self)"},
	 { (char *)"_uintvector_erase", _wrap__uintvector_erase, METH_VARARGS, (char *)"\n"
		"erase(vector< unsigned int >::iterator pos) -> vector< unsigned int >::iterator\n"
		"_uintvector_erase(_uintvector self, vector< unsigned int >::iterator first, vector< unsigned int >::iterator last) -> vector< unsigned int >::iterator\n"
		""},
	 { (char *)"new__uintvector", _wrap_new__uintvector, METH_VARARGS, (char *)"\n"
		"_uintvector()\n"
		"_uintvector(_uintvector arg2)\n"
		"_uintvector(vector< unsigned int >::size_type size)\n"
		"new__uintvector(vector< unsigned int >::size_type size, vector< unsigned int >::value_type const & value) -> _uintvector\n"
		""},
	 { (char *)"_uintvector_push_back", _wrap__uintvector_push_back, METH_VARARGS, (char *)"_uintvector_push_back(_uintvector self, vector< unsigned int >::value_type const & x)"},
	 { (char *)"_uintvector_front", _wrap__uintvector_front, METH_VARARGS, (char *)"_uintvector_front(_uintvector self) -> vector< unsigned int >::value_type const &"},
	 { (char *)"_uintvector_back", _wrap__uintvector_back, METH_VARARGS, (char *)"_uintvector_back(_uintvector self) -> vector< unsigned int >::value_type const &"},
	 { (char *)"_uintvector_assign", _wrap__uintvector_assign, METH_VARARGS, (char *)"_uintvector_assign(_uintvector self, vector< unsigned int >::size_type n, vector< unsigned int >::value_type const & x)"},
	 { (char *)"_uintvector_resize", _wrap__uintvector_resize, METH_VARARGS, (char *)"\n"
		"resize(vector< unsigned int >::size_type new_size)\n"
		"_uintvector_resize(_uintvector self, vector< unsigned int >::size_type new_size, vector< unsigned int >::value_type const & x)\n"
		""},
	 { (char *)"_uintvector_insert", _wrap__uintvector_insert, METH_VARARGS, (char *)"\n"
		"insert(vector< unsigned int >::iterator pos, vector< unsigned int >::value_type const & x) -> vector< unsigned int >::iterator\n"
		"_uintvector_insert(_uintvector self, vector< unsigned int >::iterator pos, vector< unsigned int >::size_type n, \n"
		"    vector< unsigned int >::value_type const & x)\n"
		""},
	 { (char *)"_uintvector_reserve", _wrap__uintvector_reserve, METH_VARARGS, (char *)"_uintvector_reserve(_uintvector self, vector< unsigned int >::size_type n)"},
	 { (char *)"_uintvector_capacity", _wrap__uintvector_capacity, METH_VARARGS, (char *)"_uintvector_capacity(_uintvector self) -> vector< unsigned int >::size_type"},
	 { (char *)"delete__uintvector", _wrap_delete__uintvector, METH_VARARGS, (char *)"delete__uintvector(_uintvector self)"},
	 { (char *)"_uintvector_swigregister", _uintvector_swigregister, METH_VARARGS, NULL},
	 { (char *)"randVec", _wrap_randVec, METH_VARARGS, (char *)"randVec() -> Vec"},
	 { (char *)"randVecBoxed", _wrap_randVecBoxed, METH_VARARGS, (char *)"randVecBoxed() -> Vec"},
	 { (char *)"seed", _wrap_seed, METH_VARARGS, (char *)"\n"
		"seed(unsigned int n) -> unsigned int\n"
		"seed() -> unsigned int\n"
		""},
	 { (char *)"new_gaussVec", _wrap_new_gaussVec, METH_VARARGS, (char *)"new_gaussVec(double sigma) -> gaussVec"},
	 { (char *)"gaussVec_set", _wrap_gaussVec_set, METH_VARARGS, (char *)"gaussVec_set(gaussVec self, double sigma)"},
	 { (char *)"gaussVec_generate", _wrap_gaussVec_generate, METH_VARARGS, (char *)"gaussVec_generate(gaussVec self) -> Vec"},
	 { (char *)"delete_gaussVec", _wrap_delete_gaussVec, METH_VARARGS, (char *)"delete_gaussVec(gaussVec self)"},
	 { (char *)"gaussVec_swigregister", gaussVec_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_bivariateGauss", _wrap_new_bivariateGauss, METH_VARARGS, (char *)"\n"
		"bivariateGauss(double const s1=1, double const s2=1, double const corr=0)\n"
		"bivariateGauss(double const s1=1, double const s2=1)\n"
		"bivariateGauss(double const s1=1)\n"
		"new_bivariateGauss() -> bivariateGauss\n"
		""},
	 { (char *)"bivariateGauss_set", _wrap_bivariateGauss_set, METH_VARARGS, (char *)"bivariateGauss_set(bivariateGauss self, double const s1, double const s2, double const corr)"},
	 { (char *)"bivariateGauss_generate", _wrap_bivariateGauss_generate, METH_VARARGS, (char *)"bivariateGauss_generate(bivariateGauss self) -> _Numvector2"},
	 { (char *)"bivariateGauss_genVec", _wrap_bivariateGauss_genVec, METH_VARARGS, (char *)"bivariateGauss_genVec(bivariateGauss self) -> Vec"},
	 { (char *)"bivariateGauss_genVecs", _wrap_bivariateGauss_genVecs, METH_VARARGS, (char *)"bivariateGauss_genVecs(bivariateGauss self) -> VecPair"},
	 { (char *)"delete_bivariateGauss", _wrap_delete_bivariateGauss, METH_VARARGS, (char *)"delete_bivariateGauss(bivariateGauss self)"},
	 { (char *)"bivariateGauss_swigregister", bivariateGauss_swigregister, METH_VARARGS, NULL},
	 { (char *)"Box_diff", _wrap_Box_diff, METH_VARARGS, (char *)"Box_diff(Box self, Vec r1, Vec r2) -> Vec"},
	 { (char *)"Box_V", _wrap_Box_V, METH_VARARGS, (char *)"Box_V(Box self) -> flt"},
	 { (char *)"delete_Box", _wrap_delete_Box, METH_VARARGS, (char *)"delete_Box(Box self)"},
	 { (char *)"Box_swigregister", Box_swigregister, METH_VARARGS, NULL},
	 { (char *)"interaction_energy", _wrap_interaction_energy, METH_VARARGS, (char *)"interaction_energy(interaction self, Box box) -> flt"},
	 { (char *)"interaction_setForces", _wrap_interaction_setForces, METH_VARARGS, (char *)"interaction_setForces(interaction self, Box box)"},
	 { (char *)"interaction_setForcesGetPressure", _wrap_interaction_setForcesGetPressure, METH_VARARGS, (char *)"interaction_setForcesGetPressure(interaction self, Box box) -> flt"},
	 { (char *)"interaction_pressure", _wrap_interaction_pressure, METH_VARARGS, (char *)"interaction_pressure(interaction self, Box box) -> flt"},
	 { (char *)"delete_interaction", _wrap_delete_interaction, METH_VARARGS, (char *)"delete_interaction(interaction self)"},
	 { (char *)"interaction_swigregister", interaction_swigregister, METH_VARARGS, NULL},
	 { (char *)"statetracker_update", _wrap_statetracker_update, METH_VARARGS, (char *)"statetracker_update(statetracker self, Box box)"},
	 { (char *)"delete_statetracker", _wrap_delete_statetracker, METH_VARARGS, (char *)"delete_statetracker(statetracker self)"},
	 { (char *)"statetracker_swigregister", statetracker_swigregister, METH_VARARGS, NULL},
	 { (char *)"vecmod", _wrap_vecmod, METH_VARARGS, (char *)"vecmod(Vec r1, Vec r2) -> Vec"},
	 { (char *)"InfiniteBox_diff", _wrap_InfiniteBox_diff, METH_VARARGS, (char *)"InfiniteBox_diff(InfiniteBox self, Vec r1, Vec r2) -> Vec"},
	 { (char *)"InfiniteBox_V", _wrap_InfiniteBox_V, METH_VARARGS, (char *)"InfiniteBox_V(InfiniteBox self) -> flt"},
	 { (char *)"new_InfiniteBox", _wrap_new_InfiniteBox, METH_VARARGS, (char *)"new_InfiniteBox() -> InfiniteBox"},
	 { (char *)"delete_InfiniteBox", _wrap_delete_InfiniteBox, METH_VARARGS, (char *)"delete_InfiniteBox(InfiniteBox self)"},
	 { (char *)"InfiniteBox_swigregister", InfiniteBox_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OriginBox", _wrap_new_OriginBox, METH_VARARGS, (char *)"new_OriginBox(Vec size) -> OriginBox"},
	 { (char *)"OriginBox_diff", _wrap_OriginBox_diff, METH_VARARGS, (char *)"OriginBox_diff(OriginBox self, Vec r1, Vec r2) -> Vec"},
	 { (char *)"OriginBox_V", _wrap_OriginBox_V, METH_VARARGS, (char *)"OriginBox_V(OriginBox self) -> flt"},
	 { (char *)"OriginBox_L", _wrap_OriginBox_L, METH_VARARGS, (char *)"OriginBox_L(OriginBox self) -> flt"},
	 { (char *)"OriginBox_resize", _wrap_OriginBox_resize, METH_VARARGS, (char *)"OriginBox_resize(OriginBox self, flt factor) -> flt"},
	 { (char *)"OriginBox_resizeV", _wrap_OriginBox_resizeV, METH_VARARGS, (char *)"OriginBox_resizeV(OriginBox self, flt newV) -> flt"},
	 { (char *)"OriginBox_randLoc", _wrap_OriginBox_randLoc, METH_VARARGS, (char *)"OriginBox_randLoc(OriginBox self) -> Vec"},
	 { (char *)"delete_OriginBox", _wrap_delete_OriginBox, METH_VARARGS, (char *)"delete_OriginBox(OriginBox self)"},
	 { (char *)"OriginBox_swigregister", OriginBox_swigregister, METH_VARARGS, NULL},
	 { (char *)"atom_x_set", _wrap_atom_x_set, METH_VARARGS, (char *)"atom_x_set(atom self, Vec x)"},
	 { (char *)"atom_x_get", _wrap_atom_x_get, METH_VARARGS, (char *)"atom_x_get(atom self) -> Vec"},
	 { (char *)"atom_v_set", _wrap_atom_v_set, METH_VARARGS, (char *)"atom_v_set(atom self, Vec v)"},
	 { (char *)"atom_v_get", _wrap_atom_v_get, METH_VARARGS, (char *)"atom_v_get(atom self) -> Vec"},
	 { (char *)"atom_a_set", _wrap_atom_a_set, METH_VARARGS, (char *)"atom_a_set(atom self, Vec a)"},
	 { (char *)"atom_a_get", _wrap_atom_a_get, METH_VARARGS, (char *)"atom_a_get(atom self) -> Vec"},
	 { (char *)"atom_f_set", _wrap_atom_f_set, METH_VARARGS, (char *)"atom_f_set(atom self, Vec f)"},
	 { (char *)"atom_f_get", _wrap_atom_f_get, METH_VARARGS, (char *)"atom_f_get(atom self) -> Vec"},
	 { (char *)"atom_m_set", _wrap_atom_m_set, METH_VARARGS, (char *)"atom_m_set(atom self, flt m)"},
	 { (char *)"atom_m_get", _wrap_atom_m_get, METH_VARARGS, (char *)"atom_m_get(atom self) -> flt"},
	 { (char *)"new_atom", _wrap_new_atom, METH_VARARGS, (char *)"new_atom() -> atom"},
	 { (char *)"delete_atom", _wrap_delete_atom, METH_VARARGS, (char *)"delete_atom(atom self)"},
	 { (char *)"atom_swigregister", atom_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_atomref", _wrap_new_atomref, METH_VARARGS, (char *)"\n"
		"atomref()\n"
		"new_atomref(atom a) -> atomref\n"
		""},
	 { (char *)"atomref___ref__", _wrap_atomref___ref__, METH_VARARGS, (char *)"atomref___ref__(atomref self) -> atom"},
	 { (char *)"atomref_pointer", _wrap_atomref_pointer, METH_VARARGS, (char *)"atomref_pointer(atomref self) -> atom"},
	 { (char *)"atomref_x", _wrap_atomref_x, METH_VARARGS, (char *)"atomref_x(atomref self) -> Vec"},
	 { (char *)"atomref_v", _wrap_atomref_v, METH_VARARGS, (char *)"atomref_v(atomref self) -> Vec"},
	 { (char *)"atomref_f", _wrap_atomref_f, METH_VARARGS, (char *)"atomref_f(atomref self) -> Vec"},
	 { (char *)"atomref_a", _wrap_atomref_a, METH_VARARGS, (char *)"atomref_a(atomref self) -> Vec"},
	 { (char *)"atomref_m", _wrap_atomref_m, METH_VARARGS, (char *)"atomref_m(atomref self) -> flt &"},
	 { (char *)"atomref___eq__", _wrap_atomref___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(atomref other) -> bool\n"
		"atomref___eq__(atomref self, atom other) -> bool\n"
		""},
	 { (char *)"atomref___ne__", _wrap_atomref___ne__, METH_VARARGS, (char *)"atomref___ne__(atomref self, atomref other) -> bool"},
	 { (char *)"atomref___lt__", _wrap_atomref___lt__, METH_VARARGS, (char *)"atomref___lt__(atomref self, atomref other) -> bool"},
	 { (char *)"atomref___le__", _wrap_atomref___le__, METH_VARARGS, (char *)"atomref___le__(atomref self, atomref other) -> bool"},
	 { (char *)"atomref___ge__", _wrap_atomref___ge__, METH_VARARGS, (char *)"atomref___ge__(atomref self, atomref other) -> bool"},
	 { (char *)"atomref___gt__", _wrap_atomref___gt__, METH_VARARGS, (char *)"atomref___gt__(atomref self, atomref other) -> bool"},
	 { (char *)"delete_atomref", _wrap_delete_atomref, METH_VARARGS, (char *)"delete_atomref(atomref self)"},
	 { (char *)"atomref_swigregister", atomref_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_atomid", _wrap_new_atomid, METH_VARARGS, (char *)"\n"
		"atomid()\n"
		"atomid(atom a)\n"
		"new_atomid(atom a, uint n) -> atomid\n"
		""},
	 { (char *)"atomid_n", _wrap_atomid_n, METH_VARARGS, (char *)"atomid_n(atomid self) -> uint"},
	 { (char *)"delete_atomid", _wrap_delete_atomid, METH_VARARGS, (char *)"delete_atomid(atomid self)"},
	 { (char *)"atomid_swigregister", atomid_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_idpair", _wrap_new_idpair, METH_VARARGS, (char *)"new_idpair(atomid a, atomid b) -> idpair"},
	 { (char *)"idpair_first", _wrap_idpair_first, METH_VARARGS, (char *)"idpair_first(idpair self) -> atomid"},
	 { (char *)"idpair_last", _wrap_idpair_last, METH_VARARGS, (char *)"idpair_last(idpair self) -> atomid"},
	 { (char *)"delete_idpair", _wrap_delete_idpair, METH_VARARGS, (char *)"delete_idpair(idpair self)"},
	 { (char *)"idpair_swigregister", idpair_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_atompair", _wrap_new_atompair, METH_VARARGS, (char *)"new_atompair(atom a, atom b) -> atompair"},
	 { (char *)"atompair_first", _wrap_atompair_first, METH_VARARGS, (char *)"atompair_first(atompair self) -> atom"},
	 { (char *)"atompair_last", _wrap_atompair_last, METH_VARARGS, (char *)"atompair_last(atompair self) -> atom"},
	 { (char *)"delete_atompair", _wrap_delete_atompair, METH_VARARGS, (char *)"delete_atompair(atompair self)"},
	 { (char *)"atompair_swigregister", atompair_swigregister, METH_VARARGS, NULL},
	 { (char *)"atomgroup_get", _wrap_atomgroup_get, METH_VARARGS, (char *)"atomgroup_get(atomgroup self, cuint n) -> atom"},
	 { (char *)"atomgroup_get_id", _wrap_atomgroup_get_id, METH_VARARGS, (char *)"atomgroup_get_id(atomgroup self, cuint n) -> atomid"},
	 { (char *)"atomgroup_size", _wrap_atomgroup_size, METH_VARARGS, (char *)"atomgroup_size(atomgroup self) -> uint"},
	 { (char *)"atomgroup_getmass", _wrap_atomgroup_getmass, METH_VARARGS, (char *)"atomgroup_getmass(atomgroup self, unsigned int const n) -> flt"},
	 { (char *)"atomgroup_com", _wrap_atomgroup_com, METH_VARARGS, (char *)"atomgroup_com(atomgroup self) -> Vec"},
	 { (char *)"atomgroup_comv", _wrap_atomgroup_comv, METH_VARARGS, (char *)"atomgroup_comv(atomgroup self) -> Vec"},
	 { (char *)"atomgroup_mass", _wrap_atomgroup_mass, METH_VARARGS, (char *)"atomgroup_mass(atomgroup self) -> flt"},
	 { (char *)"atomgroup_kinetic", _wrap_atomgroup_kinetic, METH_VARARGS, (char *)"\n"
		"kinetic(Vec originvelocity=Vec()) -> flt\n"
		"atomgroup_kinetic(atomgroup self) -> flt\n"
		""},
	 { (char *)"atomgroup_momentum", _wrap_atomgroup_momentum, METH_VARARGS, (char *)"atomgroup_momentum(atomgroup self) -> Vec"},
	 { (char *)"atomgroup_moment", _wrap_atomgroup_moment, METH_VARARGS, (char *)"atomgroup_moment(atomgroup self, Vec loc, Box box) -> flt"},
	 { (char *)"atomgroup_angmomentum", _wrap_atomgroup_angmomentum, METH_VARARGS, (char *)"atomgroup_angmomentum(atomgroup self, Vec loc, Box box) -> flt"},
	 { (char *)"atomgroup_omega", _wrap_atomgroup_omega, METH_VARARGS, (char *)"atomgroup_omega(atomgroup self, Vec loc, Box box) -> flt"},
	 { (char *)"atomgroup_addOmega", _wrap_atomgroup_addOmega, METH_VARARGS, (char *)"atomgroup_addOmega(atomgroup self, flt w, Vec origin, Box box)"},
	 { (char *)"atomgroup_resetL", _wrap_atomgroup_resetL, METH_VARARGS, (char *)"atomgroup_resetL(atomgroup self, Box box)"},
	 { (char *)"atomgroup_addv", _wrap_atomgroup_addv, METH_VARARGS, (char *)"atomgroup_addv(atomgroup self, Vec v)"},
	 { (char *)"atomgroup_resetcomv", _wrap_atomgroup_resetcomv, METH_VARARGS, (char *)"atomgroup_resetcomv(atomgroup self)"},
	 { (char *)"atomgroup_resetForces", _wrap_atomgroup_resetForces, METH_VARARGS, (char *)"atomgroup_resetForces(atomgroup self)"},
	 { (char *)"atomgroup_setAccel", _wrap_atomgroup_setAccel, METH_VARARGS, (char *)"atomgroup_setAccel(atomgroup self)"},
	 { (char *)"delete_atomgroup", _wrap_delete_atomgroup, METH_VARARGS, (char *)"delete_atomgroup(atomgroup self)"},
	 { (char *)"atomgroup_swigregister", atomgroup_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_atomvec", _wrap_new_atomvec, METH_VARARGS, (char *)"\n"
		"atomvec(fvector masses)\n"
		"new_atomvec(atomvec other) -> atomvec\n"
		""},
	 { (char *)"atomvec_get_id", _wrap_atomvec_get_id, METH_VARARGS, (char *)"\n"
		"get_id(atom a) -> atomid\n"
		"atomvec_get_id(atomvec self, uint n) -> atomid\n"
		""},
	 { (char *)"atomvec_size", _wrap_atomvec_size, METH_VARARGS, (char *)"atomvec_size(atomvec self) -> uint"},
	 { (char *)"delete_atomvec", _wrap_delete_atomvec, METH_VARARGS, (char *)"delete_atomvec(atomvec self)"},
	 { (char *)"atomvec_swigregister", atomvec_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_metagroup", _wrap_new_metagroup, METH_VARARGS, (char *)"\n"
		"metagroup()\n"
		"new_metagroup(avector arg1) -> metagroup\n"
		""},
	 { (char *)"metagroup_get", _wrap_metagroup_get, METH_VARARGS, (char *)"metagroup_get(metagroup self, cuint n) -> atom"},
	 { (char *)"metagroup_add", _wrap_metagroup_add, METH_VARARGS, (char *)"metagroup_add(metagroup self, atom a)"},
	 { (char *)"metagroup_get_id", _wrap_metagroup_get_id, METH_VARARGS, (char *)"\n"
		"get_id(atom a) -> atomid\n"
		"metagroup_get_id(metagroup self, uint n) -> atomid\n"
		""},
	 { (char *)"metagroup_size", _wrap_metagroup_size, METH_VARARGS, (char *)"metagroup_size(metagroup self) -> uint"},
	 { (char *)"delete_metagroup", _wrap_delete_metagroup, METH_VARARGS, (char *)"delete_metagroup(metagroup self)"},
	 { (char *)"metagroup_swigregister", metagroup_swigregister, METH_VARARGS, NULL},
	 { (char *)"interactpair_energy", _wrap_interactpair_energy, METH_VARARGS, (char *)"interactpair_energy(interactpair self, Vec diff) -> flt"},
	 { (char *)"interactpair_forces", _wrap_interactpair_forces, METH_VARARGS, (char *)"interactpair_forces(interactpair self, Vec diff) -> Vec"},
	 { (char *)"delete_interactpair", _wrap_delete_interactpair, METH_VARARGS, (char *)"delete_interactpair(interactpair self)"},
	 { (char *)"interactpair_swigregister", interactpair_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LJrepulsive", _wrap_new_LJrepulsive, METH_VARARGS, (char *)"new_LJrepulsive(flt const epsilon, flt const sigma) -> LJrepulsive"},
	 { (char *)"LJrepulsive_energy", _wrap_LJrepulsive_energy, METH_VARARGS, (char *)"\n"
		"energy(Vec diff, flt const eps, flt const sig) -> flt\n"
		"LJrepulsive_energy(LJrepulsive self, Vec diff) -> flt\n"
		""},
	 { (char *)"LJrepulsive_forces", _wrap_LJrepulsive_forces, METH_VARARGS, (char *)"\n"
		"forces(Vec diff, flt const eps, flt const sig) -> Vec\n"
		"LJrepulsive_forces(LJrepulsive self, Vec diff) -> Vec\n"
		""},
	 { (char *)"delete_LJrepulsive", _wrap_delete_LJrepulsive, METH_VARARGS, (char *)"delete_LJrepulsive(LJrepulsive self)"},
	 { (char *)"LJrepulsive_swigregister", LJrepulsive_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LJattract", _wrap_new_LJattract, METH_VARARGS, (char *)"new_LJattract(flt const epsilon, flt const sigma) -> LJattract"},
	 { (char *)"LJattract_energy", _wrap_LJattract_energy, METH_VARARGS, (char *)"\n"
		"energy(Vec diff, flt const eps, flt const sig) -> flt\n"
		"energy(flt const rsig) -> flt\n"
		"LJattract_energy(LJattract self, Vec diff) -> flt\n"
		""},
	 { (char *)"LJattract_forces", _wrap_LJattract_forces, METH_VARARGS, (char *)"\n"
		"forces(Vec diff, flt const eps, flt const sig) -> Vec\n"
		"forces(flt const rsig) -> flt\n"
		"LJattract_forces(LJattract self, Vec diff) -> Vec\n"
		""},
	 { (char *)"delete_LJattract", _wrap_delete_LJattract, METH_VARARGS, (char *)"delete_LJattract(LJattract self)"},
	 { (char *)"LJattract_swigregister", LJattract_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LJattractCut", _wrap_new_LJattractCut, METH_VARARGS, (char *)"new_LJattractCut(flt const epsilon, flt const sigma, flt const cutsig) -> LJattractCut"},
	 { (char *)"LJattractCut_energy", _wrap_LJattractCut_energy, METH_VARARGS, (char *)"\n"
		"energy(Vec diff, flt const eps, flt const sig, flt const cutsig) -> flt\n"
		"LJattractCut_energy(LJattractCut self, Vec diff) -> flt\n"
		""},
	 { (char *)"LJattractCut_forces", _wrap_LJattractCut_forces, METH_VARARGS, (char *)"\n"
		"forces(Vec diff, flt const eps, flt const sig, flt const cutsig) -> Vec\n"
		"LJattractCut_forces(LJattractCut self, Vec diff) -> Vec\n"
		""},
	 { (char *)"delete_LJattractCut", _wrap_delete_LJattractCut, METH_VARARGS, (char *)"delete_LJattractCut(LJattractCut self)"},
	 { (char *)"LJattractCut_swigregister", LJattractCut_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LJFullCut", _wrap_new_LJFullCut, METH_VARARGS, (char *)"new_LJFullCut(flt const epsilon, flt const sigma, flt const cutsig) -> LJFullCut"},
	 { (char *)"LJFullCut_energy", _wrap_LJFullCut_energy, METH_VARARGS, (char *)"\n"
		"energy(Vec diff, flt const eps, flt const sig, flt const cutsig) -> flt\n"
		"energy(flt const rsig, flt const cutsig) -> flt\n"
		"LJFullCut_energy(LJFullCut self, Vec diff) -> flt\n"
		""},
	 { (char *)"LJFullCut_forces", _wrap_LJFullCut_forces, METH_VARARGS, (char *)"\n"
		"forces(Vec diff, flt const eps, flt const sig, flt const cutsig) -> Vec\n"
		"forces(flt const rsig, flt const cutsig) -> flt\n"
		"LJFullCut_forces(LJFullCut self, Vec diff) -> Vec\n"
		""},
	 { (char *)"delete_LJFullCut", _wrap_delete_LJFullCut, METH_VARARGS, (char *)"delete_LJFullCut(LJFullCut self)"},
	 { (char *)"LJFullCut_swigregister", LJFullCut_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_spring", _wrap_new_spring, METH_VARARGS, (char *)"new_spring(flt const k, flt const x0) -> spring"},
	 { (char *)"spring_energy", _wrap_spring_energy, METH_VARARGS, (char *)"spring_energy(spring self, Vec diff) -> flt"},
	 { (char *)"spring_forces", _wrap_spring_forces, METH_VARARGS, (char *)"spring_forces(spring self, Vec diff) -> Vec"},
	 { (char *)"delete_spring", _wrap_delete_spring, METH_VARARGS, (char *)"delete_spring(spring self)"},
	 { (char *)"spring_swigregister", spring_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_bondangle", _wrap_new_bondangle, METH_VARARGS, (char *)"\n"
		"bondangle(flt const k, flt const theta, bool const cosine=False)\n"
		"new_bondangle(flt const k, flt const theta) -> bondangle\n"
		""},
	 { (char *)"bondangle_energy", _wrap_bondangle_energy, METH_VARARGS, (char *)"bondangle_energy(bondangle self, Vec diff1, Vec diff2) -> flt"},
	 { (char *)"bondangle_forces", _wrap_bondangle_forces, METH_VARARGS, (char *)"bondangle_forces(bondangle self, Vec diff1, Vec diff2) -> Nvector< Vec,3 >"},
	 { (char *)"delete_bondangle", _wrap_delete_bondangle, METH_VARARGS, (char *)"delete_bondangle(bondangle self)"},
	 { (char *)"bondangle_swigregister", bondangle_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_electricScreened", _wrap_new_electricScreened, METH_VARARGS, (char *)"new_electricScreened(flt const screenLength, flt const q1, flt const q2, flt const cutoff) -> electricScreened"},
	 { (char *)"electricScreened_energy", _wrap_electricScreened_energy, METH_VARARGS, (char *)"\n"
		"energy(Vec r) -> flt\n"
		"energy(flt const r, flt const qaqb, flt const screen, flt const cutoff=0) -> flt\n"
		"electricScreened_energy(flt const r, flt const qaqb, flt const screen) -> flt\n"
		""},
	 { (char *)"electricScreened_forces", _wrap_electricScreened_forces, METH_VARARGS, (char *)"\n"
		"forces(Vec r) -> Vec\n"
		"forces(Vec r, flt const qaqb, flt const screen, flt const cutoff=0) -> Vec\n"
		"electricScreened_forces(Vec r, flt const qaqb, flt const screen) -> Vec\n"
		""},
	 { (char *)"delete_electricScreened", _wrap_delete_electricScreened, METH_VARARGS, (char *)"delete_electricScreened(electricScreened self)"},
	 { (char *)"electricScreened_swigregister", electricScreened_swigregister, METH_VARARGS, NULL},
	 { (char *)"fixedForceAtom_F_set", _wrap_fixedForceAtom_F_set, METH_VARARGS, (char *)"fixedForceAtom_F_set(fixedForceAtom self, Vec F)"},
	 { (char *)"fixedForceAtom_F_get", _wrap_fixedForceAtom_F_get, METH_VARARGS, (char *)"fixedForceAtom_F_get(fixedForceAtom self) -> Vec"},
	 { (char *)"fixedForceAtom_a_set", _wrap_fixedForceAtom_a_set, METH_VARARGS, (char *)"fixedForceAtom_a_set(fixedForceAtom self, atom a)"},
	 { (char *)"fixedForceAtom_a_get", _wrap_fixedForceAtom_a_get, METH_VARARGS, (char *)"fixedForceAtom_a_get(fixedForceAtom self) -> atom"},
	 { (char *)"new_fixedForceAtom", _wrap_new_fixedForceAtom, METH_VARARGS, (char *)"new_fixedForceAtom(Vec F, atom a) -> fixedForceAtom"},
	 { (char *)"fixedForceAtom_energy", _wrap_fixedForceAtom_energy, METH_VARARGS, (char *)"fixedForceAtom_energy(fixedForceAtom self, Box box) -> flt"},
	 { (char *)"fixedForceAtom_setForce", _wrap_fixedForceAtom_setForce, METH_VARARGS, (char *)"fixedForceAtom_setForce(fixedForceAtom self, Box box)"},
	 { (char *)"delete_fixedForceAtom", _wrap_delete_fixedForceAtom, METH_VARARGS, (char *)"delete_fixedForceAtom(fixedForceAtom self)"},
	 { (char *)"fixedForceAtom_swigregister", fixedForceAtom_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_fixedForce", _wrap_new_fixedForce, METH_VARARGS, (char *)"\n"
		"fixedForce(std::vector< fixedForceAtom > atoms=std::vector< fixedForceAtom >())\n"
		"new_fixedForce() -> fixedForce\n"
		""},
	 { (char *)"fixedForce_add", _wrap_fixedForce_add, METH_VARARGS, (char *)"\n"
		"add(fixedForceAtom a)\n"
		"add(Vec F, atom a)\n"
		"fixedForce_add(fixedForce self, flt x, flt y, atom a)\n"
		""},
	 { (char *)"fixedForce_size", _wrap_fixedForce_size, METH_VARARGS, (char *)"fixedForce_size(fixedForce self) -> uint"},
	 { (char *)"fixedForce_energy", _wrap_fixedForce_energy, METH_VARARGS, (char *)"fixedForce_energy(fixedForce self, Box box) -> flt"},
	 { (char *)"fixedForce_setForces", _wrap_fixedForce_setForces, METH_VARARGS, (char *)"fixedForce_setForces(fixedForce self, Box box)"},
	 { (char *)"fixedForce_pressure", _wrap_fixedForce_pressure, METH_VARARGS, (char *)"fixedForce_pressure(fixedForce self, Box box) -> flt"},
	 { (char *)"delete_fixedForce", _wrap_delete_fixedForce, METH_VARARGS, (char *)"delete_fixedForce(fixedForce self)"},
	 { (char *)"fixedForce_swigregister", fixedForce_swigregister, METH_VARARGS, NULL},
	 { (char *)"fixedSpringAtom_loc_set", _wrap_fixedSpringAtom_loc_set, METH_VARARGS, (char *)"fixedSpringAtom_loc_set(fixedSpringAtom self, Vec loc)"},
	 { (char *)"fixedSpringAtom_loc_get", _wrap_fixedSpringAtom_loc_get, METH_VARARGS, (char *)"fixedSpringAtom_loc_get(fixedSpringAtom self) -> Vec"},
	 { (char *)"fixedSpringAtom_k_set", _wrap_fixedSpringAtom_k_set, METH_VARARGS, (char *)"fixedSpringAtom_k_set(fixedSpringAtom self, flt k)"},
	 { (char *)"fixedSpringAtom_k_get", _wrap_fixedSpringAtom_k_get, METH_VARARGS, (char *)"fixedSpringAtom_k_get(fixedSpringAtom self) -> flt"},
	 { (char *)"fixedSpringAtom_usecoord_set", _wrap_fixedSpringAtom_usecoord_set, METH_VARARGS, (char *)"fixedSpringAtom_usecoord_set(fixedSpringAtom self, bool [3] usecoord)"},
	 { (char *)"fixedSpringAtom_usecoord_get", _wrap_fixedSpringAtom_usecoord_get, METH_VARARGS, (char *)"fixedSpringAtom_usecoord_get(fixedSpringAtom self) -> bool [3]"},
	 { (char *)"fixedSpringAtom_a_set", _wrap_fixedSpringAtom_a_set, METH_VARARGS, (char *)"fixedSpringAtom_a_set(fixedSpringAtom self, atom a)"},
	 { (char *)"fixedSpringAtom_a_get", _wrap_fixedSpringAtom_a_get, METH_VARARGS, (char *)"fixedSpringAtom_a_get(fixedSpringAtom self) -> atom"},
	 { (char *)"new_fixedSpringAtom", _wrap_new_fixedSpringAtom, METH_VARARGS, (char *)"\n"
		"fixedSpringAtom(atom a, Vec loc, flt k, bool usex=True, bool usey=True, bool usez=True)\n"
		"fixedSpringAtom(atom a, Vec loc, flt k, bool usex=True, bool usey=True)\n"
		"fixedSpringAtom(atom a, Vec loc, flt k, bool usex=True)\n"
		"new_fixedSpringAtom(atom a, Vec loc, flt k) -> fixedSpringAtom\n"
		""},
	 { (char *)"fixedSpringAtom_energy", _wrap_fixedSpringAtom_energy, METH_VARARGS, (char *)"fixedSpringAtom_energy(fixedSpringAtom self, Box box) -> flt"},
	 { (char *)"fixedSpringAtom_setForce", _wrap_fixedSpringAtom_setForce, METH_VARARGS, (char *)"fixedSpringAtom_setForce(fixedSpringAtom self, Box box)"},
	 { (char *)"delete_fixedSpringAtom", _wrap_delete_fixedSpringAtom, METH_VARARGS, (char *)"delete_fixedSpringAtom(fixedSpringAtom self)"},
	 { (char *)"fixedSpringAtom_swigregister", fixedSpringAtom_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_fixedSpring", _wrap_new_fixedSpring, METH_VARARGS, (char *)"\n"
		"fixedSpring(std::vector< fixedSpringAtom > atoms=std::vector< fixedSpringAtom >())\n"
		"new_fixedSpring() -> fixedSpring\n"
		""},
	 { (char *)"fixedSpring_add", _wrap_fixedSpring_add, METH_VARARGS, (char *)"\n"
		"add(fixedSpringAtom a)\n"
		"add(atom a, Vec loc, flt k, bool usex=True, bool usey=True, bool usez=True)\n"
		"add(atom a, Vec loc, flt k, bool usex=True, bool usey=True)\n"
		"add(atom a, Vec loc, flt k, bool usex=True)\n"
		"fixedSpring_add(fixedSpring self, atom a, Vec loc, flt k)\n"
		""},
	 { (char *)"fixedSpring_size", _wrap_fixedSpring_size, METH_VARARGS, (char *)"fixedSpring_size(fixedSpring self) -> uint"},
	 { (char *)"fixedSpring_energy", _wrap_fixedSpring_energy, METH_VARARGS, (char *)"fixedSpring_energy(fixedSpring self, Box box) -> flt"},
	 { (char *)"fixedSpring_setForces", _wrap_fixedSpring_setForces, METH_VARARGS, (char *)"fixedSpring_setForces(fixedSpring self, Box box)"},
	 { (char *)"fixedSpring_pressure", _wrap_fixedSpring_pressure, METH_VARARGS, (char *)"fixedSpring_pressure(fixedSpring self, Box box) -> flt"},
	 { (char *)"delete_fixedSpring", _wrap_delete_fixedSpring, METH_VARARGS, (char *)"delete_fixedSpring(fixedSpring self)"},
	 { (char *)"fixedSpring_swigregister", fixedSpring_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_COMSpring", _wrap_new_COMSpring, METH_VARARGS, (char *)"\n"
		"COMSpring(atomgroup g1, atomgroup g2, flt k, flt x0=0)\n"
		"new_COMSpring(atomgroup g1, atomgroup g2, flt k) -> COMSpring\n"
		""},
	 { (char *)"COMSpring_energy", _wrap_COMSpring_energy, METH_VARARGS, (char *)"COMSpring_energy(COMSpring self, Box box) -> flt"},
	 { (char *)"COMSpring_setForces", _wrap_COMSpring_setForces, METH_VARARGS, (char *)"COMSpring_setForces(COMSpring self, Box box)"},
	 { (char *)"COMSpring_pressure", _wrap_COMSpring_pressure, METH_VARARGS, (char *)"COMSpring_pressure(COMSpring self, Box box) -> flt"},
	 { (char *)"delete_COMSpring", _wrap_delete_COMSpring, METH_VARARGS, (char *)"delete_COMSpring(COMSpring self)"},
	 { (char *)"COMSpring_swigregister", COMSpring_swigregister, METH_VARARGS, NULL},
	 { (char *)"bondgrouping_k_set", _wrap_bondgrouping_k_set, METH_VARARGS, (char *)"bondgrouping_k_set(bondgrouping self, flt k)"},
	 { (char *)"bondgrouping_k_get", _wrap_bondgrouping_k_get, METH_VARARGS, (char *)"bondgrouping_k_get(bondgrouping self) -> flt"},
	 { (char *)"bondgrouping_x0_set", _wrap_bondgrouping_x0_set, METH_VARARGS, (char *)"bondgrouping_x0_set(bondgrouping self, flt x0)"},
	 { (char *)"bondgrouping_x0_get", _wrap_bondgrouping_x0_get, METH_VARARGS, (char *)"bondgrouping_x0_get(bondgrouping self) -> flt"},
	 { (char *)"bondgrouping_a1_set", _wrap_bondgrouping_a1_set, METH_VARARGS, (char *)"bondgrouping_a1_set(bondgrouping self, atom a1)"},
	 { (char *)"bondgrouping_a1_get", _wrap_bondgrouping_a1_get, METH_VARARGS, (char *)"bondgrouping_a1_get(bondgrouping self) -> atom"},
	 { (char *)"bondgrouping_a2_set", _wrap_bondgrouping_a2_set, METH_VARARGS, (char *)"bondgrouping_a2_set(bondgrouping self, atom a2)"},
	 { (char *)"bondgrouping_a2_get", _wrap_bondgrouping_a2_get, METH_VARARGS, (char *)"bondgrouping_a2_get(bondgrouping self) -> atom"},
	 { (char *)"new_bondgrouping", _wrap_new_bondgrouping, METH_VARARGS, (char *)"new_bondgrouping(flt k, flt x0, atom a1, atom a2) -> bondgrouping"},
	 { (char *)"delete_bondgrouping", _wrap_delete_bondgrouping, METH_VARARGS, (char *)"delete_bondgrouping(bondgrouping self)"},
	 { (char *)"bondgrouping_swigregister", bondgrouping_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_bondpairs", _wrap_new_bondpairs, METH_VARARGS, (char *)"\n"
		"bondpairs(std::vector< bondgrouping > pairs=std::vector< bondgrouping >())\n"
		"new_bondpairs() -> bondpairs\n"
		""},
	 { (char *)"bondpairs_add", _wrap_bondpairs_add, METH_VARARGS, (char *)"\n"
		"add(bondgrouping b)\n"
		"bondpairs_add(bondpairs self, flt k, flt x0, atom a1, atom a2)\n"
		""},
	 { (char *)"bondpairs_size", _wrap_bondpairs_size, METH_VARARGS, (char *)"bondpairs_size(bondpairs self) -> uint"},
	 { (char *)"bondpairs_mean_dists", _wrap_bondpairs_mean_dists, METH_VARARGS, (char *)"bondpairs_mean_dists(bondpairs self) -> flt"},
	 { (char *)"bondpairs_std_dists", _wrap_bondpairs_std_dists, METH_VARARGS, (char *)"bondpairs_std_dists(bondpairs self) -> flt"},
	 { (char *)"bondpairs_energy", _wrap_bondpairs_energy, METH_VARARGS, (char *)"bondpairs_energy(bondpairs self, Box box) -> flt"},
	 { (char *)"bondpairs_setForces", _wrap_bondpairs_setForces, METH_VARARGS, (char *)"bondpairs_setForces(bondpairs self, Box box)"},
	 { (char *)"bondpairs_pressure", _wrap_bondpairs_pressure, METH_VARARGS, (char *)"bondpairs_pressure(bondpairs self, Box box) -> flt"},
	 { (char *)"delete_bondpairs", _wrap_delete_bondpairs, METH_VARARGS, (char *)"delete_bondpairs(bondpairs self)"},
	 { (char *)"bondpairs_swigregister", bondpairs_swigregister, METH_VARARGS, NULL},
	 { (char *)"anglegrouping_k_set", _wrap_anglegrouping_k_set, METH_VARARGS, (char *)"anglegrouping_k_set(anglegrouping self, flt k)"},
	 { (char *)"anglegrouping_k_get", _wrap_anglegrouping_k_get, METH_VARARGS, (char *)"anglegrouping_k_get(anglegrouping self) -> flt"},
	 { (char *)"anglegrouping_x0_set", _wrap_anglegrouping_x0_set, METH_VARARGS, (char *)"anglegrouping_x0_set(anglegrouping self, flt x0)"},
	 { (char *)"anglegrouping_x0_get", _wrap_anglegrouping_x0_get, METH_VARARGS, (char *)"anglegrouping_x0_get(anglegrouping self) -> flt"},
	 { (char *)"anglegrouping_a1_set", _wrap_anglegrouping_a1_set, METH_VARARGS, (char *)"anglegrouping_a1_set(anglegrouping self, atom a1)"},
	 { (char *)"anglegrouping_a1_get", _wrap_anglegrouping_a1_get, METH_VARARGS, (char *)"anglegrouping_a1_get(anglegrouping self) -> atom"},
	 { (char *)"anglegrouping_a2_set", _wrap_anglegrouping_a2_set, METH_VARARGS, (char *)"anglegrouping_a2_set(anglegrouping self, atom a2)"},
	 { (char *)"anglegrouping_a2_get", _wrap_anglegrouping_a2_get, METH_VARARGS, (char *)"anglegrouping_a2_get(anglegrouping self) -> atom"},
	 { (char *)"anglegrouping_a3_set", _wrap_anglegrouping_a3_set, METH_VARARGS, (char *)"anglegrouping_a3_set(anglegrouping self, atom a3)"},
	 { (char *)"anglegrouping_a3_get", _wrap_anglegrouping_a3_get, METH_VARARGS, (char *)"anglegrouping_a3_get(anglegrouping self) -> atom"},
	 { (char *)"new_anglegrouping", _wrap_new_anglegrouping, METH_VARARGS, (char *)"new_anglegrouping(flt k, flt x0, atom a1, atom a2, atom a3) -> anglegrouping"},
	 { (char *)"delete_anglegrouping", _wrap_delete_anglegrouping, METH_VARARGS, (char *)"delete_anglegrouping(anglegrouping self)"},
	 { (char *)"anglegrouping_swigregister", anglegrouping_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_angletriples", _wrap_new_angletriples, METH_VARARGS, (char *)"\n"
		"angletriples(std::vector< anglegrouping > triples=std::vector< anglegrouping >())\n"
		"new_angletriples() -> angletriples\n"
		""},
	 { (char *)"angletriples_add", _wrap_angletriples_add, METH_VARARGS, (char *)"\n"
		"add(anglegrouping b)\n"
		"angletriples_add(angletriples self, flt k, flt x0, atom a1, atom a2, atom a3)\n"
		""},
	 { (char *)"angletriples_energy", _wrap_angletriples_energy, METH_VARARGS, (char *)"angletriples_energy(angletriples self, Box box) -> flt"},
	 { (char *)"angletriples_pressure", _wrap_angletriples_pressure, METH_VARARGS, (char *)"angletriples_pressure(angletriples self, Box box) -> flt"},
	 { (char *)"angletriples_setForces", _wrap_angletriples_setForces, METH_VARARGS, (char *)"angletriples_setForces(angletriples self, Box box)"},
	 { (char *)"angletriples_size", _wrap_angletriples_size, METH_VARARGS, (char *)"angletriples_size(angletriples self) -> uint"},
	 { (char *)"angletriples_mean_dists", _wrap_angletriples_mean_dists, METH_VARARGS, (char *)"angletriples_mean_dists(angletriples self) -> flt"},
	 { (char *)"angletriples_std_dists", _wrap_angletriples_std_dists, METH_VARARGS, (char *)"angletriples_std_dists(angletriples self) -> flt"},
	 { (char *)"delete_angletriples", _wrap_delete_angletriples, METH_VARARGS, (char *)"delete_angletriples(angletriples self)"},
	 { (char *)"angletriples_swigregister", angletriples_swigregister, METH_VARARGS, NULL},
	 { (char *)"forcepair_a1_set", _wrap_forcepair_a1_set, METH_VARARGS, (char *)"forcepair_a1_set(forcepair self, atom a1)"},
	 { (char *)"forcepair_a1_get", _wrap_forcepair_a1_get, METH_VARARGS, (char *)"forcepair_a1_get(forcepair self) -> atom"},
	 { (char *)"forcepair_a2_set", _wrap_forcepair_a2_set, METH_VARARGS, (char *)"forcepair_a2_set(forcepair self, atom a2)"},
	 { (char *)"forcepair_a2_get", _wrap_forcepair_a2_get, METH_VARARGS, (char *)"forcepair_a2_get(forcepair self) -> atom"},
	 { (char *)"forcepair_fij_set", _wrap_forcepair_fij_set, METH_VARARGS, (char *)"forcepair_fij_set(forcepair self, Vec fij)"},
	 { (char *)"forcepair_fij_get", _wrap_forcepair_fij_get, METH_VARARGS, (char *)"forcepair_fij_get(forcepair self) -> Vec"},
	 { (char *)"new_forcepair", _wrap_new_forcepair, METH_VARARGS, (char *)"new_forcepair() -> forcepair"},
	 { (char *)"delete_forcepair", _wrap_delete_forcepair, METH_VARARGS, (char *)"delete_forcepair(forcepair self)"},
	 { (char *)"forcepair_swigregister", forcepair_swigregister, METH_VARARGS, NULL},
	 { (char *)"forcepairx_a1_set", _wrap_forcepairx_a1_set, METH_VARARGS, (char *)"forcepairx_a1_set(forcepairx self, atom a1)"},
	 { (char *)"forcepairx_a1_get", _wrap_forcepairx_a1_get, METH_VARARGS, (char *)"forcepairx_a1_get(forcepairx self) -> atom"},
	 { (char *)"forcepairx_a2_set", _wrap_forcepairx_a2_set, METH_VARARGS, (char *)"forcepairx_a2_set(forcepairx self, atom a2)"},
	 { (char *)"forcepairx_a2_get", _wrap_forcepairx_a2_get, METH_VARARGS, (char *)"forcepairx_a2_get(forcepairx self) -> atom"},
	 { (char *)"forcepairx_xij_set", _wrap_forcepairx_xij_set, METH_VARARGS, (char *)"forcepairx_xij_set(forcepairx self, flt xij)"},
	 { (char *)"forcepairx_xij_get", _wrap_forcepairx_xij_get, METH_VARARGS, (char *)"forcepairx_xij_get(forcepairx self) -> flt"},
	 { (char *)"forcepairx_fij_set", _wrap_forcepairx_fij_set, METH_VARARGS, (char *)"forcepairx_fij_set(forcepairx self, Vec fij)"},
	 { (char *)"forcepairx_fij_get", _wrap_forcepairx_fij_get, METH_VARARGS, (char *)"forcepairx_fij_get(forcepairx self) -> Vec"},
	 { (char *)"new_forcepairx", _wrap_new_forcepairx, METH_VARARGS, (char *)"new_forcepairx() -> forcepairx"},
	 { (char *)"delete_forcepairx", _wrap_delete_forcepairx, METH_VARARGS, (char *)"delete_forcepairx(forcepairx self)"},
	 { (char *)"forcepairx_swigregister", forcepairx_swigregister, METH_VARARGS, NULL},
	 { (char *)"fpairxFunct_run", _wrap_fpairxFunct_run, METH_VARARGS, (char *)"fpairxFunct_run(fpairxFunct self, forcepairx arg2)"},
	 { (char *)"delete_fpairxFunct", _wrap_delete_fpairxFunct, METH_VARARGS, (char *)"delete_fpairxFunct(fpairxFunct self)"},
	 { (char *)"fpairxFunct_swigregister", fpairxFunct_swigregister, METH_VARARGS, NULL},
	 { (char *)"interactionpairsx_setForces", _wrap_interactionpairsx_setForces, METH_VARARGS, (char *)"\n"
		"setForces(Box box)\n"
		"interactionpairsx_setForces(interactionpairsx self, Box box, fpairxFunct arg3)\n"
		""},
	 { (char *)"delete_interactionpairsx", _wrap_delete_interactionpairsx, METH_VARARGS, (char *)"delete_interactionpairsx(interactionpairsx self)"},
	 { (char *)"interactionpairsx_swigregister", interactionpairsx_swigregister, METH_VARARGS, NULL},
	 { (char *)"atompaircomp___call__", _wrap_atompaircomp___call__, METH_VARARGS, (char *)"atompaircomp___call__(atompaircomp self, atompair lhs, atompair rhs) -> bool"},
	 { (char *)"new_atompaircomp", _wrap_new_atompaircomp, METH_VARARGS, (char *)"new_atompaircomp() -> atompaircomp"},
	 { (char *)"delete_atompaircomp", _wrap_delete_atompaircomp, METH_VARARGS, (char *)"delete_atompaircomp(atompaircomp self)"},
	 { (char *)"atompaircomp_swigregister", atompaircomp_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_pairlist", _wrap_new_pairlist, METH_VARARGS, (char *)"new_pairlist() -> pairlist"},
	 { (char *)"pairlist_ensure", _wrap_pairlist_ensure, METH_VARARGS, (char *)"\n"
		"ensure(atomid a)\n"
		"ensure(std::vector< atomid > ps)\n"
		"pairlist_ensure(pairlist self, atomgroup group)\n"
		""},
	 { (char *)"pairlist_has_pair", _wrap_pairlist_has_pair, METH_VARARGS, (char *)"pairlist_has_pair(pairlist self, atomid a1, atomid a2) -> bool"},
	 { (char *)"pairlist_add_pair", _wrap_pairlist_add_pair, METH_VARARGS, (char *)"pairlist_add_pair(pairlist self, atomid a1, atomid a2)"},
	 { (char *)"pairlist_erase_pair", _wrap_pairlist_erase_pair, METH_VARARGS, (char *)"pairlist_erase_pair(pairlist self, atomid a1, atomid a2)"},
	 { (char *)"pairlist_get_pairs", _wrap_pairlist_get_pairs, METH_VARARGS, (char *)"pairlist_get_pairs(pairlist self, atomid a) -> set< atomid >"},
	 { (char *)"pairlist_begin", _wrap_pairlist_begin, METH_VARARGS, (char *)"pairlist_begin(pairlist self, atomid a) -> set< atomid >::iterator"},
	 { (char *)"pairlist_end", _wrap_pairlist_end, METH_VARARGS, (char *)"pairlist_end(pairlist self, atomid a) -> set< atomid >::iterator"},
	 { (char *)"pairlist_size", _wrap_pairlist_size, METH_VARARGS, (char *)"pairlist_size(pairlist self) -> uint"},
	 { (char *)"pairlist_clear", _wrap_pairlist_clear, METH_VARARGS, (char *)"pairlist_clear(pairlist self)"},
	 { (char *)"delete_pairlist", _wrap_delete_pairlist, METH_VARARGS, (char *)"delete_pairlist(pairlist self)"},
	 { (char *)"pairlist_swigregister", pairlist_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_neighborlist", _wrap_new_neighborlist, METH_VARARGS, (char *)"\n"
		"neighborlist(Box box, flt const innerradius, flt const outerradius)\n"
		"neighborlist(Box box, atomgroup vec, flt const innerradius, flt const outerradius, pairlist ignore=pairlist())\n"
		"new_neighborlist(Box box, atomgroup vec, flt const innerradius, flt const outerradius) -> neighborlist\n"
		""},
	 { (char *)"neighborlist_update", _wrap_neighborlist_update, METH_VARARGS, (char *)"neighborlist_update(neighborlist self, Box newbox)"},
	 { (char *)"neighborlist_update_list", _wrap_neighborlist_update_list, METH_VARARGS, (char *)"\n"
		"update_list(bool force=True) -> bool\n"
		"neighborlist_update_list(neighborlist self) -> bool\n"
		""},
	 { (char *)"neighborlist_which", _wrap_neighborlist_which, METH_VARARGS, (char *)"neighborlist_which(neighborlist self) -> uint"},
	 { (char *)"neighborlist_numpairs", _wrap_neighborlist_numpairs, METH_VARARGS, (char *)"neighborlist_numpairs(neighborlist self) -> uint"},
	 { (char *)"neighborlist_ignore", _wrap_neighborlist_ignore, METH_VARARGS, (char *)"\n"
		"ignore(atomid a, atomid b)\n"
		"neighborlist_ignore(neighborlist self, atom arg2, atom arg3)\n"
		""},
	 { (char *)"neighborlist_add", _wrap_neighborlist_add, METH_VARARGS, (char *)"neighborlist_add(neighborlist self, atom a) -> atomid"},
	 { (char *)"neighborlist_changesize", _wrap_neighborlist_changesize, METH_VARARGS, (char *)"\n"
		"changesize(flt inner, flt outer)\n"
		"neighborlist_changesize(neighborlist self, flt ratio)\n"
		""},
	 { (char *)"neighborlist_ignore_size", _wrap_neighborlist_ignore_size, METH_VARARGS, (char *)"neighborlist_ignore_size(neighborlist self) -> uint"},
	 { (char *)"neighborlist_size", _wrap_neighborlist_size, METH_VARARGS, (char *)"neighborlist_size(neighborlist self) -> uint"},
	 { (char *)"neighborlist_begin", _wrap_neighborlist_begin, METH_VARARGS, (char *)"neighborlist_begin(neighborlist self) -> std::vector< idpair,std::allocator< idpair > >::iterator"},
	 { (char *)"neighborlist_end", _wrap_neighborlist_end, METH_VARARGS, (char *)"neighborlist_end(neighborlist self) -> std::vector< idpair,std::allocator< idpair > >::iterator"},
	 { (char *)"neighborlist_get", _wrap_neighborlist_get, METH_VARARGS, (char *)"neighborlist_get(neighborlist self, uint i) -> idpair"},
	 { (char *)"delete_neighborlist", _wrap_delete_neighborlist, METH_VARARGS, (char *)"delete_neighborlist(neighborlist self)"},
	 { (char *)"neighborlist___getitem__", _wrap_neighborlist___getitem__, METH_VARARGS, (char *)"neighborlist___getitem__(neighborlist self, size_t i) -> idpair"},
	 { (char *)"neighborlist_swigregister", neighborlist_swigregister, METH_VARARGS, NULL},
	 { (char *)"Charged_q_set", _wrap_Charged_q_set, METH_VARARGS, (char *)"Charged_q_set(Charged self, flt q)"},
	 { (char *)"Charged_q_get", _wrap_Charged_q_get, METH_VARARGS, (char *)"Charged_q_get(Charged self) -> flt"},
	 { (char *)"new_Charged", _wrap_new_Charged, METH_VARARGS, (char *)"\n"
		"Charged()\n"
		"new_Charged(flt q, atom a) -> Charged\n"
		""},
	 { (char *)"delete_Charged", _wrap_delete_Charged, METH_VARARGS, (char *)"delete_Charged(Charged self)"},
	 { (char *)"Charged_swigregister", Charged_swigregister, METH_VARARGS, NULL},
	 { (char *)"ChargePair_q1q2_set", _wrap_ChargePair_q1q2_set, METH_VARARGS, (char *)"ChargePair_q1q2_set(ChargePair self, flt q1q2)"},
	 { (char *)"ChargePair_q1q2_get", _wrap_ChargePair_q1q2_get, METH_VARARGS, (char *)"ChargePair_q1q2_get(ChargePair self) -> flt"},
	 { (char *)"ChargePair_atom1_set", _wrap_ChargePair_atom1_set, METH_VARARGS, (char *)"ChargePair_atom1_set(ChargePair self, atomid atom1)"},
	 { (char *)"ChargePair_atom1_get", _wrap_ChargePair_atom1_get, METH_VARARGS, (char *)"ChargePair_atom1_get(ChargePair self) -> atomid"},
	 { (char *)"ChargePair_atom2_set", _wrap_ChargePair_atom2_set, METH_VARARGS, (char *)"ChargePair_atom2_set(ChargePair self, atomid atom2)"},
	 { (char *)"ChargePair_atom2_get", _wrap_ChargePair_atom2_get, METH_VARARGS, (char *)"ChargePair_atom2_get(ChargePair self) -> atomid"},
	 { (char *)"new_ChargePair", _wrap_new_ChargePair, METH_VARARGS, (char *)"new_ChargePair(Charged a1, Charged a2) -> ChargePair"},
	 { (char *)"delete_ChargePair", _wrap_delete_ChargePair, METH_VARARGS, (char *)"delete_ChargePair(ChargePair self)"},
	 { (char *)"ChargePair_swigregister", ChargePair_swigregister, METH_VARARGS, NULL},
	 { (char *)"LJatom_epsilon_set", _wrap_LJatom_epsilon_set, METH_VARARGS, (char *)"LJatom_epsilon_set(LJatom self, flt epsilon)"},
	 { (char *)"LJatom_epsilon_get", _wrap_LJatom_epsilon_get, METH_VARARGS, (char *)"LJatom_epsilon_get(LJatom self) -> flt"},
	 { (char *)"LJatom_sigma_set", _wrap_LJatom_sigma_set, METH_VARARGS, (char *)"LJatom_sigma_set(LJatom self, flt sigma)"},
	 { (char *)"LJatom_sigma_get", _wrap_LJatom_sigma_get, METH_VARARGS, (char *)"LJatom_sigma_get(LJatom self) -> flt"},
	 { (char *)"new_LJatom", _wrap_new_LJatom, METH_VARARGS, (char *)"\n"
		"LJatom(flt epsilon, flt sigma, atom a)\n"
		"new_LJatom(atomid a, LJatom other) -> LJatom\n"
		""},
	 { (char *)"delete_LJatom", _wrap_delete_LJatom, METH_VARARGS, (char *)"delete_LJatom(LJatom self)"},
	 { (char *)"LJatom_swigregister", LJatom_swigregister, METH_VARARGS, NULL},
	 { (char *)"LJpair_epsilon_set", _wrap_LJpair_epsilon_set, METH_VARARGS, (char *)"LJpair_epsilon_set(LJpair self, flt epsilon)"},
	 { (char *)"LJpair_epsilon_get", _wrap_LJpair_epsilon_get, METH_VARARGS, (char *)"LJpair_epsilon_get(LJpair self) -> flt"},
	 { (char *)"LJpair_sigma_set", _wrap_LJpair_sigma_set, METH_VARARGS, (char *)"LJpair_sigma_set(LJpair self, flt sigma)"},
	 { (char *)"LJpair_sigma_get", _wrap_LJpair_sigma_get, METH_VARARGS, (char *)"LJpair_sigma_get(LJpair self) -> flt"},
	 { (char *)"LJpair_atom1_set", _wrap_LJpair_atom1_set, METH_VARARGS, (char *)"LJpair_atom1_set(LJpair self, atomid atom1)"},
	 { (char *)"LJpair_atom1_get", _wrap_LJpair_atom1_get, METH_VARARGS, (char *)"LJpair_atom1_get(LJpair self) -> atomid"},
	 { (char *)"LJpair_atom2_set", _wrap_LJpair_atom2_set, METH_VARARGS, (char *)"LJpair_atom2_set(LJpair self, atomid atom2)"},
	 { (char *)"LJpair_atom2_get", _wrap_LJpair_atom2_get, METH_VARARGS, (char *)"LJpair_atom2_get(LJpair self) -> atomid"},
	 { (char *)"new_LJpair", _wrap_new_LJpair, METH_VARARGS, (char *)"new_LJpair(LJatom LJ1, LJatom LJ2) -> LJpair"},
	 { (char *)"LJpair_energy", _wrap_LJpair_energy, METH_VARARGS, (char *)"LJpair_energy(LJpair self, Box box) -> flt"},
	 { (char *)"LJpair_forces", _wrap_LJpair_forces, METH_VARARGS, (char *)"LJpair_forces(LJpair self, Box box) -> Vec"},
	 { (char *)"delete_LJpair", _wrap_delete_LJpair, METH_VARARGS, (char *)"delete_LJpair(LJpair self)"},
	 { (char *)"LJpair_swigregister", LJpair_swigregister, METH_VARARGS, NULL},
	 { (char *)"LJatomcut_sigcut_set", _wrap_LJatomcut_sigcut_set, METH_VARARGS, (char *)"LJatomcut_sigcut_set(LJatomcut self, flt sigcut)"},
	 { (char *)"LJatomcut_sigcut_get", _wrap_LJatomcut_sigcut_get, METH_VARARGS, (char *)"LJatomcut_sigcut_get(LJatomcut self) -> flt"},
	 { (char *)"new_LJatomcut", _wrap_new_LJatomcut, METH_VARARGS, (char *)"\n"
		"LJatomcut(flt epsilon, flt sigma, atom a, flt cut)\n"
		"new_LJatomcut(atomid a, LJatomcut other) -> LJatomcut\n"
		""},
	 { (char *)"delete_LJatomcut", _wrap_delete_LJatomcut, METH_VARARGS, (char *)"delete_LJatomcut(LJatomcut self)"},
	 { (char *)"LJatomcut_swigregister", LJatomcut_swigregister, METH_VARARGS, NULL},
	 { (char *)"LJAttractPair_inter_set", _wrap_LJAttractPair_inter_set, METH_VARARGS, (char *)"LJAttractPair_inter_set(LJAttractPair self, LJattractCut inter)"},
	 { (char *)"LJAttractPair_inter_get", _wrap_LJAttractPair_inter_get, METH_VARARGS, (char *)"LJAttractPair_inter_get(LJAttractPair self) -> LJattractCut"},
	 { (char *)"LJAttractPair_atom1_set", _wrap_LJAttractPair_atom1_set, METH_VARARGS, (char *)"LJAttractPair_atom1_set(LJAttractPair self, atomid atom1)"},
	 { (char *)"LJAttractPair_atom1_get", _wrap_LJAttractPair_atom1_get, METH_VARARGS, (char *)"LJAttractPair_atom1_get(LJAttractPair self) -> atomid"},
	 { (char *)"LJAttractPair_atom2_set", _wrap_LJAttractPair_atom2_set, METH_VARARGS, (char *)"LJAttractPair_atom2_set(LJAttractPair self, atomid atom2)"},
	 { (char *)"LJAttractPair_atom2_get", _wrap_LJAttractPair_atom2_get, METH_VARARGS, (char *)"LJAttractPair_atom2_get(LJAttractPair self) -> atomid"},
	 { (char *)"new_LJAttractPair", _wrap_new_LJAttractPair, METH_VARARGS, (char *)"new_LJAttractPair(LJatomcut a1, LJatomcut a2) -> LJAttractPair"},
	 { (char *)"LJAttractPair_energy", _wrap_LJAttractPair_energy, METH_VARARGS, (char *)"LJAttractPair_energy(LJAttractPair self, Box box) -> flt"},
	 { (char *)"LJAttractPair_forces", _wrap_LJAttractPair_forces, METH_VARARGS, (char *)"LJAttractPair_forces(LJAttractPair self, Box box) -> Vec"},
	 { (char *)"delete_LJAttractPair", _wrap_delete_LJAttractPair, METH_VARARGS, (char *)"delete_LJAttractPair(LJAttractPair self)"},
	 { (char *)"LJAttractPair_swigregister", LJAttractPair_swigregister, METH_VARARGS, NULL},
	 { (char *)"HydroAtom_epsilons_set", _wrap_HydroAtom_epsilons_set, METH_VARARGS, (char *)"HydroAtom_epsilons_set(HydroAtom self, fvector epsilons)"},
	 { (char *)"HydroAtom_epsilons_get", _wrap_HydroAtom_epsilons_get, METH_VARARGS, (char *)"HydroAtom_epsilons_get(HydroAtom self) -> fvector"},
	 { (char *)"HydroAtom_indx_set", _wrap_HydroAtom_indx_set, METH_VARARGS, (char *)"HydroAtom_indx_set(HydroAtom self, uint indx)"},
	 { (char *)"HydroAtom_indx_get", _wrap_HydroAtom_indx_get, METH_VARARGS, (char *)"HydroAtom_indx_get(HydroAtom self) -> uint"},
	 { (char *)"HydroAtom_sigma_set", _wrap_HydroAtom_sigma_set, METH_VARARGS, (char *)"HydroAtom_sigma_set(HydroAtom self, flt sigma)"},
	 { (char *)"HydroAtom_sigma_get", _wrap_HydroAtom_sigma_get, METH_VARARGS, (char *)"HydroAtom_sigma_get(HydroAtom self) -> flt"},
	 { (char *)"HydroAtom_sigcut_set", _wrap_HydroAtom_sigcut_set, METH_VARARGS, (char *)"HydroAtom_sigcut_set(HydroAtom self, flt sigcut)"},
	 { (char *)"HydroAtom_sigcut_get", _wrap_HydroAtom_sigcut_get, METH_VARARGS, (char *)"HydroAtom_sigcut_get(HydroAtom self) -> flt"},
	 { (char *)"new_HydroAtom", _wrap_new_HydroAtom, METH_VARARGS, (char *)"\n"
		"HydroAtom(fvector epsilons, uint indx, flt sigma, atom a, flt cut)\n"
		"new_HydroAtom(atomid a, HydroAtom other) -> HydroAtom\n"
		""},
	 { (char *)"HydroAtom_getEpsilon", _wrap_HydroAtom_getEpsilon, METH_VARARGS, (char *)"HydroAtom_getEpsilon(HydroAtom self, HydroAtom other) -> flt"},
	 { (char *)"delete_HydroAtom", _wrap_delete_HydroAtom, METH_VARARGS, (char *)"delete_HydroAtom(HydroAtom self)"},
	 { (char *)"HydroAtom_swigregister", HydroAtom_swigregister, METH_VARARGS, NULL},
	 { (char *)"HydroPair_inter_set", _wrap_HydroPair_inter_set, METH_VARARGS, (char *)"HydroPair_inter_set(HydroPair self, LJattractCut inter)"},
	 { (char *)"HydroPair_inter_get", _wrap_HydroPair_inter_get, METH_VARARGS, (char *)"HydroPair_inter_get(HydroPair self) -> LJattractCut"},
	 { (char *)"HydroPair_atom1_set", _wrap_HydroPair_atom1_set, METH_VARARGS, (char *)"HydroPair_atom1_set(HydroPair self, atomid atom1)"},
	 { (char *)"HydroPair_atom1_get", _wrap_HydroPair_atom1_get, METH_VARARGS, (char *)"HydroPair_atom1_get(HydroPair self) -> atomid"},
	 { (char *)"HydroPair_atom2_set", _wrap_HydroPair_atom2_set, METH_VARARGS, (char *)"HydroPair_atom2_set(HydroPair self, atomid atom2)"},
	 { (char *)"HydroPair_atom2_get", _wrap_HydroPair_atom2_get, METH_VARARGS, (char *)"HydroPair_atom2_get(HydroPair self) -> atomid"},
	 { (char *)"new_HydroPair", _wrap_new_HydroPair, METH_VARARGS, (char *)"new_HydroPair(HydroAtom a1, HydroAtom a2) -> HydroPair"},
	 { (char *)"HydroPair_energy", _wrap_HydroPair_energy, METH_VARARGS, (char *)"HydroPair_energy(HydroPair self, Box box) -> flt"},
	 { (char *)"HydroPair_forces", _wrap_HydroPair_forces, METH_VARARGS, (char *)"HydroPair_forces(HydroPair self, Box box) -> Vec"},
	 { (char *)"delete_HydroPair", _wrap_delete_HydroPair, METH_VARARGS, (char *)"delete_HydroPair(HydroPair self)"},
	 { (char *)"HydroPair_swigregister", HydroPair_swigregister, METH_VARARGS, NULL},
	 { (char *)"LJAtomIndexed_epsilons_set", _wrap_LJAtomIndexed_epsilons_set, METH_VARARGS, (char *)"LJAtomIndexed_epsilons_set(LJAtomIndexed self, fvector epsilons)"},
	 { (char *)"LJAtomIndexed_epsilons_get", _wrap_LJAtomIndexed_epsilons_get, METH_VARARGS, (char *)"LJAtomIndexed_epsilons_get(LJAtomIndexed self) -> fvector"},
	 { (char *)"LJAtomIndexed_sigmas_set", _wrap_LJAtomIndexed_sigmas_set, METH_VARARGS, (char *)"LJAtomIndexed_sigmas_set(LJAtomIndexed self, fvector sigmas)"},
	 { (char *)"LJAtomIndexed_sigmas_get", _wrap_LJAtomIndexed_sigmas_get, METH_VARARGS, (char *)"LJAtomIndexed_sigmas_get(LJAtomIndexed self) -> fvector"},
	 { (char *)"LJAtomIndexed_indx_set", _wrap_LJAtomIndexed_indx_set, METH_VARARGS, (char *)"LJAtomIndexed_indx_set(LJAtomIndexed self, uint indx)"},
	 { (char *)"LJAtomIndexed_indx_get", _wrap_LJAtomIndexed_indx_get, METH_VARARGS, (char *)"LJAtomIndexed_indx_get(LJAtomIndexed self) -> uint"},
	 { (char *)"LJAtomIndexed_sigcut_set", _wrap_LJAtomIndexed_sigcut_set, METH_VARARGS, (char *)"LJAtomIndexed_sigcut_set(LJAtomIndexed self, flt sigcut)"},
	 { (char *)"LJAtomIndexed_sigcut_get", _wrap_LJAtomIndexed_sigcut_get, METH_VARARGS, (char *)"LJAtomIndexed_sigcut_get(LJAtomIndexed self) -> flt"},
	 { (char *)"new_LJAtomIndexed", _wrap_new_LJAtomIndexed, METH_VARARGS, (char *)"\n"
		"LJAtomIndexed(fvector epsilons, fvector sigmas, uint indx, atom a, flt cut)\n"
		"new_LJAtomIndexed(atomid a, LJAtomIndexed other) -> LJAtomIndexed\n"
		""},
	 { (char *)"LJAtomIndexed_getEpsilon", _wrap_LJAtomIndexed_getEpsilon, METH_VARARGS, (char *)"LJAtomIndexed_getEpsilon(LJAtomIndexed self, LJAtomIndexed other) -> flt"},
	 { (char *)"LJAtomIndexed_getSigma", _wrap_LJAtomIndexed_getSigma, METH_VARARGS, (char *)"LJAtomIndexed_getSigma(LJAtomIndexed self, LJAtomIndexed other) -> flt"},
	 { (char *)"delete_LJAtomIndexed", _wrap_delete_LJAtomIndexed, METH_VARARGS, (char *)"delete_LJAtomIndexed(LJAtomIndexed self)"},
	 { (char *)"LJAtomIndexed_swigregister", LJAtomIndexed_swigregister, METH_VARARGS, NULL},
	 { (char *)"LJFullPair_inter_set", _wrap_LJFullPair_inter_set, METH_VARARGS, (char *)"LJFullPair_inter_set(LJFullPair self, LJattractCut inter)"},
	 { (char *)"LJFullPair_inter_get", _wrap_LJFullPair_inter_get, METH_VARARGS, (char *)"LJFullPair_inter_get(LJFullPair self) -> LJattractCut"},
	 { (char *)"LJFullPair_atom1_set", _wrap_LJFullPair_atom1_set, METH_VARARGS, (char *)"LJFullPair_atom1_set(LJFullPair self, atomid atom1)"},
	 { (char *)"LJFullPair_atom1_get", _wrap_LJFullPair_atom1_get, METH_VARARGS, (char *)"LJFullPair_atom1_get(LJFullPair self) -> atomid"},
	 { (char *)"LJFullPair_atom2_set", _wrap_LJFullPair_atom2_set, METH_VARARGS, (char *)"LJFullPair_atom2_set(LJFullPair self, atomid atom2)"},
	 { (char *)"LJFullPair_atom2_get", _wrap_LJFullPair_atom2_get, METH_VARARGS, (char *)"LJFullPair_atom2_get(LJFullPair self) -> atomid"},
	 { (char *)"new_LJFullPair", _wrap_new_LJFullPair, METH_VARARGS, (char *)"new_LJFullPair(LJAtomIndexed a1, LJAtomIndexed a2) -> LJFullPair"},
	 { (char *)"LJFullPair_energy", _wrap_LJFullPair_energy, METH_VARARGS, (char *)"LJFullPair_energy(LJFullPair self, Box box) -> flt"},
	 { (char *)"LJFullPair_forces", _wrap_LJFullPair_forces, METH_VARARGS, (char *)"LJFullPair_forces(LJFullPair self, Box box) -> Vec"},
	 { (char *)"delete_LJFullPair", _wrap_delete_LJFullPair, METH_VARARGS, (char *)"delete_LJFullPair(LJFullPair self)"},
	 { (char *)"LJFullPair_swigregister", LJFullPair_swigregister, METH_VARARGS, NULL},
	 { (char *)"LJishAtom_epsilons_set", _wrap_LJishAtom_epsilons_set, METH_VARARGS, (char *)"LJishAtom_epsilons_set(LJishAtom self, fvector epsilons)"},
	 { (char *)"LJishAtom_epsilons_get", _wrap_LJishAtom_epsilons_get, METH_VARARGS, (char *)"LJishAtom_epsilons_get(LJishAtom self) -> fvector"},
	 { (char *)"LJishAtom_repeps_set", _wrap_LJishAtom_repeps_set, METH_VARARGS, (char *)"LJishAtom_repeps_set(LJishAtom self, flt repeps)"},
	 { (char *)"LJishAtom_repeps_get", _wrap_LJishAtom_repeps_get, METH_VARARGS, (char *)"LJishAtom_repeps_get(LJishAtom self) -> flt"},
	 { (char *)"LJishAtom_sigma_set", _wrap_LJishAtom_sigma_set, METH_VARARGS, (char *)"LJishAtom_sigma_set(LJishAtom self, flt sigma)"},
	 { (char *)"LJishAtom_sigma_get", _wrap_LJishAtom_sigma_get, METH_VARARGS, (char *)"LJishAtom_sigma_get(LJishAtom self) -> flt"},
	 { (char *)"LJishAtom_exponent_set", _wrap_LJishAtom_exponent_set, METH_VARARGS, (char *)"LJishAtom_exponent_set(LJishAtom self, flt exponent)"},
	 { (char *)"LJishAtom_exponent_get", _wrap_LJishAtom_exponent_get, METH_VARARGS, (char *)"LJishAtom_exponent_get(LJishAtom self) -> flt"},
	 { (char *)"LJishAtom_indx_set", _wrap_LJishAtom_indx_set, METH_VARARGS, (char *)"LJishAtom_indx_set(LJishAtom self, uint indx)"},
	 { (char *)"LJishAtom_indx_get", _wrap_LJishAtom_indx_get, METH_VARARGS, (char *)"LJishAtom_indx_get(LJishAtom self) -> uint"},
	 { (char *)"LJishAtom_sigcut_set", _wrap_LJishAtom_sigcut_set, METH_VARARGS, (char *)"LJishAtom_sigcut_set(LJishAtom self, flt sigcut)"},
	 { (char *)"LJishAtom_sigcut_get", _wrap_LJishAtom_sigcut_get, METH_VARARGS, (char *)"LJishAtom_sigcut_get(LJishAtom self) -> flt"},
	 { (char *)"new_LJishAtom", _wrap_new_LJishAtom, METH_VARARGS, (char *)"\n"
		"LJishAtom(atom a, fvector epsilons, flt repeps, flt sigma, flt n, uint indx, flt cut)\n"
		"new_LJishAtom(atomid a, LJishAtom other) -> LJishAtom\n"
		""},
	 { (char *)"LJishAtom_getEpsilon", _wrap_LJishAtom_getEpsilon, METH_VARARGS, (char *)"LJishAtom_getEpsilon(LJishAtom self, LJishAtom other) -> flt"},
	 { (char *)"LJishAtom_getSigma", _wrap_LJishAtom_getSigma, METH_VARARGS, (char *)"LJishAtom_getSigma(LJishAtom self, LJishAtom other) -> flt"},
	 { (char *)"delete_LJishAtom", _wrap_delete_LJishAtom, METH_VARARGS, (char *)"delete_LJishAtom(LJishAtom self)"},
	 { (char *)"LJishAtom_swigregister", LJishAtom_swigregister, METH_VARARGS, NULL},
	 { (char *)"LJishPair_epsilon_set", _wrap_LJishPair_epsilon_set, METH_VARARGS, (char *)"LJishPair_epsilon_set(LJishPair self, flt epsilon)"},
	 { (char *)"LJishPair_epsilon_get", _wrap_LJishPair_epsilon_get, METH_VARARGS, (char *)"LJishPair_epsilon_get(LJishPair self) -> flt"},
	 { (char *)"LJishPair_repeps_set", _wrap_LJishPair_repeps_set, METH_VARARGS, (char *)"LJishPair_repeps_set(LJishPair self, flt repeps)"},
	 { (char *)"LJishPair_repeps_get", _wrap_LJishPair_repeps_get, METH_VARARGS, (char *)"LJishPair_repeps_get(LJishPair self) -> flt"},
	 { (char *)"LJishPair_sigma_set", _wrap_LJishPair_sigma_set, METH_VARARGS, (char *)"LJishPair_sigma_set(LJishPair self, flt sigma)"},
	 { (char *)"LJishPair_sigma_get", _wrap_LJishPair_sigma_get, METH_VARARGS, (char *)"LJishPair_sigma_get(LJishPair self) -> flt"},
	 { (char *)"LJishPair_n_set", _wrap_LJishPair_n_set, METH_VARARGS, (char *)"LJishPair_n_set(LJishPair self, flt n)"},
	 { (char *)"LJishPair_n_get", _wrap_LJishPair_n_get, METH_VARARGS, (char *)"LJishPair_n_get(LJishPair self) -> flt"},
	 { (char *)"LJishPair_cutR_set", _wrap_LJishPair_cutR_set, METH_VARARGS, (char *)"LJishPair_cutR_set(LJishPair self, flt cutR)"},
	 { (char *)"LJishPair_cutR_get", _wrap_LJishPair_cutR_get, METH_VARARGS, (char *)"LJishPair_cutR_get(LJishPair self) -> flt"},
	 { (char *)"LJishPair_cutE_set", _wrap_LJishPair_cutE_set, METH_VARARGS, (char *)"LJishPair_cutE_set(LJishPair self, flt cutE)"},
	 { (char *)"LJishPair_cutE_get", _wrap_LJishPair_cutE_get, METH_VARARGS, (char *)"LJishPair_cutE_get(LJishPair self) -> flt"},
	 { (char *)"LJishPair_atom1_set", _wrap_LJishPair_atom1_set, METH_VARARGS, (char *)"LJishPair_atom1_set(LJishPair self, atomid atom1)"},
	 { (char *)"LJishPair_atom1_get", _wrap_LJishPair_atom1_get, METH_VARARGS, (char *)"LJishPair_atom1_get(LJishPair self) -> atomid"},
	 { (char *)"LJishPair_atom2_set", _wrap_LJishPair_atom2_set, METH_VARARGS, (char *)"LJishPair_atom2_set(LJishPair self, atomid atom2)"},
	 { (char *)"LJishPair_atom2_get", _wrap_LJishPair_atom2_get, METH_VARARGS, (char *)"LJishPair_atom2_get(LJishPair self) -> atomid"},
	 { (char *)"new_LJishPair", _wrap_new_LJishPair, METH_VARARGS, (char *)"new_LJishPair(LJishAtom LJ1, LJishAtom LJ2) -> LJishPair"},
	 { (char *)"LJishPair_energy", _wrap_LJishPair_energy, METH_VARARGS, (char *)"LJishPair_energy(LJishPair self, Box box) -> flt"},
	 { (char *)"LJishPair_forces", _wrap_LJishPair_forces, METH_VARARGS, (char *)"LJishPair_forces(LJishPair self, Box box) -> Vec"},
	 { (char *)"delete_LJishPair", _wrap_delete_LJishPair, METH_VARARGS, (char *)"delete_LJishPair(LJishPair self)"},
	 { (char *)"LJishPair_swigregister", LJishPair_swigregister, METH_VARARGS, NULL},
	 { (char *)"LJAttractRepulseAtom_epsilons_set", _wrap_LJAttractRepulseAtom_epsilons_set, METH_VARARGS, (char *)"LJAttractRepulseAtom_epsilons_set(LJAttractRepulseAtom self, fvector epsilons)"},
	 { (char *)"LJAttractRepulseAtom_epsilons_get", _wrap_LJAttractRepulseAtom_epsilons_get, METH_VARARGS, (char *)"LJAttractRepulseAtom_epsilons_get(LJAttractRepulseAtom self) -> fvector"},
	 { (char *)"LJAttractRepulseAtom_sig_set", _wrap_LJAttractRepulseAtom_sig_set, METH_VARARGS, (char *)"LJAttractRepulseAtom_sig_set(LJAttractRepulseAtom self, flt sig)"},
	 { (char *)"LJAttractRepulseAtom_sig_get", _wrap_LJAttractRepulseAtom_sig_get, METH_VARARGS, (char *)"LJAttractRepulseAtom_sig_get(LJAttractRepulseAtom self) -> flt"},
	 { (char *)"LJAttractRepulseAtom_indx_set", _wrap_LJAttractRepulseAtom_indx_set, METH_VARARGS, (char *)"LJAttractRepulseAtom_indx_set(LJAttractRepulseAtom self, uint indx)"},
	 { (char *)"LJAttractRepulseAtom_indx_get", _wrap_LJAttractRepulseAtom_indx_get, METH_VARARGS, (char *)"LJAttractRepulseAtom_indx_get(LJAttractRepulseAtom self) -> uint"},
	 { (char *)"LJAttractRepulseAtom_sigcut_set", _wrap_LJAttractRepulseAtom_sigcut_set, METH_VARARGS, (char *)"LJAttractRepulseAtom_sigcut_set(LJAttractRepulseAtom self, flt sigcut)"},
	 { (char *)"LJAttractRepulseAtom_sigcut_get", _wrap_LJAttractRepulseAtom_sigcut_get, METH_VARARGS, (char *)"LJAttractRepulseAtom_sigcut_get(LJAttractRepulseAtom self) -> flt"},
	 { (char *)"new_LJAttractRepulseAtom", _wrap_new_LJAttractRepulseAtom, METH_VARARGS, (char *)"\n"
		"LJAttractRepulseAtom(atom a, fvector epsilons, flt sigma, uint indx, flt cut)\n"
		"new_LJAttractRepulseAtom(atomid a, LJAttractRepulseAtom other) -> LJAttractRepulseAtom\n"
		""},
	 { (char *)"LJAttractRepulseAtom_getEpsilon", _wrap_LJAttractRepulseAtom_getEpsilon, METH_VARARGS, (char *)"LJAttractRepulseAtom_getEpsilon(LJAttractRepulseAtom self, LJAttractRepulseAtom other) -> flt"},
	 { (char *)"delete_LJAttractRepulseAtom", _wrap_delete_LJAttractRepulseAtom, METH_VARARGS, (char *)"delete_LJAttractRepulseAtom(LJAttractRepulseAtom self)"},
	 { (char *)"LJAttractRepulseAtom_swigregister", LJAttractRepulseAtom_swigregister, METH_VARARGS, NULL},
	 { (char *)"LJAttractRepulsePair_eps_set", _wrap_LJAttractRepulsePair_eps_set, METH_VARARGS, (char *)"LJAttractRepulsePair_eps_set(LJAttractRepulsePair self, flt eps)"},
	 { (char *)"LJAttractRepulsePair_eps_get", _wrap_LJAttractRepulsePair_eps_get, METH_VARARGS, (char *)"LJAttractRepulsePair_eps_get(LJAttractRepulsePair self) -> flt"},
	 { (char *)"LJAttractRepulsePair_sig_set", _wrap_LJAttractRepulsePair_sig_set, METH_VARARGS, (char *)"LJAttractRepulsePair_sig_set(LJAttractRepulsePair self, flt sig)"},
	 { (char *)"LJAttractRepulsePair_sig_get", _wrap_LJAttractRepulsePair_sig_get, METH_VARARGS, (char *)"LJAttractRepulsePair_sig_get(LJAttractRepulsePair self) -> flt"},
	 { (char *)"LJAttractRepulsePair_cutR_set", _wrap_LJAttractRepulsePair_cutR_set, METH_VARARGS, (char *)"LJAttractRepulsePair_cutR_set(LJAttractRepulsePair self, flt cutR)"},
	 { (char *)"LJAttractRepulsePair_cutR_get", _wrap_LJAttractRepulsePair_cutR_get, METH_VARARGS, (char *)"LJAttractRepulsePair_cutR_get(LJAttractRepulsePair self) -> flt"},
	 { (char *)"LJAttractRepulsePair_cutE_set", _wrap_LJAttractRepulsePair_cutE_set, METH_VARARGS, (char *)"LJAttractRepulsePair_cutE_set(LJAttractRepulsePair self, flt cutE)"},
	 { (char *)"LJAttractRepulsePair_cutE_get", _wrap_LJAttractRepulsePair_cutE_get, METH_VARARGS, (char *)"LJAttractRepulsePair_cutE_get(LJAttractRepulsePair self) -> flt"},
	 { (char *)"LJAttractRepulsePair_atom1_set", _wrap_LJAttractRepulsePair_atom1_set, METH_VARARGS, (char *)"LJAttractRepulsePair_atom1_set(LJAttractRepulsePair self, atomid atom1)"},
	 { (char *)"LJAttractRepulsePair_atom1_get", _wrap_LJAttractRepulsePair_atom1_get, METH_VARARGS, (char *)"LJAttractRepulsePair_atom1_get(LJAttractRepulsePair self) -> atomid"},
	 { (char *)"LJAttractRepulsePair_atom2_set", _wrap_LJAttractRepulsePair_atom2_set, METH_VARARGS, (char *)"LJAttractRepulsePair_atom2_set(LJAttractRepulsePair self, atomid atom2)"},
	 { (char *)"LJAttractRepulsePair_atom2_get", _wrap_LJAttractRepulsePair_atom2_get, METH_VARARGS, (char *)"LJAttractRepulsePair_atom2_get(LJAttractRepulsePair self) -> atomid"},
	 { (char *)"new_LJAttractRepulsePair", _wrap_new_LJAttractRepulsePair, METH_VARARGS, (char *)"new_LJAttractRepulsePair(LJAttractRepulseAtom a1, LJAttractRepulseAtom a2) -> LJAttractRepulsePair"},
	 { (char *)"LJAttractRepulsePair_energy", _wrap_LJAttractRepulsePair_energy, METH_VARARGS, (char *)"LJAttractRepulsePair_energy(LJAttractRepulsePair self, Box box) -> flt"},
	 { (char *)"LJAttractRepulsePair_forces", _wrap_LJAttractRepulsePair_forces, METH_VARARGS, (char *)"LJAttractRepulsePair_forces(LJAttractRepulsePair self, Box box) -> Vec"},
	 { (char *)"delete_LJAttractRepulsePair", _wrap_delete_LJAttractRepulsePair, METH_VARARGS, (char *)"delete_LJAttractRepulsePair(LJAttractRepulsePair self)"},
	 { (char *)"LJAttractRepulsePair_swigregister", LJAttractRepulsePair_swigregister, METH_VARARGS, NULL},
	 { (char *)"LJAttractFixedRepulseAtom_epsilons_set", _wrap_LJAttractFixedRepulseAtom_epsilons_set, METH_VARARGS, (char *)"LJAttractFixedRepulseAtom_epsilons_set(LJAttractFixedRepulseAtom self, fvector epsilons)"},
	 { (char *)"LJAttractFixedRepulseAtom_epsilons_get", _wrap_LJAttractFixedRepulseAtom_epsilons_get, METH_VARARGS, (char *)"LJAttractFixedRepulseAtom_epsilons_get(LJAttractFixedRepulseAtom self) -> fvector"},
	 { (char *)"LJAttractFixedRepulseAtom_repeps_set", _wrap_LJAttractFixedRepulseAtom_repeps_set, METH_VARARGS, (char *)"LJAttractFixedRepulseAtom_repeps_set(LJAttractFixedRepulseAtom self, flt repeps)"},
	 { (char *)"LJAttractFixedRepulseAtom_repeps_get", _wrap_LJAttractFixedRepulseAtom_repeps_get, METH_VARARGS, (char *)"LJAttractFixedRepulseAtom_repeps_get(LJAttractFixedRepulseAtom self) -> flt"},
	 { (char *)"LJAttractFixedRepulseAtom_sig_set", _wrap_LJAttractFixedRepulseAtom_sig_set, METH_VARARGS, (char *)"LJAttractFixedRepulseAtom_sig_set(LJAttractFixedRepulseAtom self, flt sig)"},
	 { (char *)"LJAttractFixedRepulseAtom_sig_get", _wrap_LJAttractFixedRepulseAtom_sig_get, METH_VARARGS, (char *)"LJAttractFixedRepulseAtom_sig_get(LJAttractFixedRepulseAtom self) -> flt"},
	 { (char *)"LJAttractFixedRepulseAtom_indx_set", _wrap_LJAttractFixedRepulseAtom_indx_set, METH_VARARGS, (char *)"LJAttractFixedRepulseAtom_indx_set(LJAttractFixedRepulseAtom self, uint indx)"},
	 { (char *)"LJAttractFixedRepulseAtom_indx_get", _wrap_LJAttractFixedRepulseAtom_indx_get, METH_VARARGS, (char *)"LJAttractFixedRepulseAtom_indx_get(LJAttractFixedRepulseAtom self) -> uint"},
	 { (char *)"LJAttractFixedRepulseAtom_sigcut_set", _wrap_LJAttractFixedRepulseAtom_sigcut_set, METH_VARARGS, (char *)"LJAttractFixedRepulseAtom_sigcut_set(LJAttractFixedRepulseAtom self, flt sigcut)"},
	 { (char *)"LJAttractFixedRepulseAtom_sigcut_get", _wrap_LJAttractFixedRepulseAtom_sigcut_get, METH_VARARGS, (char *)"LJAttractFixedRepulseAtom_sigcut_get(LJAttractFixedRepulseAtom self) -> flt"},
	 { (char *)"new_LJAttractFixedRepulseAtom", _wrap_new_LJAttractFixedRepulseAtom, METH_VARARGS, (char *)"\n"
		"LJAttractFixedRepulseAtom(atom a, fvector epsilons, flt repeps, flt sigma, uint indx, flt cut)\n"
		"new_LJAttractFixedRepulseAtom(atomid a, LJAttractFixedRepulseAtom other) -> LJAttractFixedRepulseAtom\n"
		""},
	 { (char *)"LJAttractFixedRepulseAtom_getEpsilon", _wrap_LJAttractFixedRepulseAtom_getEpsilon, METH_VARARGS, (char *)"LJAttractFixedRepulseAtom_getEpsilon(LJAttractFixedRepulseAtom self, LJAttractFixedRepulseAtom other) -> flt"},
	 { (char *)"delete_LJAttractFixedRepulseAtom", _wrap_delete_LJAttractFixedRepulseAtom, METH_VARARGS, (char *)"delete_LJAttractFixedRepulseAtom(LJAttractFixedRepulseAtom self)"},
	 { (char *)"LJAttractFixedRepulseAtom_swigregister", LJAttractFixedRepulseAtom_swigregister, METH_VARARGS, NULL},
	 { (char *)"LJAttractFixedRepulsePair_eps_set", _wrap_LJAttractFixedRepulsePair_eps_set, METH_VARARGS, (char *)"LJAttractFixedRepulsePair_eps_set(LJAttractFixedRepulsePair self, flt eps)"},
	 { (char *)"LJAttractFixedRepulsePair_eps_get", _wrap_LJAttractFixedRepulsePair_eps_get, METH_VARARGS, (char *)"LJAttractFixedRepulsePair_eps_get(LJAttractFixedRepulsePair self) -> flt"},
	 { (char *)"LJAttractFixedRepulsePair_repeps_set", _wrap_LJAttractFixedRepulsePair_repeps_set, METH_VARARGS, (char *)"LJAttractFixedRepulsePair_repeps_set(LJAttractFixedRepulsePair self, flt repeps)"},
	 { (char *)"LJAttractFixedRepulsePair_repeps_get", _wrap_LJAttractFixedRepulsePair_repeps_get, METH_VARARGS, (char *)"LJAttractFixedRepulsePair_repeps_get(LJAttractFixedRepulsePair self) -> flt"},
	 { (char *)"LJAttractFixedRepulsePair_sig_set", _wrap_LJAttractFixedRepulsePair_sig_set, METH_VARARGS, (char *)"LJAttractFixedRepulsePair_sig_set(LJAttractFixedRepulsePair self, flt sig)"},
	 { (char *)"LJAttractFixedRepulsePair_sig_get", _wrap_LJAttractFixedRepulsePair_sig_get, METH_VARARGS, (char *)"LJAttractFixedRepulsePair_sig_get(LJAttractFixedRepulsePair self) -> flt"},
	 { (char *)"LJAttractFixedRepulsePair_cutR_set", _wrap_LJAttractFixedRepulsePair_cutR_set, METH_VARARGS, (char *)"LJAttractFixedRepulsePair_cutR_set(LJAttractFixedRepulsePair self, flt cutR)"},
	 { (char *)"LJAttractFixedRepulsePair_cutR_get", _wrap_LJAttractFixedRepulsePair_cutR_get, METH_VARARGS, (char *)"LJAttractFixedRepulsePair_cutR_get(LJAttractFixedRepulsePair self) -> flt"},
	 { (char *)"LJAttractFixedRepulsePair_cutE_set", _wrap_LJAttractFixedRepulsePair_cutE_set, METH_VARARGS, (char *)"LJAttractFixedRepulsePair_cutE_set(LJAttractFixedRepulsePair self, flt cutE)"},
	 { (char *)"LJAttractFixedRepulsePair_cutE_get", _wrap_LJAttractFixedRepulsePair_cutE_get, METH_VARARGS, (char *)"LJAttractFixedRepulsePair_cutE_get(LJAttractFixedRepulsePair self) -> flt"},
	 { (char *)"LJAttractFixedRepulsePair_attract_set", _wrap_LJAttractFixedRepulsePair_attract_set, METH_VARARGS, (char *)"LJAttractFixedRepulsePair_attract_set(LJAttractFixedRepulsePair self, bool attract)"},
	 { (char *)"LJAttractFixedRepulsePair_attract_get", _wrap_LJAttractFixedRepulsePair_attract_get, METH_VARARGS, (char *)"LJAttractFixedRepulsePair_attract_get(LJAttractFixedRepulsePair self) -> bool"},
	 { (char *)"LJAttractFixedRepulsePair_atom1_set", _wrap_LJAttractFixedRepulsePair_atom1_set, METH_VARARGS, (char *)"LJAttractFixedRepulsePair_atom1_set(LJAttractFixedRepulsePair self, atomid atom1)"},
	 { (char *)"LJAttractFixedRepulsePair_atom1_get", _wrap_LJAttractFixedRepulsePair_atom1_get, METH_VARARGS, (char *)"LJAttractFixedRepulsePair_atom1_get(LJAttractFixedRepulsePair self) -> atomid"},
	 { (char *)"LJAttractFixedRepulsePair_atom2_set", _wrap_LJAttractFixedRepulsePair_atom2_set, METH_VARARGS, (char *)"LJAttractFixedRepulsePair_atom2_set(LJAttractFixedRepulsePair self, atomid atom2)"},
	 { (char *)"LJAttractFixedRepulsePair_atom2_get", _wrap_LJAttractFixedRepulsePair_atom2_get, METH_VARARGS, (char *)"LJAttractFixedRepulsePair_atom2_get(LJAttractFixedRepulsePair self) -> atomid"},
	 { (char *)"new_LJAttractFixedRepulsePair", _wrap_new_LJAttractFixedRepulsePair, METH_VARARGS, (char *)"\n"
		"LJAttractFixedRepulsePair()\n"
		"new_LJAttractFixedRepulsePair(LJAttractFixedRepulseAtom a1, LJAttractFixedRepulseAtom a2) -> LJAttractFixedRepulsePair\n"
		""},
	 { (char *)"LJAttractFixedRepulsePair_energy", _wrap_LJAttractFixedRepulsePair_energy, METH_VARARGS, (char *)"LJAttractFixedRepulsePair_energy(LJAttractFixedRepulsePair self, Box box) -> flt"},
	 { (char *)"LJAttractFixedRepulsePair_forces", _wrap_LJAttractFixedRepulsePair_forces, METH_VARARGS, (char *)"LJAttractFixedRepulsePair_forces(LJAttractFixedRepulsePair self, Box box) -> Vec"},
	 { (char *)"delete_LJAttractFixedRepulsePair", _wrap_delete_LJAttractFixedRepulsePair, METH_VARARGS, (char *)"delete_LJAttractFixedRepulsePair(LJAttractFixedRepulsePair self)"},
	 { (char *)"LJAttractFixedRepulsePair_swigregister", LJAttractFixedRepulsePair_swigregister, METH_VARARGS, NULL},
	 { (char *)"LJDoubleAtom_epsrep_set", _wrap_LJDoubleAtom_epsrep_set, METH_VARARGS, (char *)"LJDoubleAtom_epsrep_set(LJDoubleAtom self, flt epsrep)"},
	 { (char *)"LJDoubleAtom_epsrep_get", _wrap_LJDoubleAtom_epsrep_get, METH_VARARGS, (char *)"LJDoubleAtom_epsrep_get(LJDoubleAtom self) -> flt"},
	 { (char *)"LJDoubleAtom_sigcut_set", _wrap_LJDoubleAtom_sigcut_set, METH_VARARGS, (char *)"LJDoubleAtom_sigcut_set(LJDoubleAtom self, flt sigcut)"},
	 { (char *)"LJDoubleAtom_sigcut_get", _wrap_LJDoubleAtom_sigcut_get, METH_VARARGS, (char *)"LJDoubleAtom_sigcut_get(LJDoubleAtom self) -> flt"},
	 { (char *)"new_LJDoubleAtom", _wrap_new_LJDoubleAtom, METH_VARARGS, (char *)"\n"
		"LJDoubleAtom(flt epsilon, flt epsrep, flt sigma, atom a, flt cut)\n"
		"new_LJDoubleAtom(atomid a, LJDoubleAtom other) -> LJDoubleAtom\n"
		""},
	 { (char *)"delete_LJDoubleAtom", _wrap_delete_LJDoubleAtom, METH_VARARGS, (char *)"delete_LJDoubleAtom(LJDoubleAtom self)"},
	 { (char *)"LJDoubleAtom_swigregister", LJDoubleAtom_swigregister, METH_VARARGS, NULL},
	 { (char *)"LJDoublePair_eps_set", _wrap_LJDoublePair_eps_set, METH_VARARGS, (char *)"LJDoublePair_eps_set(LJDoublePair self, flt eps)"},
	 { (char *)"LJDoublePair_eps_get", _wrap_LJDoublePair_eps_get, METH_VARARGS, (char *)"LJDoublePair_eps_get(LJDoublePair self) -> flt"},
	 { (char *)"LJDoublePair_repeps_set", _wrap_LJDoublePair_repeps_set, METH_VARARGS, (char *)"LJDoublePair_repeps_set(LJDoublePair self, flt repeps)"},
	 { (char *)"LJDoublePair_repeps_get", _wrap_LJDoublePair_repeps_get, METH_VARARGS, (char *)"LJDoublePair_repeps_get(LJDoublePair self) -> flt"},
	 { (char *)"LJDoublePair_sig_set", _wrap_LJDoublePair_sig_set, METH_VARARGS, (char *)"LJDoublePair_sig_set(LJDoublePair self, flt sig)"},
	 { (char *)"LJDoublePair_sig_get", _wrap_LJDoublePair_sig_get, METH_VARARGS, (char *)"LJDoublePair_sig_get(LJDoublePair self) -> flt"},
	 { (char *)"LJDoublePair_cutR_set", _wrap_LJDoublePair_cutR_set, METH_VARARGS, (char *)"LJDoublePair_cutR_set(LJDoublePair self, flt cutR)"},
	 { (char *)"LJDoublePair_cutR_get", _wrap_LJDoublePair_cutR_get, METH_VARARGS, (char *)"LJDoublePair_cutR_get(LJDoublePair self) -> flt"},
	 { (char *)"LJDoublePair_cutE_set", _wrap_LJDoublePair_cutE_set, METH_VARARGS, (char *)"LJDoublePair_cutE_set(LJDoublePair self, flt cutE)"},
	 { (char *)"LJDoublePair_cutE_get", _wrap_LJDoublePair_cutE_get, METH_VARARGS, (char *)"LJDoublePair_cutE_get(LJDoublePair self) -> flt"},
	 { (char *)"LJDoublePair_attract_set", _wrap_LJDoublePair_attract_set, METH_VARARGS, (char *)"LJDoublePair_attract_set(LJDoublePair self, bool attract)"},
	 { (char *)"LJDoublePair_attract_get", _wrap_LJDoublePair_attract_get, METH_VARARGS, (char *)"LJDoublePair_attract_get(LJDoublePair self) -> bool"},
	 { (char *)"LJDoublePair_atom1_set", _wrap_LJDoublePair_atom1_set, METH_VARARGS, (char *)"LJDoublePair_atom1_set(LJDoublePair self, atomid atom1)"},
	 { (char *)"LJDoublePair_atom1_get", _wrap_LJDoublePair_atom1_get, METH_VARARGS, (char *)"LJDoublePair_atom1_get(LJDoublePair self) -> atomid"},
	 { (char *)"LJDoublePair_atom2_set", _wrap_LJDoublePair_atom2_set, METH_VARARGS, (char *)"LJDoublePair_atom2_set(LJDoublePair self, atomid atom2)"},
	 { (char *)"LJDoublePair_atom2_get", _wrap_LJDoublePair_atom2_get, METH_VARARGS, (char *)"LJDoublePair_atom2_get(LJDoublePair self) -> atomid"},
	 { (char *)"new_LJDoublePair", _wrap_new_LJDoublePair, METH_VARARGS, (char *)"new_LJDoublePair(LJDoubleAtom a1, LJDoubleAtom a2) -> LJDoublePair"},
	 { (char *)"delete_LJDoublePair", _wrap_delete_LJDoublePair, METH_VARARGS, (char *)"delete_LJDoublePair(LJDoublePair self)"},
	 { (char *)"LJDoublePair_swigregister", LJDoublePair_swigregister, METH_VARARGS, NULL},
	 { (char *)"EisMclachlanAtom_dist_set", _wrap_EisMclachlanAtom_dist_set, METH_VARARGS, (char *)"EisMclachlanAtom_dist_set(EisMclachlanAtom self, flt dist)"},
	 { (char *)"EisMclachlanAtom_dist_get", _wrap_EisMclachlanAtom_dist_get, METH_VARARGS, (char *)"EisMclachlanAtom_dist_get(EisMclachlanAtom self) -> flt"},
	 { (char *)"EisMclachlanAtom_sigmai_set", _wrap_EisMclachlanAtom_sigmai_set, METH_VARARGS, (char *)"EisMclachlanAtom_sigmai_set(EisMclachlanAtom self, flt sigmai)"},
	 { (char *)"EisMclachlanAtom_sigmai_get", _wrap_EisMclachlanAtom_sigmai_get, METH_VARARGS, (char *)"EisMclachlanAtom_sigmai_get(EisMclachlanAtom self) -> flt"},
	 { (char *)"new_EisMclachlanAtom", _wrap_new_EisMclachlanAtom, METH_VARARGS, (char *)"\n"
		"EisMclachlanAtom(flt dist, flt sigmai, atom a)\n"
		"new_EisMclachlanAtom(atomid a, EisMclachlanAtom other) -> EisMclachlanAtom\n"
		""},
	 { (char *)"delete_EisMclachlanAtom", _wrap_delete_EisMclachlanAtom, METH_VARARGS, (char *)"delete_EisMclachlanAtom(EisMclachlanAtom self)"},
	 { (char *)"EisMclachlanAtom_swigregister", EisMclachlanAtom_swigregister, METH_VARARGS, NULL},
	 { (char *)"EisMclachlanPair_c0_set", _wrap_EisMclachlanPair_c0_set, METH_VARARGS, (char *)"EisMclachlanPair_c0_set(EisMclachlanPair self, flt c0)"},
	 { (char *)"EisMclachlanPair_c0_get", _wrap_EisMclachlanPair_c0_get, METH_VARARGS, (char *)"EisMclachlanPair_c0_get(EisMclachlanPair self) -> flt"},
	 { (char *)"EisMclachlanPair_c1_set", _wrap_EisMclachlanPair_c1_set, METH_VARARGS, (char *)"EisMclachlanPair_c1_set(EisMclachlanPair self, flt c1)"},
	 { (char *)"EisMclachlanPair_c1_get", _wrap_EisMclachlanPair_c1_get, METH_VARARGS, (char *)"EisMclachlanPair_c1_get(EisMclachlanPair self) -> flt"},
	 { (char *)"EisMclachlanPair_c2_set", _wrap_EisMclachlanPair_c2_set, METH_VARARGS, (char *)"EisMclachlanPair_c2_set(EisMclachlanPair self, flt c2)"},
	 { (char *)"EisMclachlanPair_c2_get", _wrap_EisMclachlanPair_c2_get, METH_VARARGS, (char *)"EisMclachlanPair_c2_get(EisMclachlanPair self) -> flt"},
	 { (char *)"EisMclachlanPair_cutoff_set", _wrap_EisMclachlanPair_cutoff_set, METH_VARARGS, (char *)"EisMclachlanPair_cutoff_set(EisMclachlanPair self, flt cutoff)"},
	 { (char *)"EisMclachlanPair_cutoff_get", _wrap_EisMclachlanPair_cutoff_get, METH_VARARGS, (char *)"EisMclachlanPair_cutoff_get(EisMclachlanPair self) -> flt"},
	 { (char *)"EisMclachlanPair_atom1_set", _wrap_EisMclachlanPair_atom1_set, METH_VARARGS, (char *)"EisMclachlanPair_atom1_set(EisMclachlanPair self, atomid atom1)"},
	 { (char *)"EisMclachlanPair_atom1_get", _wrap_EisMclachlanPair_atom1_get, METH_VARARGS, (char *)"EisMclachlanPair_atom1_get(EisMclachlanPair self) -> atomid"},
	 { (char *)"EisMclachlanPair_atom2_set", _wrap_EisMclachlanPair_atom2_set, METH_VARARGS, (char *)"EisMclachlanPair_atom2_set(EisMclachlanPair self, atomid atom2)"},
	 { (char *)"EisMclachlanPair_atom2_get", _wrap_EisMclachlanPair_atom2_get, METH_VARARGS, (char *)"EisMclachlanPair_atom2_get(EisMclachlanPair self) -> atomid"},
	 { (char *)"new_EisMclachlanPair", _wrap_new_EisMclachlanPair, METH_VARARGS, (char *)"new_EisMclachlanPair(EisMclachlanAtom a1, EisMclachlanAtom a2) -> EisMclachlanPair"},
	 { (char *)"EisMclachlanPair_energy", _wrap_EisMclachlanPair_energy, METH_VARARGS, (char *)"EisMclachlanPair_energy(EisMclachlanPair self, Box box) -> flt"},
	 { (char *)"EisMclachlanPair_forces", _wrap_EisMclachlanPair_forces, METH_VARARGS, (char *)"EisMclachlanPair_forces(EisMclachlanPair self, Box box) -> Vec"},
	 { (char *)"delete_EisMclachlanPair", _wrap_delete_EisMclachlanPair, METH_VARARGS, (char *)"delete_EisMclachlanPair(EisMclachlanPair self)"},
	 { (char *)"EisMclachlanPair_swigregister", EisMclachlanPair_swigregister, METH_VARARGS, NULL},
	 { (char *)"HertzianAtom_eps_set", _wrap_HertzianAtom_eps_set, METH_VARARGS, (char *)"HertzianAtom_eps_set(HertzianAtom self, flt eps)"},
	 { (char *)"HertzianAtom_eps_get", _wrap_HertzianAtom_eps_get, METH_VARARGS, (char *)"HertzianAtom_eps_get(HertzianAtom self) -> flt"},
	 { (char *)"HertzianAtom_sigma_set", _wrap_HertzianAtom_sigma_set, METH_VARARGS, (char *)"HertzianAtom_sigma_set(HertzianAtom self, flt sigma)"},
	 { (char *)"HertzianAtom_sigma_get", _wrap_HertzianAtom_sigma_get, METH_VARARGS, (char *)"HertzianAtom_sigma_get(HertzianAtom self) -> flt"},
	 { (char *)"HertzianAtom_exponent_set", _wrap_HertzianAtom_exponent_set, METH_VARARGS, (char *)"HertzianAtom_exponent_set(HertzianAtom self, flt exponent)"},
	 { (char *)"HertzianAtom_exponent_get", _wrap_HertzianAtom_exponent_get, METH_VARARGS, (char *)"HertzianAtom_exponent_get(HertzianAtom self) -> flt"},
	 { (char *)"new_HertzianAtom", _wrap_new_HertzianAtom, METH_VARARGS, (char *)"\n"
		"HertzianAtom(atom a, flt eps, flt sigma, flt exponent=2.5)\n"
		"HertzianAtom(atom a, flt eps, flt sigma)\n"
		"new_HertzianAtom(atomid a, HertzianAtom other) -> HertzianAtom\n"
		""},
	 { (char *)"delete_HertzianAtom", _wrap_delete_HertzianAtom, METH_VARARGS, (char *)"delete_HertzianAtom(HertzianAtom self)"},
	 { (char *)"HertzianAtom_swigregister", HertzianAtom_swigregister, METH_VARARGS, NULL},
	 { (char *)"HertzianPair_eps_set", _wrap_HertzianPair_eps_set, METH_VARARGS, (char *)"HertzianPair_eps_set(HertzianPair self, flt eps)"},
	 { (char *)"HertzianPair_eps_get", _wrap_HertzianPair_eps_get, METH_VARARGS, (char *)"HertzianPair_eps_get(HertzianPair self) -> flt"},
	 { (char *)"HertzianPair_sig_set", _wrap_HertzianPair_sig_set, METH_VARARGS, (char *)"HertzianPair_sig_set(HertzianPair self, flt sig)"},
	 { (char *)"HertzianPair_sig_get", _wrap_HertzianPair_sig_get, METH_VARARGS, (char *)"HertzianPair_sig_get(HertzianPair self) -> flt"},
	 { (char *)"HertzianPair_exponent_set", _wrap_HertzianPair_exponent_set, METH_VARARGS, (char *)"HertzianPair_exponent_set(HertzianPair self, flt exponent)"},
	 { (char *)"HertzianPair_exponent_get", _wrap_HertzianPair_exponent_get, METH_VARARGS, (char *)"HertzianPair_exponent_get(HertzianPair self) -> flt"},
	 { (char *)"HertzianPair_atom1_set", _wrap_HertzianPair_atom1_set, METH_VARARGS, (char *)"HertzianPair_atom1_set(HertzianPair self, atomid atom1)"},
	 { (char *)"HertzianPair_atom1_get", _wrap_HertzianPair_atom1_get, METH_VARARGS, (char *)"HertzianPair_atom1_get(HertzianPair self) -> atomid"},
	 { (char *)"HertzianPair_atom2_set", _wrap_HertzianPair_atom2_set, METH_VARARGS, (char *)"HertzianPair_atom2_set(HertzianPair self, atomid atom2)"},
	 { (char *)"HertzianPair_atom2_get", _wrap_HertzianPair_atom2_get, METH_VARARGS, (char *)"HertzianPair_atom2_get(HertzianPair self) -> atomid"},
	 { (char *)"new_HertzianPair", _wrap_new_HertzianPair, METH_VARARGS, (char *)"new_HertzianPair(HertzianAtom a1, HertzianAtom a2) -> HertzianPair"},
	 { (char *)"HertzianPair_energy", _wrap_HertzianPair_energy, METH_VARARGS, (char *)"HertzianPair_energy(HertzianPair self, Box box) -> flt"},
	 { (char *)"HertzianPair_forces", _wrap_HertzianPair_forces, METH_VARARGS, (char *)"HertzianPair_forces(HertzianPair self, Box box) -> Vec"},
	 { (char *)"HertzianPair_fill", _wrap_HertzianPair_fill, METH_VARARGS, (char *)"HertzianPair_fill(HertzianPair self, Box box, forcepairx fpair)"},
	 { (char *)"delete_HertzianPair", _wrap_delete_HertzianPair, METH_VARARGS, (char *)"delete_HertzianPair(HertzianPair self)"},
	 { (char *)"HertzianPair_swigregister", HertzianPair_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LJsimple", _wrap_new_LJsimple, METH_VARARGS, (char *)"\n"
		"LJsimple(flt cutoffdist, std::vector< LJatom > atms=std::vector< LJatom >())\n"
		"new_LJsimple(flt cutoffdist) -> LJsimple\n"
		""},
	 { (char *)"LJsimple_add", _wrap_LJsimple_add, METH_VARARGS, (char *)"\n"
		"add(LJatom a)\n"
		"LJsimple_add(LJsimple self, atom a, flt epsilon, flt sigma)\n"
		""},
	 { (char *)"LJsimple_ignore", _wrap_LJsimple_ignore, METH_VARARGS, (char *)"\n"
		"ignore(atomid a, atomid b)\n"
		"LJsimple_ignore(LJsimple self, atom a, atom b)\n"
		""},
	 { (char *)"LJsimple_ignore_size", _wrap_LJsimple_ignore_size, METH_VARARGS, (char *)"LJsimple_ignore_size(LJsimple self) -> uint"},
	 { (char *)"LJsimple_atoms_size", _wrap_LJsimple_atoms_size, METH_VARARGS, (char *)"LJsimple_atoms_size(LJsimple self) -> uint"},
	 { (char *)"LJsimple_energy", _wrap_LJsimple_energy, METH_VARARGS, (char *)"LJsimple_energy(LJsimple self, Box box) -> flt"},
	 { (char *)"LJsimple_pressure", _wrap_LJsimple_pressure, METH_VARARGS, (char *)"LJsimple_pressure(LJsimple self, Box box) -> flt"},
	 { (char *)"LJsimple_setForces", _wrap_LJsimple_setForces, METH_VARARGS, (char *)"LJsimple_setForces(LJsimple self, Box box)"},
	 { (char *)"delete_LJsimple", _wrap_delete_LJsimple, METH_VARARGS, (char *)"delete_LJsimple(LJsimple self)"},
	 { (char *)"LJsimple_swigregister", LJsimple_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Charges", _wrap_new_Charges, METH_VARARGS, (char *)"\n"
		"Charges(flt screenlength, flt k=1, std::vector< Charged > atms=std::vector< Charged >())\n"
		"Charges(flt screenlength, flt k=1)\n"
		"new_Charges(flt screenlength) -> Charges\n"
		""},
	 { (char *)"Charges_add", _wrap_Charges_add, METH_VARARGS, (char *)"\n"
		"add(Charged a)\n"
		"Charges_add(Charges self, atom a, flt q)\n"
		""},
	 { (char *)"Charges_ignore", _wrap_Charges_ignore, METH_VARARGS, (char *)"\n"
		"ignore(atomid a, atomid b)\n"
		"Charges_ignore(Charges self, atom a, atom b)\n"
		""},
	 { (char *)"Charges_ignore_size", _wrap_Charges_ignore_size, METH_VARARGS, (char *)"Charges_ignore_size(Charges self) -> uint"},
	 { (char *)"Charges_size", _wrap_Charges_size, METH_VARARGS, (char *)"Charges_size(Charges self) -> uint"},
	 { (char *)"Charges_energy", _wrap_Charges_energy, METH_VARARGS, (char *)"Charges_energy(Charges self, Box box) -> flt"},
	 { (char *)"Charges_pressure", _wrap_Charges_pressure, METH_VARARGS, (char *)"Charges_pressure(Charges self, Box box) -> flt"},
	 { (char *)"Charges_setForces", _wrap_Charges_setForces, METH_VARARGS, (char *)"Charges_setForces(Charges self, Box box)"},
	 { (char *)"delete_Charges", _wrap_delete_Charges, METH_VARARGS, (char *)"delete_Charges(Charges self)"},
	 { (char *)"Charges_swigregister", Charges_swigregister, METH_VARARGS, NULL},
	 { (char *)"toBuffer", _wrap_toBuffer, METH_VARARGS, (char *)"toBuffer(std::vector< Vec *,std::allocator< Vec * > > arr, double * buffer) -> bool"},
	 { (char *)"jamminglist_assigned_set", _wrap_jamminglist_assigned_set, METH_VARARGS, (char *)"jamminglist_assigned_set(jamminglist self, _uintvector assigned)"},
	 { (char *)"jamminglist_assigned_get", _wrap_jamminglist_assigned_get, METH_VARARGS, (char *)"jamminglist_assigned_get(jamminglist self) -> _uintvector"},
	 { (char *)"jamminglist_distsq_set", _wrap_jamminglist_distsq_set, METH_VARARGS, (char *)"jamminglist_distsq_set(jamminglist self, flt distsq)"},
	 { (char *)"jamminglist_distsq_get", _wrap_jamminglist_distsq_get, METH_VARARGS, (char *)"jamminglist_distsq_get(jamminglist self) -> flt"},
	 { (char *)"new_jamminglist", _wrap_new_jamminglist, METH_VARARGS, (char *)"\n"
		"jamminglist()\n"
		"jamminglist(jamminglist other)\n"
		"new_jamminglist(jamminglist other, uint expand, flt addeddist) -> jamminglist\n"
		""},
	 { (char *)"jamminglist_size", _wrap_jamminglist_size, METH_VARARGS, (char *)"jamminglist_size(jamminglist self) -> uint"},
	 { (char *)"jamminglist___lt__", _wrap_jamminglist___lt__, METH_VARARGS, (char *)"jamminglist___lt__(jamminglist self, jamminglist other) -> bool"},
	 { (char *)"delete_jamminglist", _wrap_delete_jamminglist, METH_VARARGS, (char *)"delete_jamminglist(jamminglist self)"},
	 { (char *)"jamminglist_swigregister", jamminglist_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_jammingtree", _wrap_new_jammingtree, METH_VARARGS, (char *)"new_jammingtree(Box box, vecvector A, vecvector B) -> jammingtree"},
	 { (char *)"jammingtree_expand", _wrap_jammingtree_expand, METH_VARARGS, (char *)"\n"
		"expand() -> bool\n"
		"jammingtree_expand(jammingtree self, uint n) -> bool\n"
		""},
	 { (char *)"jammingtree_mylist", _wrap_jammingtree_mylist, METH_VARARGS, (char *)"jammingtree_mylist(jammingtree self) -> _jamminglist"},
	 { (char *)"jammingtree_copylist", _wrap_jammingtree_copylist, METH_VARARGS, (char *)"jammingtree_copylist(jammingtree self) -> _jamminglist"},
	 { (char *)"jammingtree_curbest", _wrap_jammingtree_curbest, METH_VARARGS, (char *)"jammingtree_curbest(jammingtree self) -> jamminglist"},
	 { (char *)"jammingtree_size", _wrap_jammingtree_size, METH_VARARGS, (char *)"jammingtree_size(jammingtree self) -> uint"},
	 { (char *)"delete_jammingtree", _wrap_delete_jammingtree, METH_VARARGS, (char *)"delete_jammingtree(jammingtree self)"},
	 { (char *)"jammingtree_swigregister", jammingtree_swigregister, METH_VARARGS, NULL},
	 { (char *)"jamminglistrot_rotation_set", _wrap_jamminglistrot_rotation_set, METH_VARARGS, (char *)"jamminglistrot_rotation_set(jamminglistrot self, uint rotation)"},
	 { (char *)"jamminglistrot_rotation_get", _wrap_jamminglistrot_rotation_get, METH_VARARGS, (char *)"jamminglistrot_rotation_get(jamminglistrot self) -> uint"},
	 { (char *)"new_jamminglistrot", _wrap_new_jamminglistrot, METH_VARARGS, (char *)"\n"
		"jamminglistrot()\n"
		"jamminglistrot(uint rot)\n"
		"jamminglistrot(jamminglistrot other)\n"
		"new_jamminglistrot(jamminglistrot other, uint expand, flt addeddist) -> jamminglistrot\n"
		""},
	 { (char *)"jamminglistrot___lt__", _wrap_jamminglistrot___lt__, METH_VARARGS, (char *)"jamminglistrot___lt__(jamminglistrot self, jamminglistrot other) -> bool"},
	 { (char *)"delete_jamminglistrot", _wrap_delete_jamminglistrot, METH_VARARGS, (char *)"delete_jamminglistrot(jamminglistrot self)"},
	 { (char *)"jamminglistrot_swigregister", jamminglistrot_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_jammingtree2", _wrap_new_jammingtree2, METH_VARARGS, (char *)"new_jammingtree2(Box box, vecvector A, vecvector B) -> jammingtree2"},
	 { (char *)"jammingtree2_distance", _wrap_jammingtree2_distance, METH_VARARGS, (char *)"jammingtree2_distance(jammingtree2 self, jamminglistrot jlist) -> flt"},
	 { (char *)"jammingtree2_expand", _wrap_jammingtree2_expand, METH_VARARGS, (char *)"\n"
		"expand(jamminglistrot curjlist) -> _jamminglistrot\n"
		"expand() -> bool\n"
		"jammingtree2_expand(jammingtree2 self, uint n) -> bool\n"
		""},
	 { (char *)"jammingtree2_expandto", _wrap_jammingtree2_expandto, METH_VARARGS, (char *)"jammingtree2_expandto(jammingtree2 self, flt maxdistsq) -> bool"},
	 { (char *)"jammingtree2_mylist", _wrap_jammingtree2_mylist, METH_VARARGS, (char *)"jammingtree2_mylist(jammingtree2 self) -> _jamminglistrot"},
	 { (char *)"jammingtree2_copylist", _wrap_jammingtree2_copylist, METH_VARARGS, (char *)"\n"
		"copylist() -> _jamminglistrot\n"
		"jammingtree2_copylist(jammingtree2 self, uint n) -> _jamminglistrot\n"
		""},
	 { (char *)"jammingtree2_curbest", _wrap_jammingtree2_curbest, METH_VARARGS, (char *)"jammingtree2_curbest(jammingtree2 self) -> jamminglistrot"},
	 { (char *)"jammingtree2_size", _wrap_jammingtree2_size, METH_VARARGS, (char *)"jammingtree2_size(jammingtree2 self) -> uint"},
	 { (char *)"jammingtree2_locationsB", _wrap_jammingtree2_locationsB, METH_VARARGS, (char *)"\n"
		"locationsB(jamminglistrot jlist) -> vecvector\n"
		"jammingtree2_locationsB(jammingtree2 self) -> vecvector\n"
		""},
	 { (char *)"jammingtree2_locationsA", _wrap_jammingtree2_locationsA, METH_VARARGS, (char *)"\n"
		"locationsA(jamminglistrot jlist) -> vecvector\n"
		"jammingtree2_locationsA(jammingtree2 self) -> vecvector\n"
		""},
	 { (char *)"delete_jammingtree2", _wrap_delete_jammingtree2, METH_VARARGS, (char *)"delete_jammingtree2(jammingtree2 self)"},
	 { (char *)"jammingtree2_swigregister", jammingtree2_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_jammingtreeBD", _wrap_new_jammingtreeBD, METH_VARARGS, (char *)"\n"
		"jammingtreeBD(Box box, vecvector A, vecvector B, uint cutoff)\n"
		"new_jammingtreeBD(Box box, vecvector A, vecvector B, uint cutoffA, uint cutoffB) -> jammingtreeBD\n"
		""},
	 { (char *)"jammingtreeBD_expand", _wrap_jammingtreeBD_expand, METH_VARARGS, (char *)"\n"
		"expand(jamminglistrot curjlist) -> _jamminglistrot\n"
		"expand() -> bool\n"
		"jammingtreeBD_expand(jammingtreeBD self, uint n) -> bool\n"
		""},
	 { (char *)"delete_jammingtreeBD", _wrap_delete_jammingtreeBD, METH_VARARGS, (char *)"delete_jammingtreeBD(jammingtreeBD self)"},
	 { (char *)"jammingtreeBD_swigregister", jammingtreeBD_swigregister, METH_VARARGS, NULL},
	 { (char *)"constraint_apply", _wrap_constraint_apply, METH_VARARGS, (char *)"constraint_apply(constraint self, Box box)"},
	 { (char *)"constraint_ndof", _wrap_constraint_ndof, METH_VARARGS, (char *)"constraint_ndof(constraint self) -> int"},
	 { (char *)"delete_constraint", _wrap_delete_constraint, METH_VARARGS, (char *)"delete_constraint(constraint self)"},
	 { (char *)"constraint_swigregister", constraint_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_coordConstraint", _wrap_new_coordConstraint, METH_VARARGS, (char *)"\n"
		"coordConstraint(atom atm, bool fixx, bool fixy, bool fixz, Vec loc)\n"
		"coordConstraint(atom atm, bool fixx, bool fixy, bool fixz)\n"
		"new_coordConstraint(atom atm) -> coordConstraint\n"
		""},
	 { (char *)"coordConstraint_ndof", _wrap_coordConstraint_ndof, METH_VARARGS, (char *)"coordConstraint_ndof(coordConstraint self) -> int"},
	 { (char *)"coordConstraint_apply", _wrap_coordConstraint_apply, METH_VARARGS, (char *)"coordConstraint_apply(coordConstraint self, Box box)"},
	 { (char *)"delete_coordConstraint", _wrap_delete_coordConstraint, METH_VARARGS, (char *)"delete_coordConstraint(coordConstraint self)"},
	 { (char *)"coordConstraint_swigregister", coordConstraint_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_coordCOMConstraint", _wrap_new_coordCOMConstraint, METH_VARARGS, (char *)"\n"
		"coordCOMConstraint(atomgroup atm, bool fixx, bool fixy, bool fixz, Vec loc)\n"
		"coordCOMConstraint(atomgroup atm, bool fixx, bool fixy, bool fixz)\n"
		"new_coordCOMConstraint(atomgroup atm) -> coordCOMConstraint\n"
		""},
	 { (char *)"coordCOMConstraint_ndof", _wrap_coordCOMConstraint_ndof, METH_VARARGS, (char *)"coordCOMConstraint_ndof(coordCOMConstraint self) -> int"},
	 { (char *)"coordCOMConstraint_apply", _wrap_coordCOMConstraint_apply, METH_VARARGS, (char *)"coordCOMConstraint_apply(coordCOMConstraint self, Box box)"},
	 { (char *)"delete_coordCOMConstraint", _wrap_delete_coordCOMConstraint, METH_VARARGS, (char *)"delete_coordCOMConstraint(coordCOMConstraint self)"},
	 { (char *)"coordCOMConstraint_swigregister", coordCOMConstraint_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_relativeConstraint", _wrap_new_relativeConstraint, METH_VARARGS, (char *)"\n"
		"relativeConstraint(atom atm1, atom atm2, bool fixx, bool fixy, bool fixz, Vec loc)\n"
		"relativeConstraint(atom atm1, atom atm2, bool fixx, bool fixy, bool fixz)\n"
		"new_relativeConstraint(atom atm1, atom atm2) -> relativeConstraint\n"
		""},
	 { (char *)"relativeConstraint_ndof", _wrap_relativeConstraint_ndof, METH_VARARGS, (char *)"relativeConstraint_ndof(relativeConstraint self) -> int"},
	 { (char *)"relativeConstraint_apply", _wrap_relativeConstraint_apply, METH_VARARGS, (char *)"relativeConstraint_apply(relativeConstraint self, Box box)"},
	 { (char *)"delete_relativeConstraint", _wrap_delete_relativeConstraint, METH_VARARGS, (char *)"delete_relativeConstraint(relativeConstraint self)"},
	 { (char *)"relativeConstraint_swigregister", relativeConstraint_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NPHGaussianConstraint", _wrap_new_NPHGaussianConstraint, METH_VARARGS, (char *)"new_NPHGaussianConstraint(OriginBox box, avector groups) -> NPHGaussianConstraint"},
	 { (char *)"NPHGaussianConstraint_ndof", _wrap_NPHGaussianConstraint_ndof, METH_VARARGS, (char *)"NPHGaussianConstraint_ndof(NPHGaussianConstraint self) -> int"},
	 { (char *)"NPHGaussianConstraint_apply", _wrap_NPHGaussianConstraint_apply, METH_VARARGS, (char *)"NPHGaussianConstraint_apply(NPHGaussianConstraint self, Box box2)"},
	 { (char *)"delete_NPHGaussianConstraint", _wrap_delete_NPHGaussianConstraint, METH_VARARGS, (char *)"delete_NPHGaussianConstraint(NPHGaussianConstraint self)"},
	 { (char *)"NPHGaussianConstraint_swigregister", NPHGaussianConstraint_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LJgroup", _wrap_new_LJgroup, METH_VARARGS, (char *)"new_LJgroup(neighborlist neighbors) -> LJgroup"},
	 { (char *)"LJgroup_add", _wrap_LJgroup_add, METH_VARARGS, (char *)"LJgroup_add(LJgroup self, LJatom atm)"},
	 { (char *)"LJgroup_update_pairs", _wrap_LJgroup_update_pairs, METH_VARARGS, (char *)"LJgroup_update_pairs(LJgroup self)"},
	 { (char *)"LJgroup_getpair", _wrap_LJgroup_getpair, METH_VARARGS, (char *)"LJgroup_getpair(LJgroup self, idpair pair) -> LJpair"},
	 { (char *)"LJgroup_energy", _wrap_LJgroup_energy, METH_VARARGS, (char *)"\n"
		"energy(Box box, idpair pair) -> flt\n"
		"LJgroup_energy(LJgroup self, Box box) -> flt\n"
		""},
	 { (char *)"LJgroup_pressure", _wrap_LJgroup_pressure, METH_VARARGS, (char *)"LJgroup_pressure(LJgroup self, Box box) -> flt"},
	 { (char *)"LJgroup_size", _wrap_LJgroup_size, METH_VARARGS, (char *)"LJgroup_size(LJgroup self) -> uint"},
	 { (char *)"LJgroup_energy_pair", _wrap_LJgroup_energy_pair, METH_VARARGS, (char *)"LJgroup_energy_pair(LJgroup self, LJpair pair, Box box) -> flt"},
	 { (char *)"LJgroup_setForces", _wrap_LJgroup_setForces, METH_VARARGS, (char *)"LJgroup_setForces(LJgroup self, Box box)"},
	 { (char *)"LJgroup_setForcesGetPressure", _wrap_LJgroup_setForcesGetPressure, METH_VARARGS, (char *)"LJgroup_setForcesGetPressure(LJgroup self, Box box) -> flt"},
	 { (char *)"LJgroup_forces_pair", _wrap_LJgroup_forces_pair, METH_VARARGS, (char *)"LJgroup_forces_pair(LJgroup self, LJpair pair, Box box) -> Vec"},
	 { (char *)"LJgroup_atom_list", _wrap_LJgroup_atom_list, METH_VARARGS, (char *)"LJgroup_atom_list(LJgroup self) -> std::vector< LJatom > &"},
	 { (char *)"LJgroup_nlist", _wrap_LJgroup_nlist, METH_VARARGS, (char *)"LJgroup_nlist(LJgroup self) -> neighborlist"},
	 { (char *)"delete_LJgroup", _wrap_delete_LJgroup, METH_VARARGS, (char *)"delete_LJgroup(LJgroup self)"},
	 { (char *)"LJgroup_swigregister", LJgroup_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LJfull", _wrap_new_LJfull, METH_VARARGS, (char *)"new_LJfull(neighborlist neighbors) -> LJfull"},
	 { (char *)"LJfull_add", _wrap_LJfull_add, METH_VARARGS, (char *)"LJfull_add(LJfull self, LJatomcut atm)"},
	 { (char *)"LJfull_update_pairs", _wrap_LJfull_update_pairs, METH_VARARGS, (char *)"LJfull_update_pairs(LJfull self)"},
	 { (char *)"LJfull_getpair", _wrap_LJfull_getpair, METH_VARARGS, (char *)"LJfull_getpair(LJfull self, idpair pair) -> LJAttractPair"},
	 { (char *)"LJfull_energy", _wrap_LJfull_energy, METH_VARARGS, (char *)"\n"
		"energy(Box box, idpair pair) -> flt\n"
		"LJfull_energy(LJfull self, Box box) -> flt\n"
		""},
	 { (char *)"LJfull_pressure", _wrap_LJfull_pressure, METH_VARARGS, (char *)"LJfull_pressure(LJfull self, Box box) -> flt"},
	 { (char *)"LJfull_size", _wrap_LJfull_size, METH_VARARGS, (char *)"LJfull_size(LJfull self) -> uint"},
	 { (char *)"LJfull_energy_pair", _wrap_LJfull_energy_pair, METH_VARARGS, (char *)"LJfull_energy_pair(LJfull self, LJAttractPair pair, Box box) -> flt"},
	 { (char *)"LJfull_setForces", _wrap_LJfull_setForces, METH_VARARGS, (char *)"LJfull_setForces(LJfull self, Box box)"},
	 { (char *)"LJfull_setForcesGetPressure", _wrap_LJfull_setForcesGetPressure, METH_VARARGS, (char *)"LJfull_setForcesGetPressure(LJfull self, Box box) -> flt"},
	 { (char *)"LJfull_forces_pair", _wrap_LJfull_forces_pair, METH_VARARGS, (char *)"LJfull_forces_pair(LJfull self, LJAttractPair pair, Box box) -> Vec"},
	 { (char *)"LJfull_atom_list", _wrap_LJfull_atom_list, METH_VARARGS, (char *)"LJfull_atom_list(LJfull self) -> std::vector< LJatomcut > &"},
	 { (char *)"LJfull_nlist", _wrap_LJfull_nlist, METH_VARARGS, (char *)"LJfull_nlist(LJfull self) -> neighborlist"},
	 { (char *)"delete_LJfull", _wrap_delete_LJfull, METH_VARARGS, (char *)"delete_LJfull(LJfull self)"},
	 { (char *)"LJfull_swigregister", LJfull_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Hydrophobicity", _wrap_new_Hydrophobicity, METH_VARARGS, (char *)"new_Hydrophobicity(neighborlist neighbors) -> Hydrophobicity"},
	 { (char *)"Hydrophobicity_add", _wrap_Hydrophobicity_add, METH_VARARGS, (char *)"Hydrophobicity_add(Hydrophobicity self, HydroAtom atm)"},
	 { (char *)"Hydrophobicity_update_pairs", _wrap_Hydrophobicity_update_pairs, METH_VARARGS, (char *)"Hydrophobicity_update_pairs(Hydrophobicity self)"},
	 { (char *)"Hydrophobicity_getpair", _wrap_Hydrophobicity_getpair, METH_VARARGS, (char *)"Hydrophobicity_getpair(Hydrophobicity self, idpair pair) -> HydroPair"},
	 { (char *)"Hydrophobicity_energy", _wrap_Hydrophobicity_energy, METH_VARARGS, (char *)"\n"
		"energy(Box box, idpair pair) -> flt\n"
		"Hydrophobicity_energy(Hydrophobicity self, Box box) -> flt\n"
		""},
	 { (char *)"Hydrophobicity_pressure", _wrap_Hydrophobicity_pressure, METH_VARARGS, (char *)"Hydrophobicity_pressure(Hydrophobicity self, Box box) -> flt"},
	 { (char *)"Hydrophobicity_size", _wrap_Hydrophobicity_size, METH_VARARGS, (char *)"Hydrophobicity_size(Hydrophobicity self) -> uint"},
	 { (char *)"Hydrophobicity_energy_pair", _wrap_Hydrophobicity_energy_pair, METH_VARARGS, (char *)"Hydrophobicity_energy_pair(Hydrophobicity self, HydroPair pair, Box box) -> flt"},
	 { (char *)"Hydrophobicity_setForces", _wrap_Hydrophobicity_setForces, METH_VARARGS, (char *)"Hydrophobicity_setForces(Hydrophobicity self, Box box)"},
	 { (char *)"Hydrophobicity_setForcesGetPressure", _wrap_Hydrophobicity_setForcesGetPressure, METH_VARARGS, (char *)"Hydrophobicity_setForcesGetPressure(Hydrophobicity self, Box box) -> flt"},
	 { (char *)"Hydrophobicity_forces_pair", _wrap_Hydrophobicity_forces_pair, METH_VARARGS, (char *)"Hydrophobicity_forces_pair(Hydrophobicity self, HydroPair pair, Box box) -> Vec"},
	 { (char *)"Hydrophobicity_atom_list", _wrap_Hydrophobicity_atom_list, METH_VARARGS, (char *)"Hydrophobicity_atom_list(Hydrophobicity self) -> std::vector< HydroAtom > &"},
	 { (char *)"Hydrophobicity_nlist", _wrap_Hydrophobicity_nlist, METH_VARARGS, (char *)"Hydrophobicity_nlist(Hydrophobicity self) -> neighborlist"},
	 { (char *)"delete_Hydrophobicity", _wrap_delete_Hydrophobicity, METH_VARARGS, (char *)"delete_Hydrophobicity(Hydrophobicity self)"},
	 { (char *)"Hydrophobicity_swigregister", Hydrophobicity_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LJdetailed", _wrap_new_LJdetailed, METH_VARARGS, (char *)"new_LJdetailed(neighborlist neighbors) -> LJdetailed"},
	 { (char *)"LJdetailed_add", _wrap_LJdetailed_add, METH_VARARGS, (char *)"LJdetailed_add(LJdetailed self, LJAtomIndexed atm)"},
	 { (char *)"LJdetailed_update_pairs", _wrap_LJdetailed_update_pairs, METH_VARARGS, (char *)"LJdetailed_update_pairs(LJdetailed self)"},
	 { (char *)"LJdetailed_getpair", _wrap_LJdetailed_getpair, METH_VARARGS, (char *)"LJdetailed_getpair(LJdetailed self, idpair pair) -> LJFullPair"},
	 { (char *)"LJdetailed_energy", _wrap_LJdetailed_energy, METH_VARARGS, (char *)"\n"
		"energy(Box box, idpair pair) -> flt\n"
		"LJdetailed_energy(LJdetailed self, Box box) -> flt\n"
		""},
	 { (char *)"LJdetailed_pressure", _wrap_LJdetailed_pressure, METH_VARARGS, (char *)"LJdetailed_pressure(LJdetailed self, Box box) -> flt"},
	 { (char *)"LJdetailed_size", _wrap_LJdetailed_size, METH_VARARGS, (char *)"LJdetailed_size(LJdetailed self) -> uint"},
	 { (char *)"LJdetailed_energy_pair", _wrap_LJdetailed_energy_pair, METH_VARARGS, (char *)"LJdetailed_energy_pair(LJdetailed self, LJFullPair pair, Box box) -> flt"},
	 { (char *)"LJdetailed_setForces", _wrap_LJdetailed_setForces, METH_VARARGS, (char *)"LJdetailed_setForces(LJdetailed self, Box box)"},
	 { (char *)"LJdetailed_setForcesGetPressure", _wrap_LJdetailed_setForcesGetPressure, METH_VARARGS, (char *)"LJdetailed_setForcesGetPressure(LJdetailed self, Box box) -> flt"},
	 { (char *)"LJdetailed_forces_pair", _wrap_LJdetailed_forces_pair, METH_VARARGS, (char *)"LJdetailed_forces_pair(LJdetailed self, LJFullPair pair, Box box) -> Vec"},
	 { (char *)"LJdetailed_atom_list", _wrap_LJdetailed_atom_list, METH_VARARGS, (char *)"LJdetailed_atom_list(LJdetailed self) -> std::vector< LJAtomIndexed > &"},
	 { (char *)"LJdetailed_nlist", _wrap_LJdetailed_nlist, METH_VARARGS, (char *)"LJdetailed_nlist(LJdetailed self) -> neighborlist"},
	 { (char *)"delete_LJdetailed", _wrap_delete_LJdetailed, METH_VARARGS, (char *)"delete_LJdetailed(LJdetailed self)"},
	 { (char *)"LJdetailed_swigregister", LJdetailed_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LJAttractRepulse", _wrap_new_LJAttractRepulse, METH_VARARGS, (char *)"new_LJAttractRepulse(neighborlist neighbors) -> LJAttractRepulse"},
	 { (char *)"LJAttractRepulse_add", _wrap_LJAttractRepulse_add, METH_VARARGS, (char *)"LJAttractRepulse_add(LJAttractRepulse self, LJAttractRepulseAtom atm)"},
	 { (char *)"LJAttractRepulse_update_pairs", _wrap_LJAttractRepulse_update_pairs, METH_VARARGS, (char *)"LJAttractRepulse_update_pairs(LJAttractRepulse self)"},
	 { (char *)"LJAttractRepulse_getpair", _wrap_LJAttractRepulse_getpair, METH_VARARGS, (char *)"LJAttractRepulse_getpair(LJAttractRepulse self, idpair pair) -> LJAttractRepulsePair"},
	 { (char *)"LJAttractRepulse_energy", _wrap_LJAttractRepulse_energy, METH_VARARGS, (char *)"\n"
		"energy(Box box, idpair pair) -> flt\n"
		"LJAttractRepulse_energy(LJAttractRepulse self, Box box) -> flt\n"
		""},
	 { (char *)"LJAttractRepulse_pressure", _wrap_LJAttractRepulse_pressure, METH_VARARGS, (char *)"LJAttractRepulse_pressure(LJAttractRepulse self, Box box) -> flt"},
	 { (char *)"LJAttractRepulse_size", _wrap_LJAttractRepulse_size, METH_VARARGS, (char *)"LJAttractRepulse_size(LJAttractRepulse self) -> uint"},
	 { (char *)"LJAttractRepulse_energy_pair", _wrap_LJAttractRepulse_energy_pair, METH_VARARGS, (char *)"LJAttractRepulse_energy_pair(LJAttractRepulse self, LJAttractRepulsePair pair, Box box) -> flt"},
	 { (char *)"LJAttractRepulse_setForces", _wrap_LJAttractRepulse_setForces, METH_VARARGS, (char *)"LJAttractRepulse_setForces(LJAttractRepulse self, Box box)"},
	 { (char *)"LJAttractRepulse_setForcesGetPressure", _wrap_LJAttractRepulse_setForcesGetPressure, METH_VARARGS, (char *)"LJAttractRepulse_setForcesGetPressure(LJAttractRepulse self, Box box) -> flt"},
	 { (char *)"LJAttractRepulse_forces_pair", _wrap_LJAttractRepulse_forces_pair, METH_VARARGS, (char *)"LJAttractRepulse_forces_pair(LJAttractRepulse self, LJAttractRepulsePair pair, Box box) -> Vec"},
	 { (char *)"LJAttractRepulse_atom_list", _wrap_LJAttractRepulse_atom_list, METH_VARARGS, (char *)"LJAttractRepulse_atom_list(LJAttractRepulse self) -> std::vector< LJAttractRepulseAtom > &"},
	 { (char *)"LJAttractRepulse_nlist", _wrap_LJAttractRepulse_nlist, METH_VARARGS, (char *)"LJAttractRepulse_nlist(LJAttractRepulse self) -> neighborlist"},
	 { (char *)"delete_LJAttractRepulse", _wrap_delete_LJAttractRepulse, METH_VARARGS, (char *)"delete_LJAttractRepulse(LJAttractRepulse self)"},
	 { (char *)"LJAttractRepulse_swigregister", LJAttractRepulse_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LJAttractFixedRepulse", _wrap_new_LJAttractFixedRepulse, METH_VARARGS, (char *)"new_LJAttractFixedRepulse(neighborlist neighbors) -> LJAttractFixedRepulse"},
	 { (char *)"LJAttractFixedRepulse_add", _wrap_LJAttractFixedRepulse_add, METH_VARARGS, (char *)"LJAttractFixedRepulse_add(LJAttractFixedRepulse self, LJAttractFixedRepulseAtom atm)"},
	 { (char *)"LJAttractFixedRepulse_update_pairs", _wrap_LJAttractFixedRepulse_update_pairs, METH_VARARGS, (char *)"LJAttractFixedRepulse_update_pairs(LJAttractFixedRepulse self)"},
	 { (char *)"LJAttractFixedRepulse_getpair", _wrap_LJAttractFixedRepulse_getpair, METH_VARARGS, (char *)"LJAttractFixedRepulse_getpair(LJAttractFixedRepulse self, idpair pair) -> LJAttractFixedRepulsePair"},
	 { (char *)"LJAttractFixedRepulse_energy", _wrap_LJAttractFixedRepulse_energy, METH_VARARGS, (char *)"\n"
		"energy(Box box, idpair pair) -> flt\n"
		"LJAttractFixedRepulse_energy(LJAttractFixedRepulse self, Box box) -> flt\n"
		""},
	 { (char *)"LJAttractFixedRepulse_pressure", _wrap_LJAttractFixedRepulse_pressure, METH_VARARGS, (char *)"LJAttractFixedRepulse_pressure(LJAttractFixedRepulse self, Box box) -> flt"},
	 { (char *)"LJAttractFixedRepulse_size", _wrap_LJAttractFixedRepulse_size, METH_VARARGS, (char *)"LJAttractFixedRepulse_size(LJAttractFixedRepulse self) -> uint"},
	 { (char *)"LJAttractFixedRepulse_energy_pair", _wrap_LJAttractFixedRepulse_energy_pair, METH_VARARGS, (char *)"LJAttractFixedRepulse_energy_pair(LJAttractFixedRepulse self, LJAttractFixedRepulsePair pair, Box box) -> flt"},
	 { (char *)"LJAttractFixedRepulse_setForces", _wrap_LJAttractFixedRepulse_setForces, METH_VARARGS, (char *)"LJAttractFixedRepulse_setForces(LJAttractFixedRepulse self, Box box)"},
	 { (char *)"LJAttractFixedRepulse_setForcesGetPressure", _wrap_LJAttractFixedRepulse_setForcesGetPressure, METH_VARARGS, (char *)"LJAttractFixedRepulse_setForcesGetPressure(LJAttractFixedRepulse self, Box box) -> flt"},
	 { (char *)"LJAttractFixedRepulse_forces_pair", _wrap_LJAttractFixedRepulse_forces_pair, METH_VARARGS, (char *)"LJAttractFixedRepulse_forces_pair(LJAttractFixedRepulse self, LJAttractFixedRepulsePair pair, Box box) -> Vec"},
	 { (char *)"LJAttractFixedRepulse_atom_list", _wrap_LJAttractFixedRepulse_atom_list, METH_VARARGS, (char *)"LJAttractFixedRepulse_atom_list(LJAttractFixedRepulse self) -> std::vector< LJAttractFixedRepulseAtom > &"},
	 { (char *)"LJAttractFixedRepulse_nlist", _wrap_LJAttractFixedRepulse_nlist, METH_VARARGS, (char *)"LJAttractFixedRepulse_nlist(LJAttractFixedRepulse self) -> neighborlist"},
	 { (char *)"delete_LJAttractFixedRepulse", _wrap_delete_LJAttractFixedRepulse, METH_VARARGS, (char *)"delete_LJAttractFixedRepulse(LJAttractFixedRepulse self)"},
	 { (char *)"LJAttractFixedRepulse_swigregister", LJAttractFixedRepulse_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LJDouble", _wrap_new_LJDouble, METH_VARARGS, (char *)"new_LJDouble(neighborlist neighbors) -> LJDouble"},
	 { (char *)"LJDouble_add", _wrap_LJDouble_add, METH_VARARGS, (char *)"LJDouble_add(LJDouble self, LJDoubleAtom atm)"},
	 { (char *)"LJDouble_update_pairs", _wrap_LJDouble_update_pairs, METH_VARARGS, (char *)"LJDouble_update_pairs(LJDouble self)"},
	 { (char *)"LJDouble_getpair", _wrap_LJDouble_getpair, METH_VARARGS, (char *)"LJDouble_getpair(LJDouble self, idpair pair) -> LJDoublePair"},
	 { (char *)"LJDouble_energy", _wrap_LJDouble_energy, METH_VARARGS, (char *)"\n"
		"energy(Box box, idpair pair) -> flt\n"
		"LJDouble_energy(LJDouble self, Box box) -> flt\n"
		""},
	 { (char *)"LJDouble_pressure", _wrap_LJDouble_pressure, METH_VARARGS, (char *)"LJDouble_pressure(LJDouble self, Box box) -> flt"},
	 { (char *)"LJDouble_size", _wrap_LJDouble_size, METH_VARARGS, (char *)"LJDouble_size(LJDouble self) -> uint"},
	 { (char *)"LJDouble_energy_pair", _wrap_LJDouble_energy_pair, METH_VARARGS, (char *)"LJDouble_energy_pair(LJDouble self, LJDoublePair pair, Box box) -> flt"},
	 { (char *)"LJDouble_setForces", _wrap_LJDouble_setForces, METH_VARARGS, (char *)"LJDouble_setForces(LJDouble self, Box box)"},
	 { (char *)"LJDouble_setForcesGetPressure", _wrap_LJDouble_setForcesGetPressure, METH_VARARGS, (char *)"LJDouble_setForcesGetPressure(LJDouble self, Box box) -> flt"},
	 { (char *)"LJDouble_forces_pair", _wrap_LJDouble_forces_pair, METH_VARARGS, (char *)"LJDouble_forces_pair(LJDouble self, LJDoublePair pair, Box box) -> Vec"},
	 { (char *)"LJDouble_atom_list", _wrap_LJDouble_atom_list, METH_VARARGS, (char *)"LJDouble_atom_list(LJDouble self) -> std::vector< LJDoubleAtom > &"},
	 { (char *)"LJDouble_nlist", _wrap_LJDouble_nlist, METH_VARARGS, (char *)"LJDouble_nlist(LJDouble self) -> neighborlist"},
	 { (char *)"delete_LJDouble", _wrap_delete_LJDouble, METH_VARARGS, (char *)"delete_LJDouble(LJDouble self)"},
	 { (char *)"LJDouble_swigregister", LJDouble_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_EisMclachlan", _wrap_new_EisMclachlan, METH_VARARGS, (char *)"new_EisMclachlan(neighborlist neighbors) -> EisMclachlan"},
	 { (char *)"EisMclachlan_add", _wrap_EisMclachlan_add, METH_VARARGS, (char *)"EisMclachlan_add(EisMclachlan self, EisMclachlanAtom atm)"},
	 { (char *)"EisMclachlan_update_pairs", _wrap_EisMclachlan_update_pairs, METH_VARARGS, (char *)"EisMclachlan_update_pairs(EisMclachlan self)"},
	 { (char *)"EisMclachlan_getpair", _wrap_EisMclachlan_getpair, METH_VARARGS, (char *)"EisMclachlan_getpair(EisMclachlan self, idpair pair) -> EisMclachlanPair"},
	 { (char *)"EisMclachlan_energy", _wrap_EisMclachlan_energy, METH_VARARGS, (char *)"\n"
		"energy(Box box, idpair pair) -> flt\n"
		"EisMclachlan_energy(EisMclachlan self, Box box) -> flt\n"
		""},
	 { (char *)"EisMclachlan_pressure", _wrap_EisMclachlan_pressure, METH_VARARGS, (char *)"EisMclachlan_pressure(EisMclachlan self, Box box) -> flt"},
	 { (char *)"EisMclachlan_size", _wrap_EisMclachlan_size, METH_VARARGS, (char *)"EisMclachlan_size(EisMclachlan self) -> uint"},
	 { (char *)"EisMclachlan_energy_pair", _wrap_EisMclachlan_energy_pair, METH_VARARGS, (char *)"EisMclachlan_energy_pair(EisMclachlan self, EisMclachlanPair pair, Box box) -> flt"},
	 { (char *)"EisMclachlan_setForces", _wrap_EisMclachlan_setForces, METH_VARARGS, (char *)"EisMclachlan_setForces(EisMclachlan self, Box box)"},
	 { (char *)"EisMclachlan_setForcesGetPressure", _wrap_EisMclachlan_setForcesGetPressure, METH_VARARGS, (char *)"EisMclachlan_setForcesGetPressure(EisMclachlan self, Box box) -> flt"},
	 { (char *)"EisMclachlan_forces_pair", _wrap_EisMclachlan_forces_pair, METH_VARARGS, (char *)"EisMclachlan_forces_pair(EisMclachlan self, EisMclachlanPair pair, Box box) -> Vec"},
	 { (char *)"EisMclachlan_atom_list", _wrap_EisMclachlan_atom_list, METH_VARARGS, (char *)"EisMclachlan_atom_list(EisMclachlan self) -> std::vector< EisMclachlanAtom > &"},
	 { (char *)"EisMclachlan_nlist", _wrap_EisMclachlan_nlist, METH_VARARGS, (char *)"EisMclachlan_nlist(EisMclachlan self) -> neighborlist"},
	 { (char *)"delete_EisMclachlan", _wrap_delete_EisMclachlan, METH_VARARGS, (char *)"delete_EisMclachlan(EisMclachlan self)"},
	 { (char *)"EisMclachlan_swigregister", EisMclachlan_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LJish", _wrap_new_LJish, METH_VARARGS, (char *)"new_LJish(neighborlist neighbors) -> LJish"},
	 { (char *)"LJish_add", _wrap_LJish_add, METH_VARARGS, (char *)"LJish_add(LJish self, LJishAtom atm)"},
	 { (char *)"LJish_update_pairs", _wrap_LJish_update_pairs, METH_VARARGS, (char *)"LJish_update_pairs(LJish self)"},
	 { (char *)"LJish_getpair", _wrap_LJish_getpair, METH_VARARGS, (char *)"LJish_getpair(LJish self, idpair pair) -> LJishPair"},
	 { (char *)"LJish_energy", _wrap_LJish_energy, METH_VARARGS, (char *)"\n"
		"energy(Box box, idpair pair) -> flt\n"
		"LJish_energy(LJish self, Box box) -> flt\n"
		""},
	 { (char *)"LJish_pressure", _wrap_LJish_pressure, METH_VARARGS, (char *)"LJish_pressure(LJish self, Box box) -> flt"},
	 { (char *)"LJish_size", _wrap_LJish_size, METH_VARARGS, (char *)"LJish_size(LJish self) -> uint"},
	 { (char *)"LJish_energy_pair", _wrap_LJish_energy_pair, METH_VARARGS, (char *)"LJish_energy_pair(LJish self, LJishPair pair, Box box) -> flt"},
	 { (char *)"LJish_setForces", _wrap_LJish_setForces, METH_VARARGS, (char *)"LJish_setForces(LJish self, Box box)"},
	 { (char *)"LJish_setForcesGetPressure", _wrap_LJish_setForcesGetPressure, METH_VARARGS, (char *)"LJish_setForcesGetPressure(LJish self, Box box) -> flt"},
	 { (char *)"LJish_forces_pair", _wrap_LJish_forces_pair, METH_VARARGS, (char *)"LJish_forces_pair(LJish self, LJishPair pair, Box box) -> Vec"},
	 { (char *)"LJish_atom_list", _wrap_LJish_atom_list, METH_VARARGS, (char *)"LJish_atom_list(LJish self) -> std::vector< LJishAtom > &"},
	 { (char *)"LJish_nlist", _wrap_LJish_nlist, METH_VARARGS, (char *)"LJish_nlist(LJish self) -> neighborlist"},
	 { (char *)"delete_LJish", _wrap_delete_LJish, METH_VARARGS, (char *)"delete_LJish(LJish self)"},
	 { (char *)"LJish_swigregister", LJish_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_HertzianSimple", _wrap_new_HertzianSimple, METH_VARARGS, (char *)"new_HertzianSimple() -> HertzianSimple"},
	 { (char *)"HertzianSimple_add", _wrap_HertzianSimple_add, METH_VARARGS, (char *)"HertzianSimple_add(HertzianSimple self, HertzianAtom atm)"},
	 { (char *)"HertzianSimple_energy", _wrap_HertzianSimple_energy, METH_VARARGS, (char *)"HertzianSimple_energy(HertzianSimple self, Box box) -> flt"},
	 { (char *)"HertzianSimple_pressure", _wrap_HertzianSimple_pressure, METH_VARARGS, (char *)"HertzianSimple_pressure(HertzianSimple self, Box box) -> flt"},
	 { (char *)"HertzianSimple_size", _wrap_HertzianSimple_size, METH_VARARGS, (char *)"HertzianSimple_size(HertzianSimple self) -> uint"},
	 { (char *)"HertzianSimple_setForces", _wrap_HertzianSimple_setForces, METH_VARARGS, (char *)"HertzianSimple_setForces(HertzianSimple self, Box box)"},
	 { (char *)"HertzianSimple_setForcesGetPressure", _wrap_HertzianSimple_setForcesGetPressure, METH_VARARGS, (char *)"HertzianSimple_setForcesGetPressure(HertzianSimple self, Box box) -> flt"},
	 { (char *)"HertzianSimple_atom_list", _wrap_HertzianSimple_atom_list, METH_VARARGS, (char *)"HertzianSimple_atom_list(HertzianSimple self) -> std::vector< HertzianAtom > &"},
	 { (char *)"delete_HertzianSimple", _wrap_delete_HertzianSimple, METH_VARARGS, (char *)"delete_HertzianSimple(HertzianSimple self)"},
	 { (char *)"HertzianSimple_swigregister", HertzianSimple_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_HertzianPlain", _wrap_new_HertzianPlain, METH_VARARGS, (char *)"new_HertzianPlain(neighborlist neighbors) -> HertzianPlain"},
	 { (char *)"HertzianPlain_add", _wrap_HertzianPlain_add, METH_VARARGS, (char *)"HertzianPlain_add(HertzianPlain self, HertzianAtom atm)"},
	 { (char *)"HertzianPlain_update_pairs", _wrap_HertzianPlain_update_pairs, METH_VARARGS, (char *)"HertzianPlain_update_pairs(HertzianPlain self)"},
	 { (char *)"HertzianPlain_getpair", _wrap_HertzianPlain_getpair, METH_VARARGS, (char *)"HertzianPlain_getpair(HertzianPlain self, idpair pair) -> HertzianPair"},
	 { (char *)"HertzianPlain_energy", _wrap_HertzianPlain_energy, METH_VARARGS, (char *)"\n"
		"energy(Box box, idpair pair) -> flt\n"
		"HertzianPlain_energy(HertzianPlain self, Box box) -> flt\n"
		""},
	 { (char *)"HertzianPlain_pressure", _wrap_HertzianPlain_pressure, METH_VARARGS, (char *)"HertzianPlain_pressure(HertzianPlain self, Box box) -> flt"},
	 { (char *)"HertzianPlain_size", _wrap_HertzianPlain_size, METH_VARARGS, (char *)"HertzianPlain_size(HertzianPlain self) -> uint"},
	 { (char *)"HertzianPlain_energy_pair", _wrap_HertzianPlain_energy_pair, METH_VARARGS, (char *)"HertzianPlain_energy_pair(HertzianPlain self, HertzianPair pair, Box box) -> flt"},
	 { (char *)"HertzianPlain_setForces", _wrap_HertzianPlain_setForces, METH_VARARGS, (char *)"HertzianPlain_setForces(HertzianPlain self, Box box)"},
	 { (char *)"HertzianPlain_setForcesGetPressure", _wrap_HertzianPlain_setForcesGetPressure, METH_VARARGS, (char *)"HertzianPlain_setForcesGetPressure(HertzianPlain self, Box box) -> flt"},
	 { (char *)"HertzianPlain_forces_pair", _wrap_HertzianPlain_forces_pair, METH_VARARGS, (char *)"HertzianPlain_forces_pair(HertzianPlain self, HertzianPair pair, Box box) -> Vec"},
	 { (char *)"HertzianPlain_atom_list", _wrap_HertzianPlain_atom_list, METH_VARARGS, (char *)"HertzianPlain_atom_list(HertzianPlain self) -> std::vector< HertzianAtom > &"},
	 { (char *)"HertzianPlain_nlist", _wrap_HertzianPlain_nlist, METH_VARARGS, (char *)"HertzianPlain_nlist(HertzianPlain self) -> neighborlist"},
	 { (char *)"delete_HertzianPlain", _wrap_delete_HertzianPlain, METH_VARARGS, (char *)"delete_HertzianPlain(HertzianPlain self)"},
	 { (char *)"HertzianPlain_swigregister", HertzianPlain_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Hertzian", _wrap_new_Hertzian, METH_VARARGS, (char *)"new_Hertzian(neighborlist neighbors) -> Hertzian"},
	 { (char *)"Hertzian_setForces", _wrap_Hertzian_setForces, METH_VARARGS, (char *)"\n"
		"setForces(Box box)\n"
		"Hertzian_setForces(Hertzian self, Box box, fpairxFunct arg3)\n"
		""},
	 { (char *)"Hertzian_setForcesGetPressure", _wrap_Hertzian_setForcesGetPressure, METH_VARARGS, (char *)"Hertzian_setForcesGetPressure(Hertzian self, Box box) -> flt"},
	 { (char *)"Hertzian_energy", _wrap_Hertzian_energy, METH_VARARGS, (char *)"Hertzian_energy(Hertzian self, Box box) -> flt"},
	 { (char *)"Hertzian_pressure", _wrap_Hertzian_pressure, METH_VARARGS, (char *)"Hertzian_pressure(Hertzian self, Box box) -> flt"},
	 { (char *)"delete_Hertzian", _wrap_delete_Hertzian, METH_VARARGS, (char *)"delete_Hertzian(Hertzian self)"},
	 { (char *)"Hertzian_swigregister", Hertzian_swigregister, METH_VARARGS, NULL},
	 { (char *)"collection_setForces", _wrap_collection_setForces, METH_VARARGS, (char *)"\n"
		"setForces(bool seta=True)\n"
		"collection_setForces(collection self)\n"
		""},
	 { (char *)"collection_timestep", _wrap_collection_timestep, METH_VARARGS, (char *)"collection_timestep(collection self)"},
	 { (char *)"collection_dof", _wrap_collection_dof, METH_VARARGS, (char *)"collection_dof(collection self) -> flt"},
	 { (char *)"collection_potentialenergy", _wrap_collection_potentialenergy, METH_VARARGS, (char *)"collection_potentialenergy(collection self) -> flt"},
	 { (char *)"collection_energy", _wrap_collection_energy, METH_VARARGS, (char *)"collection_energy(collection self) -> flt"},
	 { (char *)"collection_temp", _wrap_collection_temp, METH_VARARGS, (char *)"\n"
		"temp(bool minuscomv=True) -> flt\n"
		"collection_temp(collection self) -> flt\n"
		""},
	 { (char *)"collection_kinetic", _wrap_collection_kinetic, METH_VARARGS, (char *)"collection_kinetic(collection self) -> flt"},
	 { (char *)"collection_virial", _wrap_collection_virial, METH_VARARGS, (char *)"collection_virial(collection self) -> flt"},
	 { (char *)"collection_pressure", _wrap_collection_pressure, METH_VARARGS, (char *)"collection_pressure(collection self) -> flt"},
	 { (char *)"collection_getbox", _wrap_collection_getbox, METH_VARARGS, (char *)"collection_getbox(collection self) -> Box"},
	 { (char *)"collection_com", _wrap_collection_com, METH_VARARGS, (char *)"collection_com(collection self) -> Vec"},
	 { (char *)"collection_comv", _wrap_collection_comv, METH_VARARGS, (char *)"collection_comv(collection self) -> Vec"},
	 { (char *)"collection_angmomentum", _wrap_collection_angmomentum, METH_VARARGS, (char *)"\n"
		"angmomentum(Vec loc) -> flt\n"
		"collection_angmomentum(collection self) -> flt\n"
		""},
	 { (char *)"collection_gyradius", _wrap_collection_gyradius, METH_VARARGS, (char *)"collection_gyradius(collection self) -> flt"},
	 { (char *)"delete_collection", _wrap_delete_collection, METH_VARARGS, (char *)"delete_collection(collection self)"},
	 { (char *)"collection_resetcomv", _wrap_collection_resetcomv, METH_VARARGS, (char *)"collection_resetcomv(collection self)"},
	 { (char *)"collection_resetL", _wrap_collection_resetL, METH_VARARGS, (char *)"collection_resetL(collection self)"},
	 { (char *)"collection_scaleVs", _wrap_collection_scaleVs, METH_VARARGS, (char *)"collection_scaleVs(collection self, flt scaleby)"},
	 { (char *)"collection_scaleVelocitiesT", _wrap_collection_scaleVelocitiesT, METH_VARARGS, (char *)"collection_scaleVelocitiesT(collection self, flt T)"},
	 { (char *)"collection_scaleVelocitiesE", _wrap_collection_scaleVelocitiesE, METH_VARARGS, (char *)"collection_scaleVelocitiesE(collection self, flt E)"},
	 { (char *)"collection_addInteraction", _wrap_collection_addInteraction, METH_VARARGS, (char *)"collection_addInteraction(collection self, interaction inter)"},
	 { (char *)"collection_addTracker", _wrap_collection_addTracker, METH_VARARGS, (char *)"collection_addTracker(collection self, statetracker track)"},
	 { (char *)"collection_getInteractions", _wrap_collection_getInteractions, METH_VARARGS, (char *)"collection_getInteractions(collection self) -> ivector"},
	 { (char *)"collection_numInteraction", _wrap_collection_numInteraction, METH_VARARGS, (char *)"collection_numInteraction(collection self) -> uint"},
	 { (char *)"collection_swigregister", collection_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_StaticCollec", _wrap_new_StaticCollec, METH_VARARGS, (char *)"\n"
		"StaticCollec(Box box, avector groups, ivector interactions=vector< interaction * >(), tvector trackers=vector< statetracker * >(), \n"
		"    constraintvector constraints=vector< constraint * >())\n"
		"StaticCollec(Box box, avector groups, ivector interactions=vector< interaction * >(), tvector trackers=vector< statetracker * >())\n"
		"StaticCollec(Box box, avector groups, ivector interactions=vector< interaction * >())\n"
		"new_StaticCollec(Box box, avector groups) -> StaticCollec\n"
		""},
	 { (char *)"StaticCollec_timestep", _wrap_StaticCollec_timestep, METH_VARARGS, (char *)"StaticCollec_timestep(StaticCollec self)"},
	 { (char *)"StaticCollec_update", _wrap_StaticCollec_update, METH_VARARGS, (char *)"StaticCollec_update(StaticCollec self)"},
	 { (char *)"delete_StaticCollec", _wrap_delete_StaticCollec, METH_VARARGS, (char *)"delete_StaticCollec(StaticCollec self)"},
	 { (char *)"StaticCollec_swigregister", StaticCollec_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_collectionSol", _wrap_new_collectionSol, METH_VARARGS, (char *)"\n"
		"collectionSol(Box box, flt const dt, flt const damping, flt const desiredT, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >(), tvector trackers=vector< statetracker * >(), \n"
		"    constraintvector constraints=vector< constraint * >())\n"
		"collectionSol(Box box, flt const dt, flt const damping, flt const desiredT, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >(), tvector trackers=vector< statetracker * >())\n"
		"collectionSol(Box box, flt const dt, flt const damping, flt const desiredT, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >())\n"
		"collectionSol(Box box, flt const dt, flt const damping, flt const desiredT, avector groups=vector< atomgroup * >())\n"
		"new_collectionSol(Box box, flt const dt, flt const damping, flt const desiredT) -> collectionSol\n"
		""},
	 { (char *)"collectionSol_changeT", _wrap_collectionSol_changeT, METH_VARARGS, (char *)"collectionSol_changeT(collectionSol self, flt const newdt, flt const damp, flt const desiredT)"},
	 { (char *)"collectionSol_timestep", _wrap_collectionSol_timestep, METH_VARARGS, (char *)"collectionSol_timestep(collectionSol self)"},
	 { (char *)"delete_collectionSol", _wrap_delete_collectionSol, METH_VARARGS, (char *)"delete_collectionSol(collectionSol self)"},
	 { (char *)"collectionSol_swigregister", collectionSol_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_collectionSolHT", _wrap_new_collectionSolHT, METH_VARARGS, (char *)"\n"
		"collectionSolHT(Box box, flt const dt, flt const damping, flt const desiredT, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >(), tvector trackers=vector< statetracker * >(), \n"
		"    constraintvector constraints=vector< constraint * >())\n"
		"collectionSolHT(Box box, flt const dt, flt const damping, flt const desiredT, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >(), tvector trackers=vector< statetracker * >())\n"
		"collectionSolHT(Box box, flt const dt, flt const damping, flt const desiredT, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >())\n"
		"collectionSolHT(Box box, flt const dt, flt const damping, flt const desiredT, avector groups=vector< atomgroup * >())\n"
		"new_collectionSolHT(Box box, flt const dt, flt const damping, flt const desiredT) -> collectionSolHT\n"
		""},
	 { (char *)"collectionSolHT_changeT", _wrap_collectionSolHT_changeT, METH_VARARGS, (char *)"collectionSolHT_changeT(collectionSolHT self, flt const newdt, flt const damp, flt const desiredT)"},
	 { (char *)"collectionSolHT_timestep", _wrap_collectionSolHT_timestep, METH_VARARGS, (char *)"collectionSolHT_timestep(collectionSolHT self)"},
	 { (char *)"delete_collectionSolHT", _wrap_delete_collectionSolHT, METH_VARARGS, (char *)"delete_collectionSolHT(collectionSolHT self)"},
	 { (char *)"collectionSolHT_swigregister", collectionSolHT_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_collectionVerlet", _wrap_new_collectionVerlet, METH_VARARGS, (char *)"\n"
		"collectionVerlet(Box box, flt const dt, avector groups=vector< atomgroup * >(), ivector interactions=vector< interaction * >(), \n"
		"    tvector trackers=vector< statetracker * >(), \n"
		"    constraintvector constraints=vector< constraint * >())\n"
		"collectionVerlet(Box box, flt const dt, avector groups=vector< atomgroup * >(), ivector interactions=vector< interaction * >(), \n"
		"    tvector trackers=vector< statetracker * >())\n"
		"collectionVerlet(Box box, flt const dt, avector groups=vector< atomgroup * >(), ivector interactions=vector< interaction * >())\n"
		"collectionVerlet(Box box, flt const dt, avector groups=vector< atomgroup * >())\n"
		"new_collectionVerlet(Box box, flt const dt) -> collectionVerlet\n"
		""},
	 { (char *)"collectionVerlet_timestep", _wrap_collectionVerlet_timestep, METH_VARARGS, (char *)"collectionVerlet_timestep(collectionVerlet self)"},
	 { (char *)"collectionVerlet_setdt", _wrap_collectionVerlet_setdt, METH_VARARGS, (char *)"collectionVerlet_setdt(collectionVerlet self, flt newdt)"},
	 { (char *)"delete_collectionVerlet", _wrap_delete_collectionVerlet, METH_VARARGS, (char *)"delete_collectionVerlet(collectionVerlet self)"},
	 { (char *)"collectionVerlet_swigregister", collectionVerlet_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_collectionOverdamped", _wrap_new_collectionOverdamped, METH_VARARGS, (char *)"\n"
		"collectionOverdamped(Box box, flt const dt, float const gamma, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >(), tvector trackers=vector< statetracker * >(), \n"
		"    constraintvector constraints=vector< constraint * >())\n"
		"collectionOverdamped(Box box, flt const dt, float const gamma, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >(), tvector trackers=vector< statetracker * >())\n"
		"collectionOverdamped(Box box, flt const dt, float const gamma, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >())\n"
		"collectionOverdamped(Box box, flt const dt, float const gamma, avector groups=vector< atomgroup * >())\n"
		"new_collectionOverdamped(Box box, flt const dt, float const gamma) -> collectionOverdamped\n"
		""},
	 { (char *)"collectionOverdamped_timestep", _wrap_collectionOverdamped_timestep, METH_VARARGS, (char *)"collectionOverdamped_timestep(collectionOverdamped self)"},
	 { (char *)"collectionOverdamped_setdt", _wrap_collectionOverdamped_setdt, METH_VARARGS, (char *)"collectionOverdamped_setdt(collectionOverdamped self, flt newdt)"},
	 { (char *)"delete_collectionOverdamped", _wrap_delete_collectionOverdamped, METH_VARARGS, (char *)"delete_collectionOverdamped(collectionOverdamped self)"},
	 { (char *)"collectionOverdamped_swigregister", collectionOverdamped_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_collectionConjGradient", _wrap_new_collectionConjGradient, METH_VARARGS, (char *)"\n"
		"collectionConjGradient(Box box, flt const dt, avector groups=vector< atomgroup * >(), ivector interactions=vector< interaction * >(), \n"
		"    tvector trackers=vector< statetracker * >(), \n"
		"    constraintvector constraints=vector< constraint * >())\n"
		"collectionConjGradient(Box box, flt const dt, avector groups=vector< atomgroup * >(), ivector interactions=vector< interaction * >(), \n"
		"    tvector trackers=vector< statetracker * >())\n"
		"collectionConjGradient(Box box, flt const dt, avector groups=vector< atomgroup * >(), ivector interactions=vector< interaction * >())\n"
		"collectionConjGradient(Box box, flt const dt, avector groups=vector< atomgroup * >())\n"
		"new_collectionConjGradient(Box box, flt const dt) -> collectionConjGradient\n"
		""},
	 { (char *)"collectionConjGradient_timestep", _wrap_collectionConjGradient_timestep, METH_VARARGS, (char *)"collectionConjGradient_timestep(collectionConjGradient self)"},
	 { (char *)"collectionConjGradient_setdt", _wrap_collectionConjGradient_setdt, METH_VARARGS, (char *)"collectionConjGradient_setdt(collectionConjGradient self, flt newdt)"},
	 { (char *)"delete_collectionConjGradient", _wrap_delete_collectionConjGradient, METH_VARARGS, (char *)"delete_collectionConjGradient(collectionConjGradient self)"},
	 { (char *)"collectionConjGradient_swigregister", collectionConjGradient_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_collectionConjGradientBox", _wrap_new_collectionConjGradientBox, METH_VARARGS, (char *)"\n"
		"collectionConjGradientBox(OriginBox box, flt const dt, flt const P0, flt const kappaV=1, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >(), tvector trackers=vector< statetracker * >(), \n"
		"    constraintvector constraints=vector< constraint * >())\n"
		"collectionConjGradientBox(OriginBox box, flt const dt, flt const P0, flt const kappaV=1, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >(), tvector trackers=vector< statetracker * >())\n"
		"collectionConjGradientBox(OriginBox box, flt const dt, flt const P0, flt const kappaV=1, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >())\n"
		"collectionConjGradientBox(OriginBox box, flt const dt, flt const P0, flt const kappaV=1, avector groups=vector< atomgroup * >())\n"
		"collectionConjGradientBox(OriginBox box, flt const dt, flt const P0, flt const kappaV=1)\n"
		"new_collectionConjGradientBox(OriginBox box, flt const dt, flt const P0) -> collectionConjGradientBox\n"
		""},
	 { (char *)"collectionConjGradientBox_kinetic", _wrap_collectionConjGradientBox_kinetic, METH_VARARGS, (char *)"collectionConjGradientBox_kinetic(collectionConjGradientBox self) -> flt"},
	 { (char *)"collectionConjGradientBox_timestep", _wrap_collectionConjGradientBox_timestep, METH_VARARGS, (char *)"collectionConjGradientBox_timestep(collectionConjGradientBox self)"},
	 { (char *)"collectionConjGradientBox_timestepBox", _wrap_collectionConjGradientBox_timestepBox, METH_VARARGS, (char *)"collectionConjGradientBox_timestepBox(collectionConjGradientBox self)"},
	 { (char *)"collectionConjGradientBox_timestepAtoms", _wrap_collectionConjGradientBox_timestepAtoms, METH_VARARGS, (char *)"collectionConjGradientBox_timestepAtoms(collectionConjGradientBox self)"},
	 { (char *)"collectionConjGradientBox_resize", _wrap_collectionConjGradientBox_resize, METH_VARARGS, (char *)"collectionConjGradientBox_resize(collectionConjGradientBox self, flt V)"},
	 { (char *)"collectionConjGradientBox_setdt", _wrap_collectionConjGradientBox_setdt, METH_VARARGS, (char *)"collectionConjGradientBox_setdt(collectionConjGradientBox self, flt newdt)"},
	 { (char *)"collectionConjGradientBox_setP", _wrap_collectionConjGradientBox_setP, METH_VARARGS, (char *)"collectionConjGradientBox_setP(collectionConjGradientBox self, flt P)"},
	 { (char *)"collectionConjGradientBox_setMaxdV", _wrap_collectionConjGradientBox_setMaxdV, METH_VARARGS, (char *)"collectionConjGradientBox_setMaxdV(collectionConjGradientBox self, flt diff)"},
	 { (char *)"delete_collectionConjGradientBox", _wrap_delete_collectionConjGradientBox, METH_VARARGS, (char *)"delete_collectionConjGradientBox(collectionConjGradientBox self)"},
	 { (char *)"collectionConjGradientBox_swigregister", collectionConjGradientBox_swigregister, METH_VARARGS, NULL},
	 { (char *)"solveCubic1", _wrap_solveCubic1, METH_VARARGS, (char *)"solveCubic1(flt b, flt c, flt d) -> flt"},
	 { (char *)"solveCubic", _wrap_solveCubic, METH_VARARGS, (char *)"\n"
		"solveCubic(flt a1, flt a2, flt a3, flt closeto=0) -> flt\n"
		"solveCubic(flt a1, flt a2, flt a3) -> flt\n"
		""},
	 { (char *)"new_collectionNoseHoover", _wrap_new_collectionNoseHoover, METH_VARARGS, (char *)"\n"
		"collectionNoseHoover(Box box, flt const dt, flt const Q, flt const T, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >(), tvector trackers=vector< statetracker * >(), \n"
		"    constraintvector constraints=vector< constraint * >())\n"
		"collectionNoseHoover(Box box, flt const dt, flt const Q, flt const T, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >(), tvector trackers=vector< statetracker * >())\n"
		"collectionNoseHoover(Box box, flt const dt, flt const Q, flt const T, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >())\n"
		"collectionNoseHoover(Box box, flt const dt, flt const Q, flt const T, avector groups=vector< atomgroup * >())\n"
		"new_collectionNoseHoover(Box box, flt const dt, flt const Q, flt const T) -> collectionNoseHoover\n"
		""},
	 { (char *)"collectionNoseHoover_setdt", _wrap_collectionNoseHoover_setdt, METH_VARARGS, (char *)"collectionNoseHoover_setdt(collectionNoseHoover self, flt newdt)"},
	 { (char *)"collectionNoseHoover_setQ", _wrap_collectionNoseHoover_setQ, METH_VARARGS, (char *)"collectionNoseHoover_setQ(collectionNoseHoover self, flt newQ)"},
	 { (char *)"collectionNoseHoover_resetBath", _wrap_collectionNoseHoover_resetBath, METH_VARARGS, (char *)"collectionNoseHoover_resetBath(collectionNoseHoover self)"},
	 { (char *)"collectionNoseHoover_timestep", _wrap_collectionNoseHoover_timestep, METH_VARARGS, (char *)"collectionNoseHoover_timestep(collectionNoseHoover self)"},
	 { (char *)"collectionNoseHoover_Hamiltonian", _wrap_collectionNoseHoover_Hamiltonian, METH_VARARGS, (char *)"collectionNoseHoover_Hamiltonian(collectionNoseHoover self) -> flt"},
	 { (char *)"collectionNoseHoover_getxi", _wrap_collectionNoseHoover_getxi, METH_VARARGS, (char *)"collectionNoseHoover_getxi(collectionNoseHoover self) -> flt"},
	 { (char *)"collectionNoseHoover_getlns", _wrap_collectionNoseHoover_getlns, METH_VARARGS, (char *)"collectionNoseHoover_getlns(collectionNoseHoover self) -> flt"},
	 { (char *)"delete_collectionNoseHoover", _wrap_delete_collectionNoseHoover, METH_VARARGS, (char *)"delete_collectionNoseHoover(collectionNoseHoover self)"},
	 { (char *)"collectionNoseHoover_swigregister", collectionNoseHoover_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_collectionGaussianT", _wrap_new_collectionGaussianT, METH_VARARGS, (char *)"\n"
		"collectionGaussianT(Box box, flt const dt, flt const Q, avector groups=vector< atomgroup * >(), ivector interactions=vector< interaction * >(), \n"
		"    tvector trackers=vector< statetracker * >(), \n"
		"    constraintvector constraints=vector< constraint * >())\n"
		"collectionGaussianT(Box box, flt const dt, flt const Q, avector groups=vector< atomgroup * >(), ivector interactions=vector< interaction * >(), \n"
		"    tvector trackers=vector< statetracker * >())\n"
		"collectionGaussianT(Box box, flt const dt, flt const Q, avector groups=vector< atomgroup * >(), ivector interactions=vector< interaction * >())\n"
		"collectionGaussianT(Box box, flt const dt, flt const Q, avector groups=vector< atomgroup * >())\n"
		"new_collectionGaussianT(Box box, flt const dt, flt const Q) -> collectionGaussianT\n"
		""},
	 { (char *)"collectionGaussianT_setdt", _wrap_collectionGaussianT_setdt, METH_VARARGS, (char *)"collectionGaussianT_setdt(collectionGaussianT self, flt newdt)"},
	 { (char *)"collectionGaussianT_setQ", _wrap_collectionGaussianT_setQ, METH_VARARGS, (char *)"collectionGaussianT_setQ(collectionGaussianT self, flt newQ)"},
	 { (char *)"collectionGaussianT_setForces", _wrap_collectionGaussianT_setForces, METH_VARARGS, (char *)"\n"
		"setForces(bool seta=True)\n"
		"setForces()\n"
		"collectionGaussianT_setForces(collectionGaussianT self, bool seta, bool setxi)\n"
		""},
	 { (char *)"collectionGaussianT_timestep", _wrap_collectionGaussianT_timestep, METH_VARARGS, (char *)"collectionGaussianT_timestep(collectionGaussianT self)"},
	 { (char *)"delete_collectionGaussianT", _wrap_delete_collectionGaussianT, METH_VARARGS, (char *)"delete_collectionGaussianT(collectionGaussianT self)"},
	 { (char *)"collectionGaussianT_swigregister", collectionGaussianT_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_collectionGear3A", _wrap_new_collectionGear3A, METH_VARARGS, (char *)"\n"
		"collectionGear3A(Box box, flt const dt, avector groups=vector< atomgroup * >(), ivector interactions=vector< interaction * >(), \n"
		"    tvector trackers=vector< statetracker * >(), \n"
		"    constraintvector constraints=vector< constraint * >())\n"
		"collectionGear3A(Box box, flt const dt, avector groups=vector< atomgroup * >(), ivector interactions=vector< interaction * >(), \n"
		"    tvector trackers=vector< statetracker * >())\n"
		"collectionGear3A(Box box, flt const dt, avector groups=vector< atomgroup * >(), ivector interactions=vector< interaction * >())\n"
		"collectionGear3A(Box box, flt const dt, avector groups=vector< atomgroup * >())\n"
		"new_collectionGear3A(Box box, flt const dt) -> collectionGear3A\n"
		""},
	 { (char *)"collectionGear3A_timestep", _wrap_collectionGear3A_timestep, METH_VARARGS, (char *)"collectionGear3A_timestep(collectionGear3A self)"},
	 { (char *)"collectionGear3A_setdt", _wrap_collectionGear3A_setdt, METH_VARARGS, (char *)"collectionGear3A_setdt(collectionGear3A self, flt newdt)"},
	 { (char *)"delete_collectionGear3A", _wrap_delete_collectionGear3A, METH_VARARGS, (char *)"delete_collectionGear3A(collectionGear3A self)"},
	 { (char *)"collectionGear3A_swigregister", collectionGear3A_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_collectionGear4A", _wrap_new_collectionGear4A, METH_VARARGS, (char *)"\n"
		"collectionGear4A(Box box, flt const dt, uint ncorrectionsteps, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >(), tvector trackers=vector< statetracker * >(), \n"
		"    constraintvector constraints=vector< constraint * >())\n"
		"collectionGear4A(Box box, flt const dt, uint ncorrectionsteps, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >(), tvector trackers=vector< statetracker * >())\n"
		"collectionGear4A(Box box, flt const dt, uint ncorrectionsteps, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >())\n"
		"collectionGear4A(Box box, flt const dt, uint ncorrectionsteps, avector groups=vector< atomgroup * >())\n"
		"collectionGear4A(Box box, flt const dt, uint ncorrectionsteps)\n"
		"collectionGear4A(Box box, flt const dt, avector groups=vector< atomgroup * >(), ivector interactions=vector< interaction * >(), \n"
		"    tvector trackers=vector< statetracker * >(), \n"
		"    constraintvector constraints=vector< constraint * >())\n"
		"collectionGear4A(Box box, flt const dt, avector groups=vector< atomgroup * >(), ivector interactions=vector< interaction * >(), \n"
		"    tvector trackers=vector< statetracker * >())\n"
		"collectionGear4A(Box box, flt const dt, avector groups=vector< atomgroup * >(), ivector interactions=vector< interaction * >())\n"
		"collectionGear4A(Box box, flt const dt, avector groups=vector< atomgroup * >())\n"
		"new_collectionGear4A(Box box, flt const dt) -> collectionGear4A\n"
		""},
	 { (char *)"collectionGear4A_timestep", _wrap_collectionGear4A_timestep, METH_VARARGS, (char *)"collectionGear4A_timestep(collectionGear4A self)"},
	 { (char *)"collectionGear4A_setdt", _wrap_collectionGear4A_setdt, METH_VARARGS, (char *)"collectionGear4A_setdt(collectionGear4A self, flt newdt)"},
	 { (char *)"delete_collectionGear4A", _wrap_delete_collectionGear4A, METH_VARARGS, (char *)"delete_collectionGear4A(collectionGear4A self)"},
	 { (char *)"collectionGear4A_swigregister", collectionGear4A_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_collectionGear5A", _wrap_new_collectionGear5A, METH_VARARGS, (char *)"\n"
		"collectionGear5A(Box box, flt const dt, uint ncorrectionsteps, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >(), tvector trackers=vector< statetracker * >(), \n"
		"    constraintvector constraints=vector< constraint * >())\n"
		"collectionGear5A(Box box, flt const dt, uint ncorrectionsteps, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >(), tvector trackers=vector< statetracker * >())\n"
		"collectionGear5A(Box box, flt const dt, uint ncorrectionsteps, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >())\n"
		"collectionGear5A(Box box, flt const dt, uint ncorrectionsteps, avector groups=vector< atomgroup * >())\n"
		"collectionGear5A(Box box, flt const dt, uint ncorrectionsteps)\n"
		"collectionGear5A(Box box, flt const dt, avector groups=vector< atomgroup * >(), ivector interactions=vector< interaction * >(), \n"
		"    tvector trackers=vector< statetracker * >(), \n"
		"    constraintvector constraints=vector< constraint * >())\n"
		"collectionGear5A(Box box, flt const dt, avector groups=vector< atomgroup * >(), ivector interactions=vector< interaction * >(), \n"
		"    tvector trackers=vector< statetracker * >())\n"
		"collectionGear5A(Box box, flt const dt, avector groups=vector< atomgroup * >(), ivector interactions=vector< interaction * >())\n"
		"collectionGear5A(Box box, flt const dt, avector groups=vector< atomgroup * >())\n"
		"new_collectionGear5A(Box box, flt const dt) -> collectionGear5A\n"
		""},
	 { (char *)"collectionGear5A_timestep", _wrap_collectionGear5A_timestep, METH_VARARGS, (char *)"collectionGear5A_timestep(collectionGear5A self)"},
	 { (char *)"collectionGear5A_setdt", _wrap_collectionGear5A_setdt, METH_VARARGS, (char *)"collectionGear5A_setdt(collectionGear5A self, flt newdt)"},
	 { (char *)"delete_collectionGear5A", _wrap_delete_collectionGear5A, METH_VARARGS, (char *)"delete_collectionGear5A(collectionGear5A self)"},
	 { (char *)"collectionGear5A_swigregister", collectionGear5A_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_collectionGear6A", _wrap_new_collectionGear6A, METH_VARARGS, (char *)"\n"
		"collectionGear6A(Box box, flt const dt, uint ncorrectionsteps, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >(), tvector trackers=vector< statetracker * >(), \n"
		"    constraintvector constraints=vector< constraint * >())\n"
		"collectionGear6A(Box box, flt const dt, uint ncorrectionsteps, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >(), tvector trackers=vector< statetracker * >())\n"
		"collectionGear6A(Box box, flt const dt, uint ncorrectionsteps, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >())\n"
		"collectionGear6A(Box box, flt const dt, uint ncorrectionsteps, avector groups=vector< atomgroup * >())\n"
		"collectionGear6A(Box box, flt const dt, uint ncorrectionsteps)\n"
		"collectionGear6A(Box box, flt const dt, avector groups=vector< atomgroup * >(), ivector interactions=vector< interaction * >(), \n"
		"    tvector trackers=vector< statetracker * >(), \n"
		"    constraintvector constraints=vector< constraint * >())\n"
		"collectionGear6A(Box box, flt const dt, avector groups=vector< atomgroup * >(), ivector interactions=vector< interaction * >(), \n"
		"    tvector trackers=vector< statetracker * >())\n"
		"collectionGear6A(Box box, flt const dt, avector groups=vector< atomgroup * >(), ivector interactions=vector< interaction * >())\n"
		"collectionGear6A(Box box, flt const dt, avector groups=vector< atomgroup * >())\n"
		"new_collectionGear6A(Box box, flt const dt) -> collectionGear6A\n"
		""},
	 { (char *)"collectionGear6A_timestep", _wrap_collectionGear6A_timestep, METH_VARARGS, (char *)"collectionGear6A_timestep(collectionGear6A self)"},
	 { (char *)"collectionGear6A_setdt", _wrap_collectionGear6A_setdt, METH_VARARGS, (char *)"collectionGear6A_setdt(collectionGear6A self, flt newdt)"},
	 { (char *)"delete_collectionGear6A", _wrap_delete_collectionGear6A, METH_VARARGS, (char *)"delete_collectionGear6A(collectionGear6A self)"},
	 { (char *)"collectionGear6A_swigregister", collectionGear6A_swigregister, METH_VARARGS, NULL},
	 { (char *)"atomRK4_Kxa_set", _wrap_atomRK4_Kxa_set, METH_VARARGS, (char *)"atomRK4_Kxa_set(atomRK4 self, Vec Kxa)"},
	 { (char *)"atomRK4_Kxa_get", _wrap_atomRK4_Kxa_get, METH_VARARGS, (char *)"atomRK4_Kxa_get(atomRK4 self) -> Vec"},
	 { (char *)"atomRK4_Kxb_set", _wrap_atomRK4_Kxb_set, METH_VARARGS, (char *)"atomRK4_Kxb_set(atomRK4 self, Vec Kxb)"},
	 { (char *)"atomRK4_Kxb_get", _wrap_atomRK4_Kxb_get, METH_VARARGS, (char *)"atomRK4_Kxb_get(atomRK4 self) -> Vec"},
	 { (char *)"atomRK4_Kxc_set", _wrap_atomRK4_Kxc_set, METH_VARARGS, (char *)"atomRK4_Kxc_set(atomRK4 self, Vec Kxc)"},
	 { (char *)"atomRK4_Kxc_get", _wrap_atomRK4_Kxc_get, METH_VARARGS, (char *)"atomRK4_Kxc_get(atomRK4 self) -> Vec"},
	 { (char *)"atomRK4_Kxd_set", _wrap_atomRK4_Kxd_set, METH_VARARGS, (char *)"atomRK4_Kxd_set(atomRK4 self, Vec Kxd)"},
	 { (char *)"atomRK4_Kxd_get", _wrap_atomRK4_Kxd_get, METH_VARARGS, (char *)"atomRK4_Kxd_get(atomRK4 self) -> Vec"},
	 { (char *)"atomRK4_Kva_set", _wrap_atomRK4_Kva_set, METH_VARARGS, (char *)"atomRK4_Kva_set(atomRK4 self, Vec Kva)"},
	 { (char *)"atomRK4_Kva_get", _wrap_atomRK4_Kva_get, METH_VARARGS, (char *)"atomRK4_Kva_get(atomRK4 self) -> Vec"},
	 { (char *)"atomRK4_Kvb_set", _wrap_atomRK4_Kvb_set, METH_VARARGS, (char *)"atomRK4_Kvb_set(atomRK4 self, Vec Kvb)"},
	 { (char *)"atomRK4_Kvb_get", _wrap_atomRK4_Kvb_get, METH_VARARGS, (char *)"atomRK4_Kvb_get(atomRK4 self) -> Vec"},
	 { (char *)"atomRK4_Kvc_set", _wrap_atomRK4_Kvc_set, METH_VARARGS, (char *)"atomRK4_Kvc_set(atomRK4 self, Vec Kvc)"},
	 { (char *)"atomRK4_Kvc_get", _wrap_atomRK4_Kvc_get, METH_VARARGS, (char *)"atomRK4_Kvc_get(atomRK4 self) -> Vec"},
	 { (char *)"atomRK4_Kvd_set", _wrap_atomRK4_Kvd_set, METH_VARARGS, (char *)"atomRK4_Kvd_set(atomRK4 self, Vec Kvd)"},
	 { (char *)"atomRK4_Kvd_get", _wrap_atomRK4_Kvd_get, METH_VARARGS, (char *)"atomRK4_Kvd_get(atomRK4 self) -> Vec"},
	 { (char *)"new_atomRK4", _wrap_new_atomRK4, METH_VARARGS, (char *)"new_atomRK4() -> atomRK4"},
	 { (char *)"delete_atomRK4", _wrap_delete_atomRK4, METH_VARARGS, (char *)"delete_atomRK4(atomRK4 self)"},
	 { (char *)"atomRK4_swigregister", atomRK4_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_atomvecRK4", _wrap_new_atomvecRK4, METH_VARARGS, (char *)"\n"
		"atomvecRK4(fvector masses)\n"
		"new_atomvecRK4(atomgroup g) -> atomvecRK4\n"
		""},
	 { (char *)"atomvecRK4_get", _wrap_atomvecRK4_get, METH_VARARGS, (char *)"atomvecRK4_get(atomvecRK4 self, cuint n) -> atom"},
	 { (char *)"atomvecRK4_getRK4", _wrap_atomvecRK4_getRK4, METH_VARARGS, (char *)"atomvecRK4_getRK4(atomvecRK4 self, cuint n) -> atomRK4"},
	 { (char *)"atomvecRK4_get_id", _wrap_atomvecRK4_get_id, METH_VARARGS, (char *)"\n"
		"get_id(atom a) -> atomid\n"
		"atomvecRK4_get_id(atomvecRK4 self, uint n) -> atomid\n"
		""},
	 { (char *)"atomvecRK4_size", _wrap_atomvecRK4_size, METH_VARARGS, (char *)"atomvecRK4_size(atomvecRK4 self) -> uint"},
	 { (char *)"delete_atomvecRK4", _wrap_delete_atomvecRK4, METH_VARARGS, (char *)"delete_atomvecRK4(atomvecRK4 self)"},
	 { (char *)"atomvecRK4_swigregister", atomvecRK4_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_collectionRK4", _wrap_new_collectionRK4, METH_VARARGS, (char *)"\n"
		"collectionRK4(Box box, flt const dt, aRK4vector rgroups=vector< atomvecRK4 * >(), ivector interactions=vector< interaction * >(), \n"
		"    tvector trackers=vector< statetracker * >(), \n"
		"    constraintvector constraints=vector< constraint * >())\n"
		"collectionRK4(Box box, flt const dt, aRK4vector rgroups=vector< atomvecRK4 * >(), ivector interactions=vector< interaction * >(), \n"
		"    tvector trackers=vector< statetracker * >())\n"
		"collectionRK4(Box box, flt const dt, aRK4vector rgroups=vector< atomvecRK4 * >(), ivector interactions=vector< interaction * >())\n"
		"collectionRK4(Box box, flt const dt, aRK4vector rgroups=vector< atomvecRK4 * >())\n"
		"new_collectionRK4(Box box, flt const dt) -> collectionRK4\n"
		""},
	 { (char *)"collectionRK4_timestep", _wrap_collectionRK4_timestep, METH_VARARGS, (char *)"collectionRK4_timestep(collectionRK4 self)"},
	 { (char *)"collectionRK4_setdt", _wrap_collectionRK4_setdt, METH_VARARGS, (char *)"collectionRK4_setdt(collectionRK4 self, flt newdt)"},
	 { (char *)"delete_collectionRK4", _wrap_delete_collectionRK4, METH_VARARGS, (char *)"delete_collectionRK4(collectionRK4 self)"},
	 { (char *)"collectionRK4_swigregister", collectionRK4_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_collectionGear4NPH", _wrap_new_collectionGear4NPH, METH_VARARGS, (char *)"\n"
		"collectionGear4NPH(OriginBox box, flt const dt, flt const P, flt const Q, uint ncorrectionsteps, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >(), \n"
		"    tvector trackers=vector< statetracker * >(), constraintvector constraints=vector< constraint * >())\n"
		"collectionGear4NPH(OriginBox box, flt const dt, flt const P, flt const Q, uint ncorrectionsteps, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >(), \n"
		"    tvector trackers=vector< statetracker * >())\n"
		"collectionGear4NPH(OriginBox box, flt const dt, flt const P, flt const Q, uint ncorrectionsteps, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >())\n"
		"collectionGear4NPH(OriginBox box, flt const dt, flt const P, flt const Q, uint ncorrectionsteps, avector groups=vector< atomgroup * >())\n"
		"collectionGear4NPH(OriginBox box, flt const dt, flt const P, flt const Q, uint ncorrectionsteps)\n"
		"collectionGear4NPH(OriginBox box, flt const dt, flt const P, flt const Q, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >(), tvector trackers=vector< statetracker * >(), \n"
		"    constraintvector constraints=vector< constraint * >())\n"
		"collectionGear4NPH(OriginBox box, flt const dt, flt const P, flt const Q, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >(), tvector trackers=vector< statetracker * >())\n"
		"collectionGear4NPH(OriginBox box, flt const dt, flt const P, flt const Q, avector groups=vector< atomgroup * >(), \n"
		"    ivector interactions=vector< interaction * >())\n"
		"collectionGear4NPH(OriginBox box, flt const dt, flt const P, flt const Q, avector groups=vector< atomgroup * >())\n"
		"new_collectionGear4NPH(OriginBox box, flt const dt, flt const P, flt const Q) -> collectionGear4NPH\n"
		""},
	 { (char *)"collectionGear4NPH_timestep", _wrap_collectionGear4NPH_timestep, METH_VARARGS, (char *)"collectionGear4NPH_timestep(collectionGear4NPH self)"},
	 { (char *)"collectionGear4NPH_kinetic", _wrap_collectionGear4NPH_kinetic, METH_VARARGS, (char *)"collectionGear4NPH_kinetic(collectionGear4NPH self) -> flt"},
	 { (char *)"collectionGear4NPH_temp", _wrap_collectionGear4NPH_temp, METH_VARARGS, (char *)"\n"
		"temp(bool minuscomv=True) -> flt\n"
		"collectionGear4NPH_temp(collectionGear4NPH self) -> flt\n"
		""},
	 { (char *)"collectionGear4NPH_Hamiltonian", _wrap_collectionGear4NPH_Hamiltonian, METH_VARARGS, (char *)"collectionGear4NPH_Hamiltonian(collectionGear4NPH self) -> flt"},
	 { (char *)"collectionGear4NPH_getdV", _wrap_collectionGear4NPH_getdV, METH_VARARGS, (char *)"collectionGear4NPH_getdV(collectionGear4NPH self) -> flt"},
	 { (char *)"collectionGear4NPH_getddV", _wrap_collectionGear4NPH_getddV, METH_VARARGS, (char *)"collectionGear4NPH_getddV(collectionGear4NPH self) -> flt"},
	 { (char *)"collectionGear4NPH_setdt", _wrap_collectionGear4NPH_setdt, METH_VARARGS, (char *)"collectionGear4NPH_setdt(collectionGear4NPH self, flt newdt)"},
	 { (char *)"delete_collectionGear4NPH", _wrap_delete_collectionGear4NPH, METH_VARARGS, (char *)"delete_collectionGear4NPH(collectionGear4NPH self)"},
	 { (char *)"collectionGear4NPH_swigregister", collectionGear4NPH_swigregister, METH_VARARGS, NULL},
	 { (char *)"xrpsummer_xsum_set", _wrap_xrpsummer_xsum_set, METH_VARARGS, (char *)"xrpsummer_xsum_set(xrpsummer self, flt xsum)"},
	 { (char *)"xrpsummer_xsum_get", _wrap_xrpsummer_xsum_get, METH_VARARGS, (char *)"xrpsummer_xsum_get(xrpsummer self) -> flt"},
	 { (char *)"xrpsummer_rpxsum_set", _wrap_xrpsummer_rpxsum_set, METH_VARARGS, (char *)"xrpsummer_rpxsum_set(xrpsummer self, flt rpxsum)"},
	 { (char *)"xrpsummer_rpxsum_get", _wrap_xrpsummer_rpxsum_get, METH_VARARGS, (char *)"xrpsummer_rpxsum_get(xrpsummer self) -> flt"},
	 { (char *)"xrpsummer_vfsum_set", _wrap_xrpsummer_vfsum_set, METH_VARARGS, (char *)"xrpsummer_vfsum_set(xrpsummer self, flt vfsum)"},
	 { (char *)"xrpsummer_vfsum_get", _wrap_xrpsummer_vfsum_get, METH_VARARGS, (char *)"xrpsummer_vfsum_get(xrpsummer self) -> flt"},
	 { (char *)"xrpsummer_rfsum_set", _wrap_xrpsummer_rfsum_set, METH_VARARGS, (char *)"xrpsummer_rfsum_set(xrpsummer self, flt rfsum)"},
	 { (char *)"xrpsummer_rfsum_get", _wrap_xrpsummer_rfsum_get, METH_VARARGS, (char *)"xrpsummer_rfsum_get(xrpsummer self) -> flt"},
	 { (char *)"new_xrpsummer", _wrap_new_xrpsummer, METH_VARARGS, (char *)"new_xrpsummer(Box box) -> xrpsummer"},
	 { (char *)"xrpsummer_run", _wrap_xrpsummer_run, METH_VARARGS, (char *)"xrpsummer_run(xrpsummer self, forcepairx arg2)"},
	 { (char *)"xrpsummer_reset", _wrap_xrpsummer_reset, METH_VARARGS, (char *)"xrpsummer_reset(xrpsummer self)"},
	 { (char *)"delete_xrpsummer", _wrap_delete_xrpsummer, METH_VARARGS, (char *)"delete_xrpsummer(xrpsummer self)"},
	 { (char *)"xrpsummer_swigregister", xrpsummer_swigregister, METH_VARARGS, NULL},
	 { (char *)"collectionGear4NPT_dt_set", _wrap_collectionGear4NPT_dt_set, METH_VARARGS, (char *)"collectionGear4NPT_dt_set(collectionGear4NPT self, flt dt)"},
	 { (char *)"collectionGear4NPT_dt_get", _wrap_collectionGear4NPT_dt_get, METH_VARARGS, (char *)"collectionGear4NPT_dt_get(collectionGear4NPT self) -> flt"},
	 { (char *)"collectionGear4NPT_xrpsums_set", _wrap_collectionGear4NPT_xrpsums_set, METH_VARARGS, (char *)"collectionGear4NPT_xrpsums_set(collectionGear4NPT self, xrpsummer xrpsums)"},
	 { (char *)"collectionGear4NPT_xrpsums_get", _wrap_collectionGear4NPT_xrpsums_get, METH_VARARGS, (char *)"collectionGear4NPT_xrpsums_get(collectionGear4NPT self) -> xrpsummer"},
	 { (char *)"collectionGear4NPT_ncorrec_set", _wrap_collectionGear4NPT_ncorrec_set, METH_VARARGS, (char *)"collectionGear4NPT_ncorrec_set(collectionGear4NPT self, uint ncorrec)"},
	 { (char *)"collectionGear4NPT_ncorrec_get", _wrap_collectionGear4NPT_ncorrec_get, METH_VARARGS, (char *)"collectionGear4NPT_ncorrec_get(collectionGear4NPT self) -> uint"},
	 { (char *)"collectionGear4NPT_V1_set", _wrap_collectionGear4NPT_V1_set, METH_VARARGS, (char *)"collectionGear4NPT_V1_set(collectionGear4NPT self, flt V1)"},
	 { (char *)"collectionGear4NPT_V1_get", _wrap_collectionGear4NPT_V1_get, METH_VARARGS, (char *)"collectionGear4NPT_V1_get(collectionGear4NPT self) -> flt"},
	 { (char *)"collectionGear4NPT_V2_set", _wrap_collectionGear4NPT_V2_set, METH_VARARGS, (char *)"collectionGear4NPT_V2_set(collectionGear4NPT self, flt V2)"},
	 { (char *)"collectionGear4NPT_V2_get", _wrap_collectionGear4NPT_V2_get, METH_VARARGS, (char *)"collectionGear4NPT_V2_get(collectionGear4NPT self) -> flt"},
	 { (char *)"collectionGear4NPT_V3_set", _wrap_collectionGear4NPT_V3_set, METH_VARARGS, (char *)"collectionGear4NPT_V3_set(collectionGear4NPT self, flt V3)"},
	 { (char *)"collectionGear4NPT_V3_get", _wrap_collectionGear4NPT_V3_get, METH_VARARGS, (char *)"collectionGear4NPT_V3_get(collectionGear4NPT self) -> flt"},
	 { (char *)"collectionGear4NPT_chi_set", _wrap_collectionGear4NPT_chi_set, METH_VARARGS, (char *)"collectionGear4NPT_chi_set(collectionGear4NPT self, flt chi)"},
	 { (char *)"collectionGear4NPT_chi_get", _wrap_collectionGear4NPT_chi_get, METH_VARARGS, (char *)"collectionGear4NPT_chi_get(collectionGear4NPT self) -> flt"},
	 { (char *)"collectionGear4NPT_chixi_set", _wrap_collectionGear4NPT_chixi_set, METH_VARARGS, (char *)"collectionGear4NPT_chixi_set(collectionGear4NPT self, flt chixi)"},
	 { (char *)"collectionGear4NPT_chixi_get", _wrap_collectionGear4NPT_chixi_get, METH_VARARGS, (char *)"collectionGear4NPT_chixi_get(collectionGear4NPT self) -> flt"},
	 { (char *)"collectionGear4NPT_xs1_set", _wrap_collectionGear4NPT_xs1_set, METH_VARARGS, (char *)"collectionGear4NPT_xs1_set(collectionGear4NPT self, vecvector xs1)"},
	 { (char *)"collectionGear4NPT_xs1_get", _wrap_collectionGear4NPT_xs1_get, METH_VARARGS, (char *)"collectionGear4NPT_xs1_get(collectionGear4NPT self) -> vecvector"},
	 { (char *)"collectionGear4NPT_xs2_set", _wrap_collectionGear4NPT_xs2_set, METH_VARARGS, (char *)"collectionGear4NPT_xs2_set(collectionGear4NPT self, vecvector xs2)"},
	 { (char *)"collectionGear4NPT_xs2_get", _wrap_collectionGear4NPT_xs2_get, METH_VARARGS, (char *)"collectionGear4NPT_xs2_get(collectionGear4NPT self) -> vecvector"},
	 { (char *)"collectionGear4NPT_xs3_set", _wrap_collectionGear4NPT_xs3_set, METH_VARARGS, (char *)"collectionGear4NPT_xs3_set(collectionGear4NPT self, vecvector xs3)"},
	 { (char *)"collectionGear4NPT_xs3_get", _wrap_collectionGear4NPT_xs3_get, METH_VARARGS, (char *)"collectionGear4NPT_xs3_get(collectionGear4NPT self) -> vecvector"},
	 { (char *)"collectionGear4NPT_vs2_set", _wrap_collectionGear4NPT_vs2_set, METH_VARARGS, (char *)"collectionGear4NPT_vs2_set(collectionGear4NPT self, vecvector vs2)"},
	 { (char *)"collectionGear4NPT_vs2_get", _wrap_collectionGear4NPT_vs2_get, METH_VARARGS, (char *)"collectionGear4NPT_vs2_get(collectionGear4NPT self) -> vecvector"},
	 { (char *)"collectionGear4NPT_vs3_set", _wrap_collectionGear4NPT_vs3_set, METH_VARARGS, (char *)"collectionGear4NPT_vs3_set(collectionGear4NPT self, vecvector vs3)"},
	 { (char *)"collectionGear4NPT_vs3_get", _wrap_collectionGear4NPT_vs3_get, METH_VARARGS, (char *)"collectionGear4NPT_vs3_get(collectionGear4NPT self) -> vecvector"},
	 { (char *)"collectionGear4NPT_resetbs", _wrap_collectionGear4NPT_resetbs, METH_VARARGS, (char *)"collectionGear4NPT_resetbs(collectionGear4NPT self)"},
	 { (char *)"collectionGear4NPT_tointerpair", _wrap_collectionGear4NPT_tointerpair, METH_VARARGS, (char *)"collectionGear4NPT_tointerpair(ifxvector arg1) -> ivector"},
	 { (char *)"new_collectionGear4NPT", _wrap_new_collectionGear4NPT, METH_VARARGS, (char *)"\n"
		"collectionGear4NPT(OriginBox box, flt const dt, uint ncorrectionsteps, avector groups=vector< atomgroup * >(), \n"
		"    ifxvector interactions=vector< interactionpairsx * >(), tvector trackers=vector< statetracker * >(), \n"
		"    constraintvector constraints=vector< constraint * >())\n"
		"collectionGear4NPT(OriginBox box, flt const dt, uint ncorrectionsteps, avector groups=vector< atomgroup * >(), \n"
		"    ifxvector interactions=vector< interactionpairsx * >(), tvector trackers=vector< statetracker * >())\n"
		"collectionGear4NPT(OriginBox box, flt const dt, uint ncorrectionsteps, avector groups=vector< atomgroup * >(), \n"
		"    ifxvector interactions=vector< interactionpairsx * >())\n"
		"collectionGear4NPT(OriginBox box, flt const dt, uint ncorrectionsteps, avector groups=vector< atomgroup * >())\n"
		"collectionGear4NPT(OriginBox box, flt const dt, uint ncorrectionsteps)\n"
		"collectionGear4NPT(OriginBox box, flt const dt, avector groups=vector< atomgroup * >(), ifxvector interactions=vector< interactionpairsx * >(), \n"
		"    tvector trackers=vector< statetracker * >(), \n"
		"    constraintvector constraints=vector< constraint * >())\n"
		"collectionGear4NPT(OriginBox box, flt const dt, avector groups=vector< atomgroup * >(), ifxvector interactions=vector< interactionpairsx * >(), \n"
		"    tvector trackers=vector< statetracker * >())\n"
		"collectionGear4NPT(OriginBox box, flt const dt, avector groups=vector< atomgroup * >(), ifxvector interactions=vector< interactionpairsx * >())\n"
		"collectionGear4NPT(OriginBox box, flt const dt, avector groups=vector< atomgroup * >())\n"
		"new_collectionGear4NPT(OriginBox box, flt const dt) -> collectionGear4NPT\n"
		""},
	 { (char *)"collectionGear4NPT_setForces", _wrap_collectionGear4NPT_setForces, METH_VARARGS, (char *)"\n"
		"setForces(bool seta=True)\n"
		"collectionGear4NPT_setForces(collectionGear4NPT self)\n"
		""},
	 { (char *)"collectionGear4NPT_timestep", _wrap_collectionGear4NPT_timestep, METH_VARARGS, (char *)"collectionGear4NPT_timestep(collectionGear4NPT self)"},
	 { (char *)"delete_collectionGear4NPT", _wrap_delete_collectionGear4NPT, METH_VARARGS, (char *)"delete_collectionGear4NPT(collectionGear4NPT self)"},
	 { (char *)"collectionGear4NPT_swigregister", collectionGear4NPT_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_collectionVerletNPT", _wrap_new_collectionVerletNPT, METH_VARARGS, (char *)"\n"
		"collectionVerletNPT(OriginBox box, flt const dt, flt const P, flt const QP, flt const T, flt const QT, \n"
		"    avector groups=vector< atomgroup * >(), ivector interactions=vector< interaction * >(), \n"
		"    tvector trackers=vector< statetracker * >(), constraintvector constraints=vector< constraint * >())\n"
		"collectionVerletNPT(OriginBox box, flt const dt, flt const P, flt const QP, flt const T, flt const QT, \n"
		"    avector groups=vector< atomgroup * >(), ivector interactions=vector< interaction * >(), \n"
		"    tvector trackers=vector< statetracker * >())\n"
		"collectionVerletNPT(OriginBox box, flt const dt, flt const P, flt const QP, flt const T, flt const QT, \n"
		"    avector groups=vector< atomgroup * >(), ivector interactions=vector< interaction * >())\n"
		"collectionVerletNPT(OriginBox box, flt const dt, flt const P, flt const QP, flt const T, flt const QT, \n"
		"    avector groups=vector< atomgroup * >())\n"
		"new_collectionVerletNPT(OriginBox box, flt const dt, flt const P, flt const QP, flt const T, flt const QT) -> collectionVerletNPT\n"
		""},
	 { (char *)"collectionVerletNPT_timestep", _wrap_collectionVerletNPT_timestep, METH_VARARGS, (char *)"collectionVerletNPT_timestep(collectionVerletNPT self)"},
	 { (char *)"collectionVerletNPT_setdt", _wrap_collectionVerletNPT_setdt, METH_VARARGS, (char *)"collectionVerletNPT_setdt(collectionVerletNPT self, flt newdt)"},
	 { (char *)"collectionVerletNPT_resetcomv", _wrap_collectionVerletNPT_resetcomv, METH_VARARGS, (char *)"collectionVerletNPT_resetcomv(collectionVerletNPT self)"},
	 { (char *)"collectionVerletNPT_resetL", _wrap_collectionVerletNPT_resetL, METH_VARARGS, (char *)"collectionVerletNPT_resetL(collectionVerletNPT self)"},
	 { (char *)"collectionVerletNPT_scaleVs", _wrap_collectionVerletNPT_scaleVs, METH_VARARGS, (char *)"collectionVerletNPT_scaleVs(collectionVerletNPT self, flt scaleby)"},
	 { (char *)"collectionVerletNPT_scaleVelocitiesT", _wrap_collectionVerletNPT_scaleVelocitiesT, METH_VARARGS, (char *)"collectionVerletNPT_scaleVelocitiesT(collectionVerletNPT self, flt T)"},
	 { (char *)"collectionVerletNPT_scaleVelocitiesE", _wrap_collectionVerletNPT_scaleVelocitiesE, METH_VARARGS, (char *)"collectionVerletNPT_scaleVelocitiesE(collectionVerletNPT self, flt E)"},
	 { (char *)"collectionVerletNPT_geteta", _wrap_collectionVerletNPT_geteta, METH_VARARGS, (char *)"collectionVerletNPT_geteta(collectionVerletNPT self) -> flt"},
	 { (char *)"collectionVerletNPT_getxidot", _wrap_collectionVerletNPT_getxidot, METH_VARARGS, (char *)"collectionVerletNPT_getxidot(collectionVerletNPT self) -> flt"},
	 { (char *)"collectionVerletNPT_getP", _wrap_collectionVerletNPT_getP, METH_VARARGS, (char *)"collectionVerletNPT_getP(collectionVerletNPT self) -> flt"},
	 { (char *)"collectionVerletNPT_getvhalf", _wrap_collectionVerletNPT_getvhalf, METH_VARARGS, (char *)"collectionVerletNPT_getvhalf(collectionVerletNPT self, uint n) -> Vec"},
	 { (char *)"delete_collectionVerletNPT", _wrap_delete_collectionVerletNPT, METH_VARARGS, (char *)"delete_collectionVerletNPT(collectionVerletNPT self)"},
	 { (char *)"collectionVerletNPT_swigregister", collectionVerletNPT_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_jammingtreeBDTo_p_jammingtree2(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jammingtree2 *)  ((jammingtreeBD *) x));
}
static void *_p_coordConstraintTo_p_constraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((constraint *)  ((coordConstraint *) x));
}
static void *_p_coordCOMConstraintTo_p_constraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((constraint *)  ((coordCOMConstraint *) x));
}
static void *_p_relativeConstraintTo_p_constraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((constraint *)  ((relativeConstraint *) x));
}
static void *_p_NPHGaussianConstraintTo_p_constraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((constraint *)  ((NPHGaussianConstraint *) x));
}
static void *_p_collectionRK4To_p_collection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((collection *)  ((collectionRK4 *) x));
}
static void *_p_collectionConjGradientBoxTo_p_collection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((collection *)  ((collectionConjGradientBox *) x));
}
static void *_p_StaticCollecTo_p_collection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((collection *)  ((StaticCollec *) x));
}
static void *_p_collectionGear4NPHTo_p_collection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((collection *)  ((collectionGear4NPH *) x));
}
static void *_p_collectionConjGradientTo_p_collection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((collection *)  ((collectionConjGradient *) x));
}
static void *_p_collectionVerletTo_p_collection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((collection *)  ((collectionVerlet *) x));
}
static void *_p_collectionSolTo_p_collection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((collection *)  ((collectionSol *) x));
}
static void *_p_collectionSolHTTo_p_collection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((collection *)  ((collectionSolHT *) x));
}
static void *_p_collectionNoseHooverTo_p_collection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((collection *)  ((collectionNoseHoover *) x));
}
static void *_p_collectionGear6ATo_p_collection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((collection *)  ((collectionGear6A *) x));
}
static void *_p_collectionVerletNPTTo_p_collection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((collection *)  ((collectionVerletNPT *) x));
}
static void *_p_collectionOverdampedTo_p_collection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((collection *)  ((collectionOverdamped *) x));
}
static void *_p_collectionGear5ATo_p_collection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((collection *)  ((collectionGear5A *) x));
}
static void *_p_collectionGear4ATo_p_collection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((collection *)  ((collectionGear4A *) x));
}
static void *_p_collectionGear4NPTTo_p_collection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((collection *)  ((collectionGear4NPT *) x));
}
static void *_p_collectionGaussianTTo_p_collection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((collection *)  ((collectionGaussianT *) x));
}
static void *_p_collectionGear3ATo_p_collection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((collection *)  ((collectionGear3A *) x));
}
static void *_p_p_atomRK4To_p_p_atom(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atom **)  ((atomRK4 **) x));
}
static void *_p_atomRK4To_p_atom(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atom *)  ((atomRK4 *) x));
}
static void *_p_jamminglistrotTo_p_jamminglist(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jamminglist *)  ((jamminglistrot *) x));
}
static void *_p_Vector2T_double_tTo_p_NumvectorT_double_2_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Numvector< double,2 > *)  ((Vector2< double > *) x));
}
static void *_p_NumvectorT_double_2_tTo_p_NvectorT_double_2_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Nvector< double,2 > *)  ((Numvector< double,2 > *) x));
}
static void *_p_Vector2T_double_tTo_p_NvectorT_double_2_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Nvector< double,2 > *) (Numvector< double,2 > *) ((Vector2< double > *) x));
}
static void *_p_atomidTo_p_atomref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomref *)  ((atomid *) x));
}
static void *_p_HydroAtomTo_p_atomref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomref *) (atomid *) ((HydroAtom *) x));
}
static void *_p_LJishAtomTo_p_atomref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomref *) (atomid *) ((LJishAtom *) x));
}
static void *_p_ChargedTo_p_atomref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomref *) (atomid *) ((Charged *) x));
}
static void *_p_LJatomcutTo_p_atomref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomref *) (atomid *)(LJatom *) ((LJatomcut *) x));
}
static void *_p_HertzianAtomTo_p_atomref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomref *) (atomid *) ((HertzianAtom *) x));
}
static void *_p_LJatomTo_p_atomref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomref *) (atomid *) ((LJatom *) x));
}
static void *_p_LJAttractRepulseAtomTo_p_atomref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomref *) (atomid *) ((LJAttractRepulseAtom *) x));
}
static void *_p_LJAttractFixedRepulseAtomTo_p_atomref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomref *) (atomid *) ((LJAttractFixedRepulseAtom *) x));
}
static void *_p_LJDoubleAtomTo_p_atomref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomref *) (atomid *)(LJatom *) ((LJDoubleAtom *) x));
}
static void *_p_EisMclachlanAtomTo_p_atomref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomref *) (atomid *) ((EisMclachlanAtom *) x));
}
static void *_p_LJAtomIndexedTo_p_atomref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomref *) (atomid *) ((LJAtomIndexed *) x));
}
static void *_p_atompairTo_p_arrayT_atom_p_2_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((array< atom *,2 > *)  ((atompair *) x));
}
static void *_p_springTo_p_interactpair(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interactpair *)  ((spring *) x));
}
static void *_p_electricScreenedTo_p_interactpair(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interactpair *)  ((electricScreened *) x));
}
static void *_p_LJDoublePairTo_p_LJAttractFixedRepulsePair(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LJAttractFixedRepulsePair *)  ((LJDoublePair *) x));
}
static void *_p_bondpairsTo_p_interaction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interaction *)  ((bondpairs *) x));
}
static void *_p_LJsimpleTo_p_interaction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interaction *)  ((LJsimple *) x));
}
static void *_p_NListedT_HydroAtom_HydroPair_tTo_p_interaction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interaction *)  ((NListed< HydroAtom,HydroPair > *) x));
}
static void *_p_NListedT_LJatom_LJpair_tTo_p_interaction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interaction *)  ((NListed< LJatom,LJpair > *) x));
}
static void *_p_NListedT_LJDoubleAtom_LJDoublePair_tTo_p_interaction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interaction *)  ((NListed< LJDoubleAtom,LJDoublePair > *) x));
}
static void *_p_fixedForceTo_p_interaction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interaction *)  ((fixedForce *) x));
}
static void *_p_angletriplesTo_p_interaction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interaction *)  ((angletriples *) x));
}
static void *_p_NListedT_LJAtomIndexed_LJFullPair_tTo_p_interaction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interaction *)  ((NListed< LJAtomIndexed,LJFullPair > *) x));
}
static void *_p_NListedT_LJatomcut_LJAttractPair_tTo_p_interaction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interaction *)  ((NListed< LJatomcut,LJAttractPair > *) x));
}
static void *_p_NListedT_EisMclachlanAtom_EisMclachlanPair_tTo_p_interaction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interaction *)  ((NListed< EisMclachlanAtom,EisMclachlanPair > *) x));
}
static void *_p_NListedT_LJishAtom_LJishPair_tTo_p_interaction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interaction *)  ((NListed< LJishAtom,LJishPair > *) x));
}
static void *_p_SimpleListedT_HertzianAtom_HertzianPair_tTo_p_interaction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interaction *)  ((SimpleListed< HertzianAtom,HertzianPair > *) x));
}
static void *_p_NListedT_HertzianAtom_HertzianPair_tTo_p_interaction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interaction *)  ((NListed< HertzianAtom,HertzianPair > *) x));
}
static void *_p_NListedVirialT_HertzianAtom_HertzianPair_tTo_p_interaction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interaction *) (interactionpairsx *) ((NListedVirial< HertzianAtom,HertzianPair > *) x));
}
static void *_p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_tTo_p_interaction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interaction *)  ((NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *) x));
}
static void *_p_COMSpringTo_p_interaction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interaction *)  ((COMSpring *) x));
}
static void *_p_ChargesTo_p_interaction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interaction *)  ((Charges *) x));
}
static void *_p_fixedSpringTo_p_interaction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interaction *)  ((fixedSpring *) x));
}
static void *_p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_tTo_p_interaction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interaction *)  ((NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *) x));
}
static void *_p_interactionpairsxTo_p_interaction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interaction *)  ((interactionpairsx *) x));
}
static void *_p_NumvectorT_double_3_tTo_p_NvectorT_double_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Nvector< double,3 > *)  ((Numvector< double,3 > *) x));
}
static void *_p_OriginBoxTo_p_Box(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Box *)  ((OriginBox *) x));
}
static void *_p_InfiniteBoxTo_p_Box(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Box *)  ((InfiniteBox *) x));
}
static void *_p_xrpsummerTo_p_fpairxFunct(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fpairxFunct *)  ((xrpsummer *) x));
}
static void *_p_neighborlistTo_p_statetracker(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((statetracker *)  ((neighborlist *) x));
}
static void *_p_NListedVirialT_HertzianAtom_HertzianPair_tTo_p_NListedT_HertzianAtom_HertzianPair_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((NListed< HertzianAtom,HertzianPair > *)  ((NListedVirial< HertzianAtom,HertzianPair > *) x));
}
static void *_p_NListedVirialT_HertzianAtom_HertzianPair_tTo_p_interactionpairsx(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interactionpairsx *)  ((NListedVirial< HertzianAtom,HertzianPair > *) x));
}
static void *_p_LJatomcutTo_p_LJatom(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LJatom *)  ((LJatomcut *) x));
}
static void *_p_LJDoubleAtomTo_p_LJatom(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LJatom *)  ((LJDoubleAtom *) x));
}
static void *_p_idpairTo_p_arrayT_atomid_2_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((array< atomid,2 > *)  ((idpair *) x));
}
static void *_p_HydroAtomTo_p_atomid(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomid *)  ((HydroAtom *) x));
}
static void *_p_LJishAtomTo_p_atomid(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomid *)  ((LJishAtom *) x));
}
static void *_p_ChargedTo_p_atomid(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomid *)  ((Charged *) x));
}
static void *_p_LJatomcutTo_p_atomid(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomid *) (LJatom *) ((LJatomcut *) x));
}
static void *_p_HertzianAtomTo_p_atomid(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomid *)  ((HertzianAtom *) x));
}
static void *_p_LJatomTo_p_atomid(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomid *)  ((LJatom *) x));
}
static void *_p_LJAttractRepulseAtomTo_p_atomid(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomid *)  ((LJAttractRepulseAtom *) x));
}
static void *_p_LJAttractFixedRepulseAtomTo_p_atomid(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomid *)  ((LJAttractFixedRepulseAtom *) x));
}
static void *_p_LJDoubleAtomTo_p_atomid(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomid *) (LJatom *) ((LJDoubleAtom *) x));
}
static void *_p_EisMclachlanAtomTo_p_atomid(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomid *)  ((EisMclachlanAtom *) x));
}
static void *_p_LJAtomIndexedTo_p_atomid(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomid *)  ((LJAtomIndexed *) x));
}
static void *_p_metagroupTo_p_atomgroup(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomgroup *)  ((metagroup *) x));
}
static void *_p_atomvecTo_p_atomgroup(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomgroup *)  ((atomvec *) x));
}
static void *_p_atomvecRK4To_p_atomgroup(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((atomgroup *)  ((atomvecRK4 *) x));
}
static swig_type_info _swigt__p_Box = {"_p_Box", "Box *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_COMSpring = {"_p_COMSpring", "COMSpring *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ChargePair = {"_p_ChargePair", "ChargePair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Charged = {"_p_Charged", "Charged *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Charges = {"_p_Charges", "Charges *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EisMclachlanAtom = {"_p_EisMclachlanAtom", "EisMclachlanAtom *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EisMclachlanPair = {"_p_EisMclachlanPair", "EisMclachlanPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HertzianAtom = {"_p_HertzianAtom", "HertzianAtom *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HertzianPair = {"_p_HertzianPair", "HertzianPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HydroAtom = {"_p_HydroAtom", "HydroAtom *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HydroPair = {"_p_HydroPair", "HydroPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InfiniteBox = {"_p_InfiniteBox", "InfiniteBox *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LJAtomIndexed = {"_p_LJAtomIndexed", "LJAtomIndexed *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LJAttractFixedRepulseAtom = {"_p_LJAttractFixedRepulseAtom", "LJAttractFixedRepulseAtom *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LJAttractFixedRepulsePair = {"_p_LJAttractFixedRepulsePair", "LJAttractFixedRepulsePair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LJAttractPair = {"_p_LJAttractPair", "LJAttractPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LJAttractRepulseAtom = {"_p_LJAttractRepulseAtom", "LJAttractRepulseAtom *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LJAttractRepulsePair = {"_p_LJAttractRepulsePair", "LJAttractRepulsePair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LJDoubleAtom = {"_p_LJDoubleAtom", "LJDoubleAtom *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LJDoublePair = {"_p_LJDoublePair", "LJDoublePair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LJFullCut = {"_p_LJFullCut", "LJFullCut *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LJFullPair = {"_p_LJFullPair", "LJFullPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LJatom = {"_p_LJatom", "LJatom *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LJatomcut = {"_p_LJatomcut", "LJatomcut *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LJattract = {"_p_LJattract", "LJattract *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LJattractCut = {"_p_LJattractCut", "LJattractCut *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LJishAtom = {"_p_LJishAtom", "LJishAtom *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LJishPair = {"_p_LJishPair", "LJishPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LJpair = {"_p_LJpair", "LJpair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LJrepulsive = {"_p_LJrepulsive", "LJrepulsive *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LJsimple = {"_p_LJsimple", "LJsimple *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NListedT_EisMclachlanAtom_EisMclachlanPair_t = {"_p_NListedT_EisMclachlanAtom_EisMclachlanPair_t", "NListed< EisMclachlanAtom,EisMclachlanPair > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NListedT_HertzianAtom_HertzianPair_t = {"_p_NListedT_HertzianAtom_HertzianPair_t", "NListed< HertzianAtom,HertzianPair > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NListedT_HydroAtom_HydroPair_t = {"_p_NListedT_HydroAtom_HydroPair_t", "NListed< HydroAtom,HydroPair > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NListedT_LJAtomIndexed_LJFullPair_t = {"_p_NListedT_LJAtomIndexed_LJFullPair_t", "NListed< LJAtomIndexed,LJFullPair > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t = {"_p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t", "NListed< LJAttractFixedRepulseAtom,LJAttractFixedRepulsePair > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t = {"_p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t", "NListed< LJAttractRepulseAtom,LJAttractRepulsePair > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NListedT_LJDoubleAtom_LJDoublePair_t = {"_p_NListedT_LJDoubleAtom_LJDoublePair_t", "NListed< LJDoubleAtom,LJDoublePair > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NListedT_LJatom_LJpair_t = {"_p_NListedT_LJatom_LJpair_t", "NListed< LJatom,LJpair > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NListedT_LJatomcut_LJAttractPair_t = {"_p_NListedT_LJatomcut_LJAttractPair_t", "NListed< LJatomcut,LJAttractPair > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NListedT_LJishAtom_LJishPair_t = {"_p_NListedT_LJishAtom_LJishPair_t", "NListed< LJishAtom,LJishPair > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NListedVirialT_HertzianAtom_HertzianPair_t = {"_p_NListedVirialT_HertzianAtom_HertzianPair_t", "NListedVirial< HertzianAtom,HertzianPair > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NPHGaussianConstraint = {"_p_NPHGaussianConstraint", "NPHGaussianConstraint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NumvectorT_double_2_t = {"_p_NumvectorT_double_2_t", "Numvector< double,2 > *|Pair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NumvectorT_double_3_t = {"_p_NumvectorT_double_3_t", "Numvector< double,3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NvectorT_Vec_2_t = {"_p_NvectorT_Vec_2_t", "VecPair *|Nvector< Vec,2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NvectorT_Vector2T_double_t_3_t = {"_p_NvectorT_Vector2T_double_t_3_t", "Nvector< Vec,3 > *|Nvector< Vector2< double >,3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NvectorT_double_2_t = {"_p_NvectorT_double_2_t", "Nvector< double,2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NvectorT_double_3_t = {"_p_NvectorT_double_3_t", "Nvector< double,3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OriginBox = {"_p_OriginBox", "OriginBox *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleListedT_HertzianAtom_HertzianPair_t = {"_p_SimpleListedT_HertzianAtom_HertzianPair_t", "SimpleListed< HertzianAtom,HertzianPair > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StaticCollec = {"_p_StaticCollec", "StaticCollec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vector2T_double_t = {"_p_Vector2T_double_t", "vector< Vector2< double > >::value_type *|Vec *|vector< Vector2< double > * >::value_type|Vector2< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_anglegrouping = {"_p_anglegrouping", "anglegrouping *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_angletriples = {"_p_angletriples", "angletriples *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_arrayT_atom_p_2_t = {"_p_arrayT_atom_p_2_t", "array< atom *,2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_arrayT_atom_p_3_t = {"_p_arrayT_atom_p_3_t", "array< atom *,3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_arrayT_atom_p_4_t = {"_p_arrayT_atom_p_4_t", "array< atom *,4 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_arrayT_atomid_2_t = {"_p_arrayT_atomid_2_t", "array< atomid,2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_atom = {"_p_atom", "atom *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_atomRK4 = {"_p_atomRK4", "atomRK4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_atomgroup = {"_p_atomgroup", "vector< atomgroup * >::value_type|atomgroup *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_atomid = {"_p_atomid", "atomid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_atompair = {"_p_atompair", "atompair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_atompaircomp = {"_p_atompaircomp", "atompaircomp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_atomref = {"_p_atomref", "atomref *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_atomvec = {"_p_atomvec", "atomvec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_atomvecRK4 = {"_p_atomvecRK4", "vector< atomvecRK4 * >::value_type|atomvecRK4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bivariateGauss = {"_p_bivariateGauss", "bivariateGauss *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bondangle = {"_p_bondangle", "bondangle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bondgrouping = {"_p_bondgrouping", "bondgrouping *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bondpairs = {"_p_bondpairs", "bondpairs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__mt19937 = {"_p_boost__mt19937", "boost::mt19937 *|engine *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__normal_distributionT_t = {"_p_boost__normal_distributionT_t", "normdistribution *|boost::normal_distribution< > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__uniform_01T_t = {"_p_boost__uniform_01T_t", "lindistribution *|boost::uniform_01< > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__variate_generatorT_engine_R_lindistribution_t = {"_p_boost__variate_generatorT_engine_R_lindistribution_t", "boost::variate_generator< engine &,lindistribution > *|lingenerator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__variate_generatorT_engine_R_normdistribution_t = {"_p_boost__variate_generatorT_engine_R_normdistribution_t", "boost::variate_generator< engine &,normdistribution > *|normgenerator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_collection = {"_p_collection", "collection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_collectionConjGradient = {"_p_collectionConjGradient", "collectionConjGradient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_collectionConjGradientBox = {"_p_collectionConjGradientBox", "collectionConjGradientBox *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_collectionGaussianT = {"_p_collectionGaussianT", "collectionGaussianT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_collectionGear3A = {"_p_collectionGear3A", "collectionGear3A *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_collectionGear4A = {"_p_collectionGear4A", "collectionGear4A *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_collectionGear4NPH = {"_p_collectionGear4NPH", "collectionGear4NPH *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_collectionGear4NPT = {"_p_collectionGear4NPT", "collectionGear4NPT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_collectionGear5A = {"_p_collectionGear5A", "collectionGear5A *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_collectionGear6A = {"_p_collectionGear6A", "collectionGear6A *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_collectionNoseHoover = {"_p_collectionNoseHoover", "collectionNoseHoover *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_collectionOverdamped = {"_p_collectionOverdamped", "collectionOverdamped *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_collectionRK4 = {"_p_collectionRK4", "collectionRK4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_collectionSol = {"_p_collectionSol", "collectionSol *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_collectionSolHT = {"_p_collectionSolHT", "collectionSolHT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_collectionVerlet = {"_p_collectionVerlet", "collectionVerlet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_collectionVerletNPT = {"_p_collectionVerletNPT", "collectionVerletNPT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reference = {"_p_const_reference", "const_reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_constraint = {"_p_constraint", "vector< constraint * >::value_type|constraint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_coordCOMConstraint = {"_p_coordCOMConstraint", "coordCOMConstraint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_coordConstraint = {"_p_coordConstraint", "coordConstraint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "flt *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_electricScreened = {"_p_electricScreened", "electricScreened *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fixedForce = {"_p_fixedForce", "fixedForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fixedForceAtom = {"_p_fixedForceAtom", "fixedForceAtom *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fixedSpring = {"_p_fixedSpring", "fixedSpring *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fixedSpringAtom = {"_p_fixedSpringAtom", "fixedSpringAtom *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_forcepair = {"_p_forcepair", "forcepair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_forcepairx = {"_p_forcepairx", "forcepairx *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fpairxFunct = {"_p_fpairxFunct", "fpairxFunct *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gaussVec = {"_p_gaussVec", "gaussVec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_idpair = {"_p_idpair", "idpair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_interaction = {"_p_interaction", "interaction *|vector< interaction * >::value_type", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_interactionpairsx = {"_p_interactionpairsx", "vector< interactionpairsx * >::value_type|interactionpairsx *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_interactpair = {"_p_interactpair", "interactpair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jamminglist = {"_p_jamminglist", "list< jamminglist >::value_type *|jamminglist *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jamminglistrot = {"_p_jamminglistrot", "list< jamminglistrot >::value_type *|jamminglistrot *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jammingtree = {"_p_jammingtree", "jammingtree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jammingtree2 = {"_p_jammingtree2", "jammingtree2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jammingtreeBD = {"_p_jammingtreeBD", "jammingtreeBD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_metagroup = {"_p_metagroup", "metagroup *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_neighborlist = {"_p_neighborlist", "neighborlist *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_atom = {"_p_p_atom", "atom **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_atomRK4 = {"_p_p_atomRK4", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_pairlist = {"_p_pairlist", "pairlist *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_reference = {"_p_reference", "reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_relativeConstraint = {"_p_relativeConstraint", "relativeConstraint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_setT_atomid_t = {"_p_setT_atomid_t", "set< atomid > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_setT_atomid_t__iterator = {"_p_setT_atomid_t__iterator", "set< atomid >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_spring = {"_p_spring", "spring *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_statetracker = {"_p_statetracker", "statetracker *|vector< statetracker * >::value_type", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_Vector2T_double_t_p_t = {"_p_std__allocatorT_Vector2T_double_t_p_t", "vector< Vector2< double > * >::allocator_type *|std::allocator< Vector2< double > * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_Vector2T_double_t_t = {"_p_std__allocatorT_Vector2T_double_t_t", "std::allocator< Vector2< double > > *|vector< Vector2< double > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_atomgroup_p_t = {"_p_std__allocatorT_atomgroup_p_t", "vector< atomgroup * >::allocator_type *|std::allocator< atomgroup * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_atomvecRK4_p_t = {"_p_std__allocatorT_atomvecRK4_p_t", "vector< atomvecRK4 * >::allocator_type *|std::allocator< atomvecRK4 * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_constraint_p_t = {"_p_std__allocatorT_constraint_p_t", "vector< constraint * >::allocator_type *|std::allocator< constraint * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_double_t = {"_p_std__allocatorT_double_t", "vector< double >::allocator_type *|std::allocator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_interaction_p_t = {"_p_std__allocatorT_interaction_p_t", "vector< interaction * >::allocator_type *|std::allocator< interaction * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_interactionpairsx_p_t = {"_p_std__allocatorT_interactionpairsx_p_t", "vector< interactionpairsx * >::allocator_type *|std::allocator< interactionpairsx * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_jamminglist_t = {"_p_std__allocatorT_jamminglist_t", "list< jamminglist >::allocator_type *|std::allocator< jamminglist > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_jamminglistrot_t = {"_p_std__allocatorT_jamminglistrot_t", "list< jamminglistrot >::allocator_type *|std::allocator< jamminglistrot > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_statetracker_p_t = {"_p_std__allocatorT_statetracker_p_t", "vector< statetracker * >::allocator_type *|std::allocator< statetracker * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_unsigned_int_t = {"_p_std__allocatorT_unsigned_int_t", "vector< unsigned int >::allocator_type *|std::allocator< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT__Tp__Alloc_t = {"_p_std__listT__Tp__Alloc_t", "std::list< _Tp,_Alloc > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t = {"_p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t", "list< jamminglist,std::allocator< jamminglist > > *|list< jamminglist > *|std::list< jamminglist > *|std::list< jamminglist,std::allocator< jamminglist > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t = {"_p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t", "list< jamminglistrot,std::allocator< jamminglistrot > > *|list< jamminglistrot > *|std::list< jamminglistrot > *|std::list< jamminglistrot,std::allocator< jamminglistrot > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Charged_std__allocatorT_Charged_t_t = {"_p_std__vectorT_Charged_std__allocatorT_Charged_t_t", "std::vector< Charged > *|std::vector< Charged,std::allocator< Charged > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_EisMclachlanAtom_std__allocatorT_EisMclachlanAtom_t_t = {"_p_std__vectorT_EisMclachlanAtom_std__allocatorT_EisMclachlanAtom_t_t", "std::vector< EisMclachlanAtom,std::allocator< EisMclachlanAtom > > *|std::vector< EisMclachlanAtom > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_HertzianAtom_std__allocatorT_HertzianAtom_t_t = {"_p_std__vectorT_HertzianAtom_std__allocatorT_HertzianAtom_t_t", "std::vector< HertzianAtom,std::allocator< HertzianAtom > > *|std::vector< HertzianAtom > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_HydroAtom_std__allocatorT_HydroAtom_t_t = {"_p_std__vectorT_HydroAtom_std__allocatorT_HydroAtom_t_t", "std::vector< HydroAtom > *|std::vector< HydroAtom,std::allocator< HydroAtom > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_LJAtomIndexed_std__allocatorT_LJAtomIndexed_t_t = {"_p_std__vectorT_LJAtomIndexed_std__allocatorT_LJAtomIndexed_t_t", "std::vector< LJAtomIndexed,std::allocator< LJAtomIndexed > > *|std::vector< LJAtomIndexed > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_LJAttractFixedRepulseAtom_std__allocatorT_LJAttractFixedRepulseAtom_t_t = {"_p_std__vectorT_LJAttractFixedRepulseAtom_std__allocatorT_LJAttractFixedRepulseAtom_t_t", "std::vector< LJAttractFixedRepulseAtom > *|std::vector< LJAttractFixedRepulseAtom,std::allocator< LJAttractFixedRepulseAtom > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_LJAttractRepulseAtom_std__allocatorT_LJAttractRepulseAtom_t_t = {"_p_std__vectorT_LJAttractRepulseAtom_std__allocatorT_LJAttractRepulseAtom_t_t", "std::vector< LJAttractRepulseAtom > *|std::vector< LJAttractRepulseAtom,std::allocator< LJAttractRepulseAtom > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_LJDoubleAtom_std__allocatorT_LJDoubleAtom_t_t = {"_p_std__vectorT_LJDoubleAtom_std__allocatorT_LJDoubleAtom_t_t", "std::vector< LJDoubleAtom > *|std::vector< LJDoubleAtom,std::allocator< LJDoubleAtom > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_LJatom_std__allocatorT_LJatom_t_t = {"_p_std__vectorT_LJatom_std__allocatorT_LJatom_t_t", "std::vector< LJatom,std::allocator< LJatom > > *|std::vector< LJatom > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_LJatomcut_std__allocatorT_LJatomcut_t_t = {"_p_std__vectorT_LJatomcut_std__allocatorT_LJatomcut_t_t", "std::vector< LJatomcut,std::allocator< LJatomcut > > *|std::vector< LJatomcut > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_LJishAtom_std__allocatorT_LJishAtom_t_t = {"_p_std__vectorT_LJishAtom_std__allocatorT_LJishAtom_t_t", "std::vector< LJishAtom > *|std::vector< LJishAtom,std::allocator< LJishAtom > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t = {"_p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t", "vector< Vector2< double > *,std::allocator< Vector2< double > * > > *|std::vector< Vector2< double > *,std::allocator< Vector2< double > * > > *|vector< Vector2< double > * > *|std::vector< Vector2< double > * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t = {"_p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t", "vector< Vector2< double > > *|std::vector< Vector2< double > > *|std::vector< Vector2< double >,std::allocator< Vector2< double > > > *|vector< Vector2< double >,std::allocator< Vector2< double > > > *|std::vector< Vec > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT__Tp__Alloc_t = {"_p_std__vectorT__Tp__Alloc_t", "std::vector< _Tp,_Alloc > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT__Tp_p__Alloc_t = {"_p_std__vectorT__Tp_p__Alloc_t", "std::vector< _Tp *,_Alloc > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_anglegrouping_std__allocatorT_anglegrouping_t_t = {"_p_std__vectorT_anglegrouping_std__allocatorT_anglegrouping_t_t", "std::vector< anglegrouping,std::allocator< anglegrouping > > *|std::vector< anglegrouping > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t = {"_p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t", "vector< atomgroup *,std::allocator< atomgroup * > > *|std::vector< atomgroup *,std::allocator< atomgroup * > > *|vector< atomgroup * > *|std::vector< atomgroup * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_atomid_std__allocatorT_atomid_t_t = {"_p_std__vectorT_atomid_std__allocatorT_atomid_t_t", "std::vector< atomid,std::allocator< atomid > > *|std::vector< atomid > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t = {"_p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t", "vector< atomvecRK4 *,std::allocator< atomvecRK4 * > > *|std::vector< atomvecRK4 *,std::allocator< atomvecRK4 * > > *|vector< atomvecRK4 * > *|std::vector< atomvecRK4 * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_bondgrouping_std__allocatorT_bondgrouping_t_t = {"_p_std__vectorT_bondgrouping_std__allocatorT_bondgrouping_t_t", "std::vector< bondgrouping > *|std::vector< bondgrouping,std::allocator< bondgrouping > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t = {"_p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t", "std::vector< constraint *,std::allocator< constraint * > > *|vector< constraint * > *|vector< constraint *,std::allocator< constraint * > > *|std::vector< constraint * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|vector< double,std::allocator< double > > *|std::vector< flt > *|vector< double > *|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_fixedForceAtom_std__allocatorT_fixedForceAtom_t_t = {"_p_std__vectorT_fixedForceAtom_std__allocatorT_fixedForceAtom_t_t", "std::vector< fixedForceAtom,std::allocator< fixedForceAtom > > *|std::vector< fixedForceAtom > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_fixedSpringAtom_std__allocatorT_fixedSpringAtom_t_t = {"_p_std__vectorT_fixedSpringAtom_std__allocatorT_fixedSpringAtom_t_t", "std::vector< fixedSpringAtom > *|std::vector< fixedSpringAtom,std::allocator< fixedSpringAtom > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_idpair_std__allocatorT_idpair_t_t__iterator = {"_p_std__vectorT_idpair_std__allocatorT_idpair_t_t__iterator", "std::vector< idpair,std::allocator< idpair > >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t = {"_p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t", "vector< interaction *,std::allocator< interaction * > > *|vector< interaction * > *|std::vector< interaction * > *|std::vector< interaction *,std::allocator< interaction * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t = {"_p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t", "vector< interactionpairsx *,std::allocator< interactionpairsx * > > *|vector< interactionpairsx * > *|std::vector< interactionpairsx * > *|std::vector< interactionpairsx *,std::allocator< interactionpairsx * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t = {"_p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t", "std::vector< statetracker *,std::allocator< statetracker * > > *|vector< statetracker *,std::allocator< statetracker * > > *|vector< statetracker * > *|std::vector< statetracker * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t = {"_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t", "std::vector< unsigned int,std::allocator< unsigned int > > *|vector< unsigned int,std::allocator< unsigned int > > *|vector< unsigned int > *|std::vector< unsigned int > *|std::vector< uint > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "cuint *|unsigned int *|uint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xrpsummer = {"_p_xrpsummer", "xrpsummer *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Box,
  &_swigt__p_COMSpring,
  &_swigt__p_ChargePair,
  &_swigt__p_Charged,
  &_swigt__p_Charges,
  &_swigt__p_EisMclachlanAtom,
  &_swigt__p_EisMclachlanPair,
  &_swigt__p_HertzianAtom,
  &_swigt__p_HertzianPair,
  &_swigt__p_HydroAtom,
  &_swigt__p_HydroPair,
  &_swigt__p_InfiniteBox,
  &_swigt__p_LJAtomIndexed,
  &_swigt__p_LJAttractFixedRepulseAtom,
  &_swigt__p_LJAttractFixedRepulsePair,
  &_swigt__p_LJAttractPair,
  &_swigt__p_LJAttractRepulseAtom,
  &_swigt__p_LJAttractRepulsePair,
  &_swigt__p_LJDoubleAtom,
  &_swigt__p_LJDoublePair,
  &_swigt__p_LJFullCut,
  &_swigt__p_LJFullPair,
  &_swigt__p_LJatom,
  &_swigt__p_LJatomcut,
  &_swigt__p_LJattract,
  &_swigt__p_LJattractCut,
  &_swigt__p_LJishAtom,
  &_swigt__p_LJishPair,
  &_swigt__p_LJpair,
  &_swigt__p_LJrepulsive,
  &_swigt__p_LJsimple,
  &_swigt__p_NListedT_EisMclachlanAtom_EisMclachlanPair_t,
  &_swigt__p_NListedT_HertzianAtom_HertzianPair_t,
  &_swigt__p_NListedT_HydroAtom_HydroPair_t,
  &_swigt__p_NListedT_LJAtomIndexed_LJFullPair_t,
  &_swigt__p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t,
  &_swigt__p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t,
  &_swigt__p_NListedT_LJDoubleAtom_LJDoublePair_t,
  &_swigt__p_NListedT_LJatom_LJpair_t,
  &_swigt__p_NListedT_LJatomcut_LJAttractPair_t,
  &_swigt__p_NListedT_LJishAtom_LJishPair_t,
  &_swigt__p_NListedVirialT_HertzianAtom_HertzianPair_t,
  &_swigt__p_NPHGaussianConstraint,
  &_swigt__p_NumvectorT_double_2_t,
  &_swigt__p_NumvectorT_double_3_t,
  &_swigt__p_NvectorT_Vec_2_t,
  &_swigt__p_NvectorT_Vector2T_double_t_3_t,
  &_swigt__p_NvectorT_double_2_t,
  &_swigt__p_NvectorT_double_3_t,
  &_swigt__p_OriginBox,
  &_swigt__p_SimpleListedT_HertzianAtom_HertzianPair_t,
  &_swigt__p_StaticCollec,
  &_swigt__p_Vector2T_double_t,
  &_swigt__p_allocator_type,
  &_swigt__p_anglegrouping,
  &_swigt__p_angletriples,
  &_swigt__p_arrayT_atom_p_2_t,
  &_swigt__p_arrayT_atom_p_3_t,
  &_swigt__p_arrayT_atom_p_4_t,
  &_swigt__p_arrayT_atomid_2_t,
  &_swigt__p_atom,
  &_swigt__p_atomRK4,
  &_swigt__p_atomgroup,
  &_swigt__p_atomid,
  &_swigt__p_atompair,
  &_swigt__p_atompaircomp,
  &_swigt__p_atomref,
  &_swigt__p_atomvec,
  &_swigt__p_atomvecRK4,
  &_swigt__p_bivariateGauss,
  &_swigt__p_bondangle,
  &_swigt__p_bondgrouping,
  &_swigt__p_bondpairs,
  &_swigt__p_bool,
  &_swigt__p_boost__mt19937,
  &_swigt__p_boost__normal_distributionT_t,
  &_swigt__p_boost__uniform_01T_t,
  &_swigt__p_boost__variate_generatorT_engine_R_lindistribution_t,
  &_swigt__p_boost__variate_generatorT_engine_R_normdistribution_t,
  &_swigt__p_char,
  &_swigt__p_collection,
  &_swigt__p_collectionConjGradient,
  &_swigt__p_collectionConjGradientBox,
  &_swigt__p_collectionGaussianT,
  &_swigt__p_collectionGear3A,
  &_swigt__p_collectionGear4A,
  &_swigt__p_collectionGear4NPH,
  &_swigt__p_collectionGear4NPT,
  &_swigt__p_collectionGear5A,
  &_swigt__p_collectionGear6A,
  &_swigt__p_collectionNoseHoover,
  &_swigt__p_collectionOverdamped,
  &_swigt__p_collectionRK4,
  &_swigt__p_collectionSol,
  &_swigt__p_collectionSolHT,
  &_swigt__p_collectionVerlet,
  &_swigt__p_collectionVerletNPT,
  &_swigt__p_const_reference,
  &_swigt__p_constraint,
  &_swigt__p_coordCOMConstraint,
  &_swigt__p_coordConstraint,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_electricScreened,
  &_swigt__p_fixedForce,
  &_swigt__p_fixedForceAtom,
  &_swigt__p_fixedSpring,
  &_swigt__p_fixedSpringAtom,
  &_swigt__p_forcepair,
  &_swigt__p_forcepairx,
  &_swigt__p_fpairxFunct,
  &_swigt__p_gaussVec,
  &_swigt__p_idpair,
  &_swigt__p_interaction,
  &_swigt__p_interactionpairsx,
  &_swigt__p_interactpair,
  &_swigt__p_jamminglist,
  &_swigt__p_jamminglistrot,
  &_swigt__p_jammingtree,
  &_swigt__p_jammingtree2,
  &_swigt__p_jammingtreeBD,
  &_swigt__p_metagroup,
  &_swigt__p_neighborlist,
  &_swigt__p_p_PyObject,
  &_swigt__p_p_atom,
  &_swigt__p_p_atomRK4,
  &_swigt__p_pairlist,
  &_swigt__p_reference,
  &_swigt__p_relativeConstraint,
  &_swigt__p_setT_atomid_t,
  &_swigt__p_setT_atomid_t__iterator,
  &_swigt__p_size_type,
  &_swigt__p_spring,
  &_swigt__p_statetracker,
  &_swigt__p_std__allocatorT_Vector2T_double_t_p_t,
  &_swigt__p_std__allocatorT_Vector2T_double_t_t,
  &_swigt__p_std__allocatorT_atomgroup_p_t,
  &_swigt__p_std__allocatorT_atomvecRK4_p_t,
  &_swigt__p_std__allocatorT_constraint_p_t,
  &_swigt__p_std__allocatorT_double_t,
  &_swigt__p_std__allocatorT_interaction_p_t,
  &_swigt__p_std__allocatorT_interactionpairsx_p_t,
  &_swigt__p_std__allocatorT_jamminglist_t,
  &_swigt__p_std__allocatorT_jamminglistrot_t,
  &_swigt__p_std__allocatorT_statetracker_p_t,
  &_swigt__p_std__allocatorT_unsigned_int_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__listT__Tp__Alloc_t,
  &_swigt__p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t,
  &_swigt__p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t,
  &_swigt__p_std__vectorT_Charged_std__allocatorT_Charged_t_t,
  &_swigt__p_std__vectorT_EisMclachlanAtom_std__allocatorT_EisMclachlanAtom_t_t,
  &_swigt__p_std__vectorT_HertzianAtom_std__allocatorT_HertzianAtom_t_t,
  &_swigt__p_std__vectorT_HydroAtom_std__allocatorT_HydroAtom_t_t,
  &_swigt__p_std__vectorT_LJAtomIndexed_std__allocatorT_LJAtomIndexed_t_t,
  &_swigt__p_std__vectorT_LJAttractFixedRepulseAtom_std__allocatorT_LJAttractFixedRepulseAtom_t_t,
  &_swigt__p_std__vectorT_LJAttractRepulseAtom_std__allocatorT_LJAttractRepulseAtom_t_t,
  &_swigt__p_std__vectorT_LJDoubleAtom_std__allocatorT_LJDoubleAtom_t_t,
  &_swigt__p_std__vectorT_LJatom_std__allocatorT_LJatom_t_t,
  &_swigt__p_std__vectorT_LJatomcut_std__allocatorT_LJatomcut_t_t,
  &_swigt__p_std__vectorT_LJishAtom_std__allocatorT_LJishAtom_t_t,
  &_swigt__p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t,
  &_swigt__p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t,
  &_swigt__p_std__vectorT__Tp__Alloc_t,
  &_swigt__p_std__vectorT__Tp_p__Alloc_t,
  &_swigt__p_std__vectorT_anglegrouping_std__allocatorT_anglegrouping_t_t,
  &_swigt__p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t,
  &_swigt__p_std__vectorT_atomid_std__allocatorT_atomid_t_t,
  &_swigt__p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t,
  &_swigt__p_std__vectorT_bondgrouping_std__allocatorT_bondgrouping_t_t,
  &_swigt__p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_fixedForceAtom_std__allocatorT_fixedForceAtom_t_t,
  &_swigt__p_std__vectorT_fixedSpringAtom_std__allocatorT_fixedSpringAtom_t_t,
  &_swigt__p_std__vectorT_idpair_std__allocatorT_idpair_t_t__iterator,
  &_swigt__p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t,
  &_swigt__p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t,
  &_swigt__p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t,
  &_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_unsigned_int,
  &_swigt__p_value_type,
  &_swigt__p_xrpsummer,
};

static swig_cast_info _swigc__p_Box[] = {  {&_swigt__p_OriginBox, _p_OriginBoxTo_p_Box, 0, 0},  {&_swigt__p_Box, 0, 0, 0},  {&_swigt__p_InfiniteBox, _p_InfiniteBoxTo_p_Box, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_COMSpring[] = {  {&_swigt__p_COMSpring, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ChargePair[] = {  {&_swigt__p_ChargePair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Charged[] = {  {&_swigt__p_Charged, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Charges[] = {  {&_swigt__p_Charges, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EisMclachlanAtom[] = {  {&_swigt__p_EisMclachlanAtom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EisMclachlanPair[] = {  {&_swigt__p_EisMclachlanPair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HertzianAtom[] = {  {&_swigt__p_HertzianAtom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HertzianPair[] = {  {&_swigt__p_HertzianPair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HydroAtom[] = {  {&_swigt__p_HydroAtom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HydroPair[] = {  {&_swigt__p_HydroPair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InfiniteBox[] = {  {&_swigt__p_InfiniteBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LJAtomIndexed[] = {  {&_swigt__p_LJAtomIndexed, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LJAttractFixedRepulseAtom[] = {  {&_swigt__p_LJAttractFixedRepulseAtom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LJAttractFixedRepulsePair[] = {  {&_swigt__p_LJAttractFixedRepulsePair, 0, 0, 0},  {&_swigt__p_LJDoublePair, _p_LJDoublePairTo_p_LJAttractFixedRepulsePair, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LJAttractPair[] = {  {&_swigt__p_LJAttractPair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LJAttractRepulseAtom[] = {  {&_swigt__p_LJAttractRepulseAtom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LJAttractRepulsePair[] = {  {&_swigt__p_LJAttractRepulsePair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LJDoubleAtom[] = {  {&_swigt__p_LJDoubleAtom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LJDoublePair[] = {  {&_swigt__p_LJDoublePair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LJFullCut[] = {  {&_swigt__p_LJFullCut, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LJFullPair[] = {  {&_swigt__p_LJFullPair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LJatom[] = {  {&_swigt__p_LJatomcut, _p_LJatomcutTo_p_LJatom, 0, 0},  {&_swigt__p_LJDoubleAtom, _p_LJDoubleAtomTo_p_LJatom, 0, 0},  {&_swigt__p_LJatom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LJatomcut[] = {  {&_swigt__p_LJatomcut, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LJattract[] = {  {&_swigt__p_LJattract, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LJattractCut[] = {  {&_swigt__p_LJattractCut, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LJishAtom[] = {  {&_swigt__p_LJishAtom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LJishPair[] = {  {&_swigt__p_LJishPair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LJpair[] = {  {&_swigt__p_LJpair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LJrepulsive[] = {  {&_swigt__p_LJrepulsive, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LJsimple[] = {  {&_swigt__p_LJsimple, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NListedT_EisMclachlanAtom_EisMclachlanPair_t[] = {  {&_swigt__p_NListedT_EisMclachlanAtom_EisMclachlanPair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NListedT_HertzianAtom_HertzianPair_t[] = {  {&_swigt__p_NListedT_HertzianAtom_HertzianPair_t, 0, 0, 0},  {&_swigt__p_NListedVirialT_HertzianAtom_HertzianPair_t, _p_NListedVirialT_HertzianAtom_HertzianPair_tTo_p_NListedT_HertzianAtom_HertzianPair_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NListedT_HydroAtom_HydroPair_t[] = {  {&_swigt__p_NListedT_HydroAtom_HydroPair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NListedT_LJAtomIndexed_LJFullPair_t[] = {  {&_swigt__p_NListedT_LJAtomIndexed_LJFullPair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t[] = {  {&_swigt__p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t[] = {  {&_swigt__p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NListedT_LJDoubleAtom_LJDoublePair_t[] = {  {&_swigt__p_NListedT_LJDoubleAtom_LJDoublePair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NListedT_LJatom_LJpair_t[] = {  {&_swigt__p_NListedT_LJatom_LJpair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NListedT_LJatomcut_LJAttractPair_t[] = {  {&_swigt__p_NListedT_LJatomcut_LJAttractPair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NListedT_LJishAtom_LJishPair_t[] = {  {&_swigt__p_NListedT_LJishAtom_LJishPair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NListedVirialT_HertzianAtom_HertzianPair_t[] = {  {&_swigt__p_NListedVirialT_HertzianAtom_HertzianPair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NPHGaussianConstraint[] = {  {&_swigt__p_NPHGaussianConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NumvectorT_double_2_t[] = {  {&_swigt__p_NumvectorT_double_2_t, 0, 0, 0},  {&_swigt__p_Vector2T_double_t, _p_Vector2T_double_tTo_p_NumvectorT_double_2_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NumvectorT_double_3_t[] = {  {&_swigt__p_NumvectorT_double_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NvectorT_Vec_2_t[] = {  {&_swigt__p_NvectorT_Vec_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NvectorT_Vector2T_double_t_3_t[] = {  {&_swigt__p_NvectorT_Vector2T_double_t_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NvectorT_double_2_t[] = {  {&_swigt__p_NvectorT_double_2_t, 0, 0, 0},  {&_swigt__p_NumvectorT_double_2_t, _p_NumvectorT_double_2_tTo_p_NvectorT_double_2_t, 0, 0},  {&_swigt__p_Vector2T_double_t, _p_Vector2T_double_tTo_p_NvectorT_double_2_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NvectorT_double_3_t[] = {  {&_swigt__p_NvectorT_double_3_t, 0, 0, 0},  {&_swigt__p_NumvectorT_double_3_t, _p_NumvectorT_double_3_tTo_p_NvectorT_double_3_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OriginBox[] = {  {&_swigt__p_OriginBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleListedT_HertzianAtom_HertzianPair_t[] = {  {&_swigt__p_SimpleListedT_HertzianAtom_HertzianPair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StaticCollec[] = {  {&_swigt__p_StaticCollec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vector2T_double_t[] = {  {&_swigt__p_Vector2T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anglegrouping[] = {  {&_swigt__p_anglegrouping, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_angletriples[] = {  {&_swigt__p_angletriples, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arrayT_atom_p_2_t[] = {  {&_swigt__p_arrayT_atom_p_2_t, 0, 0, 0},  {&_swigt__p_atompair, _p_atompairTo_p_arrayT_atom_p_2_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arrayT_atom_p_3_t[] = {  {&_swigt__p_arrayT_atom_p_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arrayT_atom_p_4_t[] = {  {&_swigt__p_arrayT_atom_p_4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_arrayT_atomid_2_t[] = {  {&_swigt__p_arrayT_atomid_2_t, 0, 0, 0},  {&_swigt__p_idpair, _p_idpairTo_p_arrayT_atomid_2_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_atom[] = {  {&_swigt__p_atomRK4, _p_atomRK4To_p_atom, 0, 0},  {&_swigt__p_atom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_atomRK4[] = {  {&_swigt__p_atomRK4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_atomgroup[] = {  {&_swigt__p_metagroup, _p_metagroupTo_p_atomgroup, 0, 0},  {&_swigt__p_atomvec, _p_atomvecTo_p_atomgroup, 0, 0},  {&_swigt__p_atomgroup, 0, 0, 0},  {&_swigt__p_atomvecRK4, _p_atomvecRK4To_p_atomgroup, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_atomid[] = {  {&_swigt__p_HydroAtom, _p_HydroAtomTo_p_atomid, 0, 0},  {&_swigt__p_LJishAtom, _p_LJishAtomTo_p_atomid, 0, 0},  {&_swigt__p_Charged, _p_ChargedTo_p_atomid, 0, 0},  {&_swigt__p_LJatomcut, _p_LJatomcutTo_p_atomid, 0, 0},  {&_swigt__p_HertzianAtom, _p_HertzianAtomTo_p_atomid, 0, 0},  {&_swigt__p_LJAttractRepulseAtom, _p_LJAttractRepulseAtomTo_p_atomid, 0, 0},  {&_swigt__p_LJAttractFixedRepulseAtom, _p_LJAttractFixedRepulseAtomTo_p_atomid, 0, 0},  {&_swigt__p_LJDoubleAtom, _p_LJDoubleAtomTo_p_atomid, 0, 0},  {&_swigt__p_EisMclachlanAtom, _p_EisMclachlanAtomTo_p_atomid, 0, 0},  {&_swigt__p_atomid, 0, 0, 0},  {&_swigt__p_LJatom, _p_LJatomTo_p_atomid, 0, 0},  {&_swigt__p_LJAtomIndexed, _p_LJAtomIndexedTo_p_atomid, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_atompair[] = {  {&_swigt__p_atompair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_atompaircomp[] = {  {&_swigt__p_atompaircomp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_atomref[] = {  {&_swigt__p_HydroAtom, _p_HydroAtomTo_p_atomref, 0, 0},  {&_swigt__p_LJishAtom, _p_LJishAtomTo_p_atomref, 0, 0},  {&_swigt__p_Charged, _p_ChargedTo_p_atomref, 0, 0},  {&_swigt__p_LJatomcut, _p_LJatomcutTo_p_atomref, 0, 0},  {&_swigt__p_atomref, 0, 0, 0},  {&_swigt__p_HertzianAtom, _p_HertzianAtomTo_p_atomref, 0, 0},  {&_swigt__p_LJAttractRepulseAtom, _p_LJAttractRepulseAtomTo_p_atomref, 0, 0},  {&_swigt__p_LJAttractFixedRepulseAtom, _p_LJAttractFixedRepulseAtomTo_p_atomref, 0, 0},  {&_swigt__p_LJDoubleAtom, _p_LJDoubleAtomTo_p_atomref, 0, 0},  {&_swigt__p_EisMclachlanAtom, _p_EisMclachlanAtomTo_p_atomref, 0, 0},  {&_swigt__p_atomid, _p_atomidTo_p_atomref, 0, 0},  {&_swigt__p_LJatom, _p_LJatomTo_p_atomref, 0, 0},  {&_swigt__p_LJAtomIndexed, _p_LJAtomIndexedTo_p_atomref, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_atomvec[] = {  {&_swigt__p_atomvec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_atomvecRK4[] = {  {&_swigt__p_atomvecRK4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bivariateGauss[] = {  {&_swigt__p_bivariateGauss, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bondangle[] = {  {&_swigt__p_bondangle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bondgrouping[] = {  {&_swigt__p_bondgrouping, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bondpairs[] = {  {&_swigt__p_bondpairs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__mt19937[] = {  {&_swigt__p_boost__mt19937, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__normal_distributionT_t[] = {  {&_swigt__p_boost__normal_distributionT_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__uniform_01T_t[] = {  {&_swigt__p_boost__uniform_01T_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__variate_generatorT_engine_R_lindistribution_t[] = {  {&_swigt__p_boost__variate_generatorT_engine_R_lindistribution_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__variate_generatorT_engine_R_normdistribution_t[] = {  {&_swigt__p_boost__variate_generatorT_engine_R_normdistribution_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_collection[] = {  {&_swigt__p_collection, 0, 0, 0},  {&_swigt__p_collectionRK4, _p_collectionRK4To_p_collection, 0, 0},  {&_swigt__p_collectionConjGradientBox, _p_collectionConjGradientBoxTo_p_collection, 0, 0},  {&_swigt__p_StaticCollec, _p_StaticCollecTo_p_collection, 0, 0},  {&_swigt__p_collectionGear4NPH, _p_collectionGear4NPHTo_p_collection, 0, 0},  {&_swigt__p_collectionConjGradient, _p_collectionConjGradientTo_p_collection, 0, 0},  {&_swigt__p_collectionVerlet, _p_collectionVerletTo_p_collection, 0, 0},  {&_swigt__p_collectionSol, _p_collectionSolTo_p_collection, 0, 0},  {&_swigt__p_collectionSolHT, _p_collectionSolHTTo_p_collection, 0, 0},  {&_swigt__p_collectionVerletNPT, _p_collectionVerletNPTTo_p_collection, 0, 0},  {&_swigt__p_collectionNoseHoover, _p_collectionNoseHooverTo_p_collection, 0, 0},  {&_swigt__p_collectionGear6A, _p_collectionGear6ATo_p_collection, 0, 0},  {&_swigt__p_collectionOverdamped, _p_collectionOverdampedTo_p_collection, 0, 0},  {&_swigt__p_collectionGear5A, _p_collectionGear5ATo_p_collection, 0, 0},  {&_swigt__p_collectionGear4A, _p_collectionGear4ATo_p_collection, 0, 0},  {&_swigt__p_collectionGear4NPT, _p_collectionGear4NPTTo_p_collection, 0, 0},  {&_swigt__p_collectionGaussianT, _p_collectionGaussianTTo_p_collection, 0, 0},  {&_swigt__p_collectionGear3A, _p_collectionGear3ATo_p_collection, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_collectionConjGradient[] = {  {&_swigt__p_collectionConjGradient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_collectionConjGradientBox[] = {  {&_swigt__p_collectionConjGradientBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_collectionGaussianT[] = {  {&_swigt__p_collectionGaussianT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_collectionGear3A[] = {  {&_swigt__p_collectionGear3A, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_collectionGear4A[] = {  {&_swigt__p_collectionGear4A, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_collectionGear4NPH[] = {  {&_swigt__p_collectionGear4NPH, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_collectionGear4NPT[] = {  {&_swigt__p_collectionGear4NPT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_collectionGear5A[] = {  {&_swigt__p_collectionGear5A, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_collectionGear6A[] = {  {&_swigt__p_collectionGear6A, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_collectionNoseHoover[] = {  {&_swigt__p_collectionNoseHoover, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_collectionOverdamped[] = {  {&_swigt__p_collectionOverdamped, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_collectionRK4[] = {  {&_swigt__p_collectionRK4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_collectionSol[] = {  {&_swigt__p_collectionSol, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_collectionSolHT[] = {  {&_swigt__p_collectionSolHT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_collectionVerlet[] = {  {&_swigt__p_collectionVerlet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_collectionVerletNPT[] = {  {&_swigt__p_collectionVerletNPT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reference[] = {  {&_swigt__p_const_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_constraint[] = {  {&_swigt__p_constraint, 0, 0, 0},  {&_swigt__p_coordConstraint, _p_coordConstraintTo_p_constraint, 0, 0},  {&_swigt__p_coordCOMConstraint, _p_coordCOMConstraintTo_p_constraint, 0, 0},  {&_swigt__p_relativeConstraint, _p_relativeConstraintTo_p_constraint, 0, 0},  {&_swigt__p_NPHGaussianConstraint, _p_NPHGaussianConstraintTo_p_constraint, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coordCOMConstraint[] = {  {&_swigt__p_coordCOMConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coordConstraint[] = {  {&_swigt__p_coordConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_electricScreened[] = {  {&_swigt__p_electricScreened, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fixedForce[] = {  {&_swigt__p_fixedForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fixedForceAtom[] = {  {&_swigt__p_fixedForceAtom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fixedSpring[] = {  {&_swigt__p_fixedSpring, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fixedSpringAtom[] = {  {&_swigt__p_fixedSpringAtom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_forcepair[] = {  {&_swigt__p_forcepair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_forcepairx[] = {  {&_swigt__p_forcepairx, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fpairxFunct[] = {  {&_swigt__p_xrpsummer, _p_xrpsummerTo_p_fpairxFunct, 0, 0},  {&_swigt__p_fpairxFunct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gaussVec[] = {  {&_swigt__p_gaussVec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_idpair[] = {  {&_swigt__p_idpair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_interaction[] = {  {&_swigt__p_NListedT_HydroAtom_HydroPair_t, _p_NListedT_HydroAtom_HydroPair_tTo_p_interaction, 0, 0},  {&_swigt__p_NListedT_LJatom_LJpair_t, _p_NListedT_LJatom_LJpair_tTo_p_interaction, 0, 0},  {&_swigt__p_NListedT_LJDoubleAtom_LJDoublePair_t, _p_NListedT_LJDoubleAtom_LJDoublePair_tTo_p_interaction, 0, 0},  {&_swigt__p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t, _p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_tTo_p_interaction, 0, 0},  {&_swigt__p_bondpairs, _p_bondpairsTo_p_interaction, 0, 0},  {&_swigt__p_LJsimple, _p_LJsimpleTo_p_interaction, 0, 0},  {&_swigt__p_fixedForce, _p_fixedForceTo_p_interaction, 0, 0},  {&_swigt__p_NListedT_LJatomcut_LJAttractPair_t, _p_NListedT_LJatomcut_LJAttractPair_tTo_p_interaction, 0, 0},  {&_swigt__p_NListedT_EisMclachlanAtom_EisMclachlanPair_t, _p_NListedT_EisMclachlanAtom_EisMclachlanPair_tTo_p_interaction, 0, 0},  {&_swigt__p_NListedT_LJishAtom_LJishPair_t, _p_NListedT_LJishAtom_LJishPair_tTo_p_interaction, 0, 0},  {&_swigt__p_SimpleListedT_HertzianAtom_HertzianPair_t, _p_SimpleListedT_HertzianAtom_HertzianPair_tTo_p_interaction, 0, 0},  {&_swigt__p_NListedVirialT_HertzianAtom_HertzianPair_t, _p_NListedVirialT_HertzianAtom_HertzianPair_tTo_p_interaction, 0, 0},  {&_swigt__p_NListedT_HertzianAtom_HertzianPair_t, _p_NListedT_HertzianAtom_HertzianPair_tTo_p_interaction, 0, 0},  {&_swigt__p_NListedT_LJAtomIndexed_LJFullPair_t, _p_NListedT_LJAtomIndexed_LJFullPair_tTo_p_interaction, 0, 0},  {&_swigt__p_angletriples, _p_angletriplesTo_p_interaction, 0, 0},  {&_swigt__p_interaction, 0, 0, 0},  {&_swigt__p_COMSpring, _p_COMSpringTo_p_interaction, 0, 0},  {&_swigt__p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t, _p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_tTo_p_interaction, 0, 0},  {&_swigt__p_Charges, _p_ChargesTo_p_interaction, 0, 0},  {&_swigt__p_fixedSpring, _p_fixedSpringTo_p_interaction, 0, 0},  {&_swigt__p_interactionpairsx, _p_interactionpairsxTo_p_interaction, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_interactionpairsx[] = {  {&_swigt__p_NListedVirialT_HertzianAtom_HertzianPair_t, _p_NListedVirialT_HertzianAtom_HertzianPair_tTo_p_interactionpairsx, 0, 0},  {&_swigt__p_interactionpairsx, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_interactpair[] = {  {&_swigt__p_interactpair, 0, 0, 0},  {&_swigt__p_spring, _p_springTo_p_interactpair, 0, 0},  {&_swigt__p_electricScreened, _p_electricScreenedTo_p_interactpair, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jamminglist[] = {  {&_swigt__p_jamminglist, 0, 0, 0},  {&_swigt__p_jamminglistrot, _p_jamminglistrotTo_p_jamminglist, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jamminglistrot[] = {  {&_swigt__p_jamminglistrot, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jammingtree[] = {  {&_swigt__p_jammingtree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jammingtree2[] = {  {&_swigt__p_jammingtree2, 0, 0, 0},  {&_swigt__p_jammingtreeBD, _p_jammingtreeBDTo_p_jammingtree2, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jammingtreeBD[] = {  {&_swigt__p_jammingtreeBD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_metagroup[] = {  {&_swigt__p_metagroup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_neighborlist[] = {  {&_swigt__p_neighborlist, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_atomRK4[] = {{&_swigt__p_p_atomRK4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_atom[] = {  {&_swigt__p_p_atomRK4, _p_p_atomRK4To_p_p_atom, 0, 0},  {&_swigt__p_p_atom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pairlist[] = {  {&_swigt__p_pairlist, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reference[] = {  {&_swigt__p_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_relativeConstraint[] = {  {&_swigt__p_relativeConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_setT_atomid_t[] = {  {&_swigt__p_setT_atomid_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_setT_atomid_t__iterator[] = {  {&_swigt__p_setT_atomid_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_spring[] = {  {&_swigt__p_spring, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_statetracker[] = {  {&_swigt__p_neighborlist, _p_neighborlistTo_p_statetracker, 0, 0},  {&_swigt__p_statetracker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_Vector2T_double_t_p_t[] = {  {&_swigt__p_std__allocatorT_Vector2T_double_t_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_Vector2T_double_t_t[] = {  {&_swigt__p_std__allocatorT_Vector2T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_atomgroup_p_t[] = {  {&_swigt__p_std__allocatorT_atomgroup_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_atomvecRK4_p_t[] = {  {&_swigt__p_std__allocatorT_atomvecRK4_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_constraint_p_t[] = {  {&_swigt__p_std__allocatorT_constraint_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_double_t[] = {  {&_swigt__p_std__allocatorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_interaction_p_t[] = {  {&_swigt__p_std__allocatorT_interaction_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_interactionpairsx_p_t[] = {  {&_swigt__p_std__allocatorT_interactionpairsx_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_jamminglist_t[] = {  {&_swigt__p_std__allocatorT_jamminglist_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_jamminglistrot_t[] = {  {&_swigt__p_std__allocatorT_jamminglistrot_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_statetracker_p_t[] = {  {&_swigt__p_std__allocatorT_statetracker_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_unsigned_int_t[] = {  {&_swigt__p_std__allocatorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT__Tp__Alloc_t[] = {  {&_swigt__p_std__listT__Tp__Alloc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t[] = {  {&_swigt__p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t[] = {  {&_swigt__p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Charged_std__allocatorT_Charged_t_t[] = {  {&_swigt__p_std__vectorT_Charged_std__allocatorT_Charged_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_EisMclachlanAtom_std__allocatorT_EisMclachlanAtom_t_t[] = {  {&_swigt__p_std__vectorT_EisMclachlanAtom_std__allocatorT_EisMclachlanAtom_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_HertzianAtom_std__allocatorT_HertzianAtom_t_t[] = {  {&_swigt__p_std__vectorT_HertzianAtom_std__allocatorT_HertzianAtom_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_HydroAtom_std__allocatorT_HydroAtom_t_t[] = {  {&_swigt__p_std__vectorT_HydroAtom_std__allocatorT_HydroAtom_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_LJAtomIndexed_std__allocatorT_LJAtomIndexed_t_t[] = {  {&_swigt__p_std__vectorT_LJAtomIndexed_std__allocatorT_LJAtomIndexed_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_LJAttractFixedRepulseAtom_std__allocatorT_LJAttractFixedRepulseAtom_t_t[] = {  {&_swigt__p_std__vectorT_LJAttractFixedRepulseAtom_std__allocatorT_LJAttractFixedRepulseAtom_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_LJAttractRepulseAtom_std__allocatorT_LJAttractRepulseAtom_t_t[] = {  {&_swigt__p_std__vectorT_LJAttractRepulseAtom_std__allocatorT_LJAttractRepulseAtom_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_LJDoubleAtom_std__allocatorT_LJDoubleAtom_t_t[] = {  {&_swigt__p_std__vectorT_LJDoubleAtom_std__allocatorT_LJDoubleAtom_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_LJatom_std__allocatorT_LJatom_t_t[] = {  {&_swigt__p_std__vectorT_LJatom_std__allocatorT_LJatom_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_LJatomcut_std__allocatorT_LJatomcut_t_t[] = {  {&_swigt__p_std__vectorT_LJatomcut_std__allocatorT_LJatomcut_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_LJishAtom_std__allocatorT_LJishAtom_t_t[] = {  {&_swigt__p_std__vectorT_LJishAtom_std__allocatorT_LJishAtom_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t[] = {  {&_swigt__p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t[] = {  {&_swigt__p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT__Tp__Alloc_t[] = {  {&_swigt__p_std__vectorT__Tp__Alloc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT__Tp_p__Alloc_t[] = {  {&_swigt__p_std__vectorT__Tp_p__Alloc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_anglegrouping_std__allocatorT_anglegrouping_t_t[] = {  {&_swigt__p_std__vectorT_anglegrouping_std__allocatorT_anglegrouping_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t[] = {  {&_swigt__p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_atomid_std__allocatorT_atomid_t_t[] = {  {&_swigt__p_std__vectorT_atomid_std__allocatorT_atomid_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t[] = {  {&_swigt__p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_bondgrouping_std__allocatorT_bondgrouping_t_t[] = {  {&_swigt__p_std__vectorT_bondgrouping_std__allocatorT_bondgrouping_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t[] = {  {&_swigt__p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_fixedForceAtom_std__allocatorT_fixedForceAtom_t_t[] = {  {&_swigt__p_std__vectorT_fixedForceAtom_std__allocatorT_fixedForceAtom_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_fixedSpringAtom_std__allocatorT_fixedSpringAtom_t_t[] = {  {&_swigt__p_std__vectorT_fixedSpringAtom_std__allocatorT_fixedSpringAtom_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_idpair_std__allocatorT_idpair_t_t__iterator[] = {  {&_swigt__p_std__vectorT_idpair_std__allocatorT_idpair_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t[] = {  {&_swigt__p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t[] = {  {&_swigt__p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t[] = {  {&_swigt__p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xrpsummer[] = {  {&_swigt__p_xrpsummer, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Box,
  _swigc__p_COMSpring,
  _swigc__p_ChargePair,
  _swigc__p_Charged,
  _swigc__p_Charges,
  _swigc__p_EisMclachlanAtom,
  _swigc__p_EisMclachlanPair,
  _swigc__p_HertzianAtom,
  _swigc__p_HertzianPair,
  _swigc__p_HydroAtom,
  _swigc__p_HydroPair,
  _swigc__p_InfiniteBox,
  _swigc__p_LJAtomIndexed,
  _swigc__p_LJAttractFixedRepulseAtom,
  _swigc__p_LJAttractFixedRepulsePair,
  _swigc__p_LJAttractPair,
  _swigc__p_LJAttractRepulseAtom,
  _swigc__p_LJAttractRepulsePair,
  _swigc__p_LJDoubleAtom,
  _swigc__p_LJDoublePair,
  _swigc__p_LJFullCut,
  _swigc__p_LJFullPair,
  _swigc__p_LJatom,
  _swigc__p_LJatomcut,
  _swigc__p_LJattract,
  _swigc__p_LJattractCut,
  _swigc__p_LJishAtom,
  _swigc__p_LJishPair,
  _swigc__p_LJpair,
  _swigc__p_LJrepulsive,
  _swigc__p_LJsimple,
  _swigc__p_NListedT_EisMclachlanAtom_EisMclachlanPair_t,
  _swigc__p_NListedT_HertzianAtom_HertzianPair_t,
  _swigc__p_NListedT_HydroAtom_HydroPair_t,
  _swigc__p_NListedT_LJAtomIndexed_LJFullPair_t,
  _swigc__p_NListedT_LJAttractFixedRepulseAtom_LJAttractFixedRepulsePair_t,
  _swigc__p_NListedT_LJAttractRepulseAtom_LJAttractRepulsePair_t,
  _swigc__p_NListedT_LJDoubleAtom_LJDoublePair_t,
  _swigc__p_NListedT_LJatom_LJpair_t,
  _swigc__p_NListedT_LJatomcut_LJAttractPair_t,
  _swigc__p_NListedT_LJishAtom_LJishPair_t,
  _swigc__p_NListedVirialT_HertzianAtom_HertzianPair_t,
  _swigc__p_NPHGaussianConstraint,
  _swigc__p_NumvectorT_double_2_t,
  _swigc__p_NumvectorT_double_3_t,
  _swigc__p_NvectorT_Vec_2_t,
  _swigc__p_NvectorT_Vector2T_double_t_3_t,
  _swigc__p_NvectorT_double_2_t,
  _swigc__p_NvectorT_double_3_t,
  _swigc__p_OriginBox,
  _swigc__p_SimpleListedT_HertzianAtom_HertzianPair_t,
  _swigc__p_StaticCollec,
  _swigc__p_Vector2T_double_t,
  _swigc__p_allocator_type,
  _swigc__p_anglegrouping,
  _swigc__p_angletriples,
  _swigc__p_arrayT_atom_p_2_t,
  _swigc__p_arrayT_atom_p_3_t,
  _swigc__p_arrayT_atom_p_4_t,
  _swigc__p_arrayT_atomid_2_t,
  _swigc__p_atom,
  _swigc__p_atomRK4,
  _swigc__p_atomgroup,
  _swigc__p_atomid,
  _swigc__p_atompair,
  _swigc__p_atompaircomp,
  _swigc__p_atomref,
  _swigc__p_atomvec,
  _swigc__p_atomvecRK4,
  _swigc__p_bivariateGauss,
  _swigc__p_bondangle,
  _swigc__p_bondgrouping,
  _swigc__p_bondpairs,
  _swigc__p_bool,
  _swigc__p_boost__mt19937,
  _swigc__p_boost__normal_distributionT_t,
  _swigc__p_boost__uniform_01T_t,
  _swigc__p_boost__variate_generatorT_engine_R_lindistribution_t,
  _swigc__p_boost__variate_generatorT_engine_R_normdistribution_t,
  _swigc__p_char,
  _swigc__p_collection,
  _swigc__p_collectionConjGradient,
  _swigc__p_collectionConjGradientBox,
  _swigc__p_collectionGaussianT,
  _swigc__p_collectionGear3A,
  _swigc__p_collectionGear4A,
  _swigc__p_collectionGear4NPH,
  _swigc__p_collectionGear4NPT,
  _swigc__p_collectionGear5A,
  _swigc__p_collectionGear6A,
  _swigc__p_collectionNoseHoover,
  _swigc__p_collectionOverdamped,
  _swigc__p_collectionRK4,
  _swigc__p_collectionSol,
  _swigc__p_collectionSolHT,
  _swigc__p_collectionVerlet,
  _swigc__p_collectionVerletNPT,
  _swigc__p_const_reference,
  _swigc__p_constraint,
  _swigc__p_coordCOMConstraint,
  _swigc__p_coordConstraint,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_electricScreened,
  _swigc__p_fixedForce,
  _swigc__p_fixedForceAtom,
  _swigc__p_fixedSpring,
  _swigc__p_fixedSpringAtom,
  _swigc__p_forcepair,
  _swigc__p_forcepairx,
  _swigc__p_fpairxFunct,
  _swigc__p_gaussVec,
  _swigc__p_idpair,
  _swigc__p_interaction,
  _swigc__p_interactionpairsx,
  _swigc__p_interactpair,
  _swigc__p_jamminglist,
  _swigc__p_jamminglistrot,
  _swigc__p_jammingtree,
  _swigc__p_jammingtree2,
  _swigc__p_jammingtreeBD,
  _swigc__p_metagroup,
  _swigc__p_neighborlist,
  _swigc__p_p_PyObject,
  _swigc__p_p_atom,
  _swigc__p_p_atomRK4,
  _swigc__p_pairlist,
  _swigc__p_reference,
  _swigc__p_relativeConstraint,
  _swigc__p_setT_atomid_t,
  _swigc__p_setT_atomid_t__iterator,
  _swigc__p_size_type,
  _swigc__p_spring,
  _swigc__p_statetracker,
  _swigc__p_std__allocatorT_Vector2T_double_t_p_t,
  _swigc__p_std__allocatorT_Vector2T_double_t_t,
  _swigc__p_std__allocatorT_atomgroup_p_t,
  _swigc__p_std__allocatorT_atomvecRK4_p_t,
  _swigc__p_std__allocatorT_constraint_p_t,
  _swigc__p_std__allocatorT_double_t,
  _swigc__p_std__allocatorT_interaction_p_t,
  _swigc__p_std__allocatorT_interactionpairsx_p_t,
  _swigc__p_std__allocatorT_jamminglist_t,
  _swigc__p_std__allocatorT_jamminglistrot_t,
  _swigc__p_std__allocatorT_statetracker_p_t,
  _swigc__p_std__allocatorT_unsigned_int_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__listT__Tp__Alloc_t,
  _swigc__p_std__listT_jamminglist_std__allocatorT_jamminglist_t_t,
  _swigc__p_std__listT_jamminglistrot_std__allocatorT_jamminglistrot_t_t,
  _swigc__p_std__vectorT_Charged_std__allocatorT_Charged_t_t,
  _swigc__p_std__vectorT_EisMclachlanAtom_std__allocatorT_EisMclachlanAtom_t_t,
  _swigc__p_std__vectorT_HertzianAtom_std__allocatorT_HertzianAtom_t_t,
  _swigc__p_std__vectorT_HydroAtom_std__allocatorT_HydroAtom_t_t,
  _swigc__p_std__vectorT_LJAtomIndexed_std__allocatorT_LJAtomIndexed_t_t,
  _swigc__p_std__vectorT_LJAttractFixedRepulseAtom_std__allocatorT_LJAttractFixedRepulseAtom_t_t,
  _swigc__p_std__vectorT_LJAttractRepulseAtom_std__allocatorT_LJAttractRepulseAtom_t_t,
  _swigc__p_std__vectorT_LJDoubleAtom_std__allocatorT_LJDoubleAtom_t_t,
  _swigc__p_std__vectorT_LJatom_std__allocatorT_LJatom_t_t,
  _swigc__p_std__vectorT_LJatomcut_std__allocatorT_LJatomcut_t_t,
  _swigc__p_std__vectorT_LJishAtom_std__allocatorT_LJishAtom_t_t,
  _swigc__p_std__vectorT_Vector2T_double_t_p_std__allocatorT_Vector2T_double_t_p_t_t,
  _swigc__p_std__vectorT_Vector2T_double_t_std__allocatorT_Vector2T_double_t_t_t,
  _swigc__p_std__vectorT__Tp__Alloc_t,
  _swigc__p_std__vectorT__Tp_p__Alloc_t,
  _swigc__p_std__vectorT_anglegrouping_std__allocatorT_anglegrouping_t_t,
  _swigc__p_std__vectorT_atomgroup_p_std__allocatorT_atomgroup_p_t_t,
  _swigc__p_std__vectorT_atomid_std__allocatorT_atomid_t_t,
  _swigc__p_std__vectorT_atomvecRK4_p_std__allocatorT_atomvecRK4_p_t_t,
  _swigc__p_std__vectorT_bondgrouping_std__allocatorT_bondgrouping_t_t,
  _swigc__p_std__vectorT_constraint_p_std__allocatorT_constraint_p_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_fixedForceAtom_std__allocatorT_fixedForceAtom_t_t,
  _swigc__p_std__vectorT_fixedSpringAtom_std__allocatorT_fixedSpringAtom_t_t,
  _swigc__p_std__vectorT_idpair_std__allocatorT_idpair_t_t__iterator,
  _swigc__p_std__vectorT_interaction_p_std__allocatorT_interaction_p_t_t,
  _swigc__p_std__vectorT_interactionpairsx_p_std__allocatorT_interactionpairsx_p_t_t,
  _swigc__p_std__vectorT_statetracker_p_std__allocatorT_statetracker_p_t_t,
  _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_unsigned_int,
  _swigc__p_value_type,
  _swigc__p_xrpsummer,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "NDIM",SWIG_From_int(static_cast< int >(2)));
  PyDict_SetItemString(md,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"infbox",Swig_var_infbox_get, Swig_var_infbox_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"LJr0",Swig_var_LJr0_get, Swig_var_LJr0_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"LJr0sq",Swig_var_LJr0sq_get, Swig_var_LJr0sq_set);
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

